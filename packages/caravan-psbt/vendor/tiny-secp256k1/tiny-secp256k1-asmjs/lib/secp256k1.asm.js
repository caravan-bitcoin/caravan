import * as $_rand_js from './rand.js';
import * as $_validate_error_js from './validate_error.js';

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 655360, "c3JjL2xpYi5ycwAAAAAKAAoAAABvAAAAJgAAAAAAAABhdHRlbXB0IHRvIG11bHRpcGx5IHdpdGggb3ZlcmZsb3c=");
  base64DecodeToExistingUint8Array(bufferView, 655746, "");
  base64DecodeToExistingUint8Array(bufferView, 689976, "CAAAAAAAAAAJ");
  base64DecodeToExistingUint8Array(bufferView, 690000, "CQAAAAAAAABzZWxmIHRlc3QgZmFpbGVkAAAAAAgAAAAAAAAASW52YWxpZCBmbGFncwBwdWJrZXkgIT0gTlVMTABpbnB1dCAhPSBOVUxMAG91dHB1dGxlbiAhPSBOVUxMACpvdXRwdXRsZW4gPj0gKChmbGFncyAmIFNFQ1AyNTZLMV9GTEFHU19CSVRfQ09NUFJFU1NJT04pID8gMzN1IDogNjV1KQBvdXRwdXQgIT0gTlVMTAAoZmxhZ3MgJiBTRUNQMjU2SzFfRkxBR1NfVFlQRV9NQVNLKSA9PSBTRUNQMjU2SzFfRkxBR1NfVFlQRV9DT01QUkVTU0lPTgBzaWcgIT0gTlVMTABpbnB1dDY0ICE9IE5VTEwAb3V0cHV0NjQgIT0gTlVMTABzaWdpbiAhPSBOVUxMAG1zZ2hhc2gzMiAhPSBOVUxMAAAGAAAAcnVzdHNlY3AyNTZrMV92MF84XzFfZWNtdWx0X2dlbl9jb250ZXh0X2lzX2J1aWx0KCZjdHgtPmVjbXVsdF9nZW5fY3R4KQBzaWduYXR1cmUgIT0gTlVMTABzZWNrZXkgIT0gTlVMTA==");
  base64DecodeToExistingUint8Array(bufferView, 690472, "dHdlYWszMiAhPSBOVUxMAHB1Ym5vbmNlICE9IE5VTEwAbiA+PSAxAHB1Ym5vbmNlcyAhPSBOVUxMAHB1Ym5vbmNlc1tpXSAhPSBOVUxMAAAB");
  base64DecodeToExistingUint8Array(bufferView, 690584, "cmVjaWQgPj0gMCAmJiByZWNpZCA8PSAzAHJlY2lkICE9IE5VTEwAaW5wdXQzMiAhPSBOVUxMAG91dHB1dDMyICE9IE5VTEwAeG9ubHlfcHVia2V5ICE9IE5VTEwAb3V0cHV0X3B1YmtleSAhPSBOVUxMAGludGVybmFsX3B1YmtleSAhPSBOVUxMAHR3ZWFrZWRfcHVia2V5MzIgIT0gTlVMTABrZXlwYWlyICE9IE5VTEwAc2Vja2V5MzIgIT0gTlVMTABzaWc2NCAhPSBOVUxMAG1zZyAhPSBOVUxMIHx8IG1zZ2xlbiA9PSAwAEZvciB0aGlzIHNhbXBsZSwgdGhpcyA2My1ieXRlIHN0cmluZyB3aWxsIGJlIHVzZWQgYXMgaW5wdXQgZGF0YQ==");
  base64DecodeToExistingUint8Array(bufferView, 690896, "8Ip4y7ruCCsFKuBwjzL6HlDFxCGqdyul27QGoupr40IH");
  base64DecodeToExistingUint8Array(bufferView, 690968, "IXJ1c3RzZWNwMjU2azFfdjBfOF8xX2ZlX2lzX3plcm8oJmdlLT54KQAAAAAAAAAA7rrJL3KhDQACRPx1C5UBACNRRQE=");
  base64DecodeToExistingUint8Array(bufferView, 691056, "QUE20IxeAgD9uwOK9GoOANyuuv7//w8A////////DwD///////8AAEFBNtCMXtI/7oAivZpzuyrr/////////w==");
  base64DecodeToExistingUint8Array(bufferView, 691129, "AQAAAAAAAMFOd6qZAPI0AAEAAAAAAACYF/gWW4ECAJ+VjeLcsg0A/JsCBwuHDgBcKQZaxboLANz5fma+eQAAuNQQ+4/QBwDEmUFVaIoEALQX/agIEQ4AwL9P2lVGDACjJnfaOkg=");
  base64DecodeToExistingUint8Array(bufferView, 691240, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 691280, "L/z///7///8=");
  base64DecodeToExistingUint8Array(bufferView, 691313, "AQAAAAAAAM/K2i3i9scngA==");
  base64DecodeToExistingUint8Array(bufferView, 691392, "w+S/Cql/VG8oiA4B1n5D5A==");
  base64DecodeToExistingUint8Array(bufferView, 691424, "LFaxPajNZddtNHQHxQooiv7///////////////////8xsNtFmiCT6H/K6HEUiqo9FeuEkuSQbOjNa9SnIdKGMHF/xIqutHEVxgb1nawIEiLE5L8KqX9UbyiIDgHWfkPkcr0jG3yWAt94ZoEg6iIuElpkEogCHCal4DBcwEytY1PuAZVxKGwJABNcmVgvUQcASfCc6TQ0DADqeUTmBnEAAHxlK2rpegAAcmV0AAAAAABU8WnPyeLlcnSARB+QuiXEiPRhxwtepdyq969pJwqlFEJJUDAzNDAvbm9uY2UAAAApAAAAwI0KAAAAAAAPAAAAAAAAAAEAAAAQAAAAbWF0Y2hlcyE9PT1hc3NlcnRpb24gZmFpbGVkOiBgKGxlZnQgIHJpZ2h0KWAKICBsZWZ0OiBgYCwKIHJpZ2h0OiBgYDogAAAA540KABkAAAAAjgoAEgAAABKOCgAMAAAAHo4KAAMAAABgAAAA540KABkAAAAAjgoAEgAAABKOCgAMAAAARI4KAAEAAABsaWJyYXJ5L2NvcmUvc3JjL2ZtdC9udW0ucnMAaI4KABsAAABlAAAAFAAAADB4MDAwMTAyMDMwNDA1MDYwNzA4MDkxMDExMTIxMzE0MTUxNjE3MTgxOTIwMjEyMjIzMjQyNTI2MjcyODI5MzAzMTMyMzMzNDM1MzYzNzM4Mzk0MDQxNDI0MzQ0NDU0NjQ3NDg0OTUwNTE1MjUzNTQ1NTU2NTc1ODU5NjA2MTYyNjM2NDY1NjY2NzY4Njk3MDcxNzI3Mzc0NzU3Njc3Nzg3OTgwODE4MjgzODQ4NTg2ODc4ODg5OTA5MTkyOTM5NDk1OTY5Nzk4OTlyYW5nZSBzdGFydCBpbmRleCAgb3V0IG9mIHJhbmdlIGZvciBzbGljZSBvZiBsZW5ndGggAABejwoAEgAAAHCPCgAiAAAAcmFuZ2UgZW5kIGluZGV4IKSPCgAQAAAAcI8KACIAAABzbGljZSBpbmRleCBzdGFydHMgYXQgIGJ1dCBlbmRzIGF0IADEjwoAFgAAANqPCgANAAAAc291cmNlIHNsaWNlIGxlbmd0aCAoKSBkb2VzIG5vdCBtYXRjaCBkZXN0aW5hdGlvbiBzbGljZSBsZW5ndGggKPiPCgAVAAAADZAKACsAAADAjQoAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 692304, "kIYKAIaKCg==");
}
function wasm2js_trap() { throw new Error('abort'); }

function asmFunc(imports) {
 var buffer = new ArrayBuffer(720896);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var $_rand_js = imports["./rand.js"];
 var _ZN14secp256k1_wasm14generate_int3217h3ad919481cf7d929E = $_rand_js.generateInt32;
 var $_validate_error_js = imports["./validate_error.js"];
 var _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E = $_validate_error_js.throwError;
 var __stack_pointer = 655360;
 var global$1 = 692376;
 var global$2 = 655617;
 var global$3 = 692505;
 var global$4 = 692441;
 var global$5 = 692473;
 var global$6 = 692344;
 var global$7 = 655714;
 var global$8 = 655682;
 var global$9 = 692537;
 var global$10 = 692608;
 var global$11 = 692608;
 var i64toi32_i32$HIGH_BITS = 0;
 function _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (HEAPU8[692312]) {
    break label$1
   }
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = rustsecp256k1_v0_8_1_context_preallocated_size(769)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   HEAP32[$3 + 24 >> 2] = 192;
   HEAP32[$3 + 16 >> 2] = $3 + 12;
   HEAP32[$3 + 20 >> 2] = $3 + 24;
   $0 = HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 104 >> 2] = $0;
   $2 = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 + 108 >> 2] = $2;
   label$2 : {
    label$3 : {
     if (!((HEAP32[$0 >> 2] == HEAP32[$2 >> 2] ^ -1) & 1)) {
      HEAP32[$3 + 136 >> 2] = 655425;
      HEAP32[$3 + 140 >> 2] = 192;
      $1 = __stack_pointer - 32 | 0;
      HEAP32[$1 + 24 >> 2] = 655425;
      HEAP32[$1 + 20 >> 2] = 655425;
      $0 = HEAP32[$1 + 20 >> 2];
      HEAP32[$1 + 28 >> 2] = $0;
      label$10 : {
       if (!((!$0 ^ -1) & 1)) {
        HEAP32[$1 + 12 >> 2] = 0;
        break label$10;
       }
       HEAP32[$1 + 16 >> 2] = 655425;
       HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 16 >> 2];
      }
      $0 = __stack_pointer - 32 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = 655852;
      HEAP32[$0 + 20 >> 2] = 8;
      if (!HEAP32[$0 + 12 >> 2]) {
       $3 = __stack_pointer - 48 | 0;
       __stack_pointer = $3;
       HEAP32[$3 + 12 >> 2] = 8;
       HEAP32[$3 + 8 >> 2] = 655852;
       HEAP32[$3 + 28 >> 2] = 1;
       HEAP32[$3 + 36 >> 2] = 1;
       HEAP32[$3 + 24 >> 2] = 691652;
       HEAP32[$3 + 16 >> 2] = 0;
       HEAP32[$3 + 44 >> 2] = 11;
       HEAP32[$3 + 32 >> 2] = $3 + 40;
       HEAP32[$3 + 40 >> 2] = $3 + 8;
       _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($3 + 16 | 0, 655860);
       wasm2js_trap();
      }
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 28 >> 2] = $2;
      __stack_pointer = $0 + 32 | 0;
      $1 = __stack_pointer - 32 | 0;
      __stack_pointer = $1;
      HEAP32[$1 + 24 >> 2] = $2;
      HEAP32[$1 + 20 >> 2] = 769;
      $0 = __stack_pointer - 144 | 0;
      __stack_pointer = $0;
      $2 = $0 + 8 | 0;
      rustsecp256k1_v0_8_1_sha256_initialize($2);
      rustsecp256k1_v0_8_1_sha256_write($2, HEAP32[173077], 63);
      $6 = $2;
      $2 = $0 + 112 | 0;
      rustsecp256k1_v0_8_1_sha256_finalize($6, $2);
      $2 = !rustsecp256k1_v0_8_1_memcmp_var($2, 690896, 32);
      __stack_pointer = $0 + 144 | 0;
      if (!$2) {
       rustsecp256k1_v0_8_1_callback_call(69e4, 690008)
      }
      (wasm2js_i32$0 = $1, wasm2js_i32$1 = rustsecp256k1_v0_8_1_context_preallocated_size(HEAP32[$1 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
      label$11 : {
       if (!HEAP32[$1 + 16 >> 2]) {
        HEAP32[$1 + 28 >> 2] = 0;
        break label$11;
       }
       HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
       $0 = HEAP32[172508];
       $2 = HEAP32[$1 + 12 >> 2] + 168 | 0;
       HEAP32[$2 >> 2] = HEAP32[172507];
       HEAP32[$2 + 4 >> 2] = $0;
       $0 = HEAP32[172501];
       $2 = HEAP32[$1 + 12 >> 2] + 176 | 0;
       HEAP32[$2 >> 2] = HEAP32[172500];
       HEAP32[$2 + 4 >> 2] = $0;
       $0 = __stack_pointer - 16 | 0;
       __stack_pointer = $0;
       HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
       rustsecp256k1_v0_8_1_ecmult_gen_blind(HEAP32[$0 + 12 >> 2], 0);
       HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = 1;
       __stack_pointer = $0 + 16 | 0;
       HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] = (HEAP32[$1 + 20 >> 2] & 1024) != 0;
       HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
      }
      __stack_pointer = $1 + 32 | 0;
      $9 = HEAP32[$1 + 28 >> 2];
      HEAP32[$3 + 112 >> 2] = $9;
      $1 = __stack_pointer - 96 | 0;
      __stack_pointer = $1;
      HEAP32[$1 + 40 >> 2] = 0;
      HEAP32[$1 + 44 >> 2] = 8;
      $4 = HEAP32[$1 + 44 >> 2];
      $0 = __stack_pointer - 32 | 0;
      __stack_pointer = $0;
      $5 = HEAP32[$1 + 40 >> 2];
      HEAP32[$0 + 16 >> 2] = $5;
      HEAP32[$0 + 20 >> 2] = $4;
      $2 = __stack_pointer - 32 | 0;
      HEAP32[$2 + 16 >> 2] = $5;
      HEAP32[$2 + 20 >> 2] = $4;
      HEAP32[$2 + 8 >> 2] = $5;
      HEAP32[$2 + 12 >> 2] = $4;
      $4 = HEAP32[$2 + 8 >> 2];
      $5 = $0 + 8 | 0;
      HEAP32[$5 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
      HEAP32[$5 >> 2] = $4;
      $2 = HEAP32[$0 + 8 >> 2];
      $4 = $1 + 24 | 0;
      HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
      HEAP32[$4 >> 2] = $2;
      __stack_pointer = $0 + 32 | 0;
      $0 = HEAP32[$1 + 28 >> 2];
      $2 = __stack_pointer - 16 | 0;
      $4 = HEAP32[$1 + 24 >> 2];
      HEAP32[$2 + 8 >> 2] = $4;
      HEAP32[$2 + 12 >> 2] = $0;
      $2 = $1 + 32 | 0;
      HEAP32[$2 + 4 >> 2] = $0;
      HEAP32[$2 >> 2] = $4;
      $0 = HEAP32[$1 + 36 >> 2];
      HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 32 >> 2];
      HEAP32[$1 + 52 >> 2] = $0;
      __inlined_func$_ZN14secp256k1_wasm23initialize_context_seed17h1fab1ee2de62e860E$313 : {
       while (1) {
        $10 = $1 + 16 | 0;
        $4 = __stack_pointer - 32 | 0;
        __stack_pointer = $4;
        $2 = $1 + 48 | 0;
        HEAP32[$4 + 28 >> 2] = $2;
        $7 = $4 + 16 | 0;
        $5 = __stack_pointer - 16 | 0;
        __stack_pointer = $5;
        HEAP32[$5 + 12 >> 2] = $2;
        $0 = __stack_pointer - 48 | 0;
        __stack_pointer = $0;
        HEAP32[$0 + 16 >> 2] = $2;
        $6 = __stack_pointer - 16 | 0;
        HEAP32[$6 + 8 >> 2] = $2;
        $8 = $6;
        $6 = $2 + 4 | 0;
        HEAP32[$8 + 12 >> 2] = $6;
        label$103 : {
         if (HEAPU32[$2 >> 2] >= HEAPU32[$6 >> 2]) {
          HEAP32[$0 >> 2] = 0;
          break label$103;
         }
         HEAP32[$0 + 44 >> 2] = $2;
         $6 = __stack_pointer - 16 | 0;
         $8 = HEAP32[$2 >> 2];
         HEAP32[$6 + 4 >> 2] = $8;
         HEAP32[$6 + 8 >> 2] = 1;
         HEAP32[$6 + 12 >> 2] = $8 + 1;
         $6 = HEAP32[$6 + 12 >> 2];
         HEAP32[$0 + 20 >> 2] = $6;
         HEAP32[$0 + 24 >> 2] = $2;
         HEAP32[$0 + 28 >> 2] = $6;
         HEAP32[$0 + 32 >> 2] = $2;
         $8 = HEAP32[$2 >> 2];
         HEAP32[$0 + 36 >> 2] = $8;
         HEAP32[$0 + 40 >> 2] = $2;
         HEAP32[$0 + 12 >> 2] = $6;
         HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
         HEAP32[$0 + 4 >> 2] = $8;
         HEAP32[$0 >> 2] = 1;
        }
        $6 = HEAP32[$0 >> 2];
        HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
        HEAP32[$5 >> 2] = $6;
        __stack_pointer = $0 + 48 | 0;
        $0 = HEAP32[$5 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
        HEAP32[$7 >> 2] = $0;
        __stack_pointer = $5 + 16 | 0;
        $8 = $4 + 8 | 0;
        $5 = HEAP32[$4 + 20 >> 2];
        $0 = __stack_pointer - 32 | 0;
        __stack_pointer = $0;
        HEAP32[$0 >> 2] = HEAP32[$4 + 16 >> 2];
        HEAP32[$0 + 4 >> 2] = $5;
        HEAP32[$0 + 24 >> 2] = $2;
        HEAP8[$0 + 23 | 0] = 1;
        label$101 : {
         if (!HEAP32[$0 >> 2]) {
          HEAP32[$0 + 8 >> 2] = 0;
          break label$101;
         }
         $5 = HEAP32[$0 + 4 >> 2];
         HEAP32[$0 + 28 >> 2] = $5;
         HEAP8[$0 + 23 | 0] = 0;
         HEAP32[$0 + 16 >> 2] = $5;
         $5 = __stack_pointer - 16 | 0;
         __stack_pointer = $5;
         HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 16 >> 2];
         HEAP32[$5 + 12 >> 2] = $2;
         $6 = HEAP32[$5 + 8 >> 2];
         $7 = __stack_pointer - 16 | 0;
         __stack_pointer = $7;
         HEAP32[$7 + 8 >> 2] = $2;
         HEAP32[$7 + 12 >> 2] = $6;
         $2 = $6 << 2;
         __inlined_func$_ZN14secp256k1_wasm23initialize_context_seed28_$u7b$$u7b$closure$u7d$$u7d$17h912c30d1463e8f44E$6 : {
          if (($6 & 1073741823) == ($6 | 0)) {
           __stack_pointer = $7 + 16 | 0;
           break __inlined_func$_ZN14secp256k1_wasm23initialize_context_seed28_$u7b$$u7b$closure$u7d$$u7d$17h912c30d1463e8f44E$6;
          }
          _ZN4core9panicking5panic17h2f041bf6aa990dfdE(655392, 33, 655372);
          wasm2js_trap();
         }
         __stack_pointer = $5 + 16 | 0;
         HEAP32[$0 + 12 >> 2] = $2;
         HEAP32[$0 + 8 >> 2] = 1;
        }
        label$34 : {
         if (!(HEAP8[$0 + 23 | 0] & 1)) {
          break label$34
         }
        }
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$8 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
        HEAP32[$8 >> 2] = $2;
        __stack_pointer = $0 + 32 | 0;
        $0 = HEAP32[$4 + 8 >> 2];
        HEAP32[$10 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
        HEAP32[$10 >> 2] = $0;
        __stack_pointer = $4 + 32 | 0;
        $0 = HEAP32[$1 + 16 >> 2];
        HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 20 >> 2];
        HEAP32[$1 + 56 >> 2] = $0;
        if (!HEAP32[$1 + 56 >> 2]) {
         __stack_pointer = $1 + 96 | 0;
         break __inlined_func$_ZN14secp256k1_wasm23initialize_context_seed17h1fab1ee2de62e860E$313;
        }
        $4 = HEAP32[$1 + 60 >> 2];
        HEAP32[$1 + 84 >> 2] = $4;
        $2 = _ZN14secp256k1_wasm14generate_int3217h3ad919481cf7d929E() | 0;
        HEAP32[$1 + 88 >> 2] = $2;
        $0 = __stack_pointer - 16 | 0;
        HEAP32[$0 + 12 >> 2] = $2;
        HEAP8[$0 + 8 | 0] = $2;
        HEAP8[$0 + 9 | 0] = $2 >>> 8;
        HEAP8[$0 + 10 | 0] = $2 >>> 16;
        HEAP8[$0 + 11 | 0] = $2 >>> 24;
        HEAP32[$1 + 92 >> 2] = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
        HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 92 >> 2];
        $0 = $4 + 4 | 0;
        if ($0 >>> 0 >= $4 >>> 0) {
         HEAP32[$1 + 72 >> 2] = $4;
         HEAP32[$1 + 76 >> 2] = $0;
         $2 = HEAP32[$1 + 72 >> 2];
         $4 = HEAP32[$1 + 76 >> 2];
         $6 = __stack_pointer - 32 | 0;
         __stack_pointer = $6;
         HEAP32[$6 + 20 >> 2] = 692312;
         HEAP32[$6 + 24 >> 2] = $2;
         HEAP32[$6 + 28 >> 2] = $4;
         $5 = __stack_pointer - 32 | 0;
         __stack_pointer = $5;
         HEAP32[$5 + 16 >> 2] = 692312;
         HEAP32[$5 + 20 >> 2] = 32;
         HEAP32[$5 + 24 >> 2] = $2;
         HEAP32[$5 + 28 >> 2] = $4;
         $7 = $5 + 8 | 0;
         $0 = __stack_pointer - 80 | 0;
         __stack_pointer = $0;
         HEAP32[$0 + 16 >> 2] = $2;
         HEAP32[$0 + 20 >> 2] = $4;
         HEAP32[$0 + 24 >> 2] = 692312;
         HEAP32[$0 + 28 >> 2] = 32;
         __inlined_func$_ZN106_$LT$core__ops__range__Range$LT$usize$GT$$u20$as$u20$core__slice__index__SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9b0ab8e9475d7d12E$305 : {
          folding_inner0 : {
           label$102 : {
            label$25 : {
             if ($2 >>> 0 <= $4 >>> 0) {
              if ($4 >>> 0 > 32) {
               break label$102
              }
              break label$25;
             }
             $3 = __stack_pointer - 48 | 0;
             __stack_pointer = $3;
             HEAP32[$3 + 4 >> 2] = $4;
             HEAP32[$3 >> 2] = $2;
             $1 = $3 + 8 | 0;
             HEAP32[$1 + 12 >> 2] = 2;
             HEAP32[$3 + 28 >> 2] = 2;
             $0 = $3 + 32 | 0;
             HEAP32[$0 + 12 >> 2] = 14;
             HEAP32[$3 + 16 >> 2] = 692200;
             break folding_inner0;
            }
            HEAP32[$0 + 32 >> 2] = 692312;
            HEAP32[$0 + 36 >> 2] = 32;
            HEAP32[$0 + 44 >> 2] = $4 - $2;
            $4 = HEAP32[$0 + 44 >> 2];
            HEAP32[$0 + 48 >> 2] = $4;
            HEAP32[$0 + 52 >> 2] = 692312;
            HEAP32[$0 + 56 >> 2] = $2;
            HEAP32[$0 + 60 >> 2] = $2;
            HEAP32[$0 + 64 >> 2] = $2 + 692312;
            $2 = HEAP32[$0 + 64 >> 2];
            HEAP32[$0 + 68 >> 2] = $2;
            HEAP32[$0 + 72 >> 2] = $4;
            HEAP32[$0 + 76 >> 2] = $2;
            HEAP32[$0 + 8 >> 2] = $2;
            HEAP32[$0 + 12 >> 2] = $4;
            $2 = HEAP32[$0 + 12 >> 2];
            HEAP32[$0 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$0 + 4 >> 2] = $2;
            $2 = HEAP32[$0 >> 2];
            HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$7 >> 2] = $2;
            __stack_pointer = $0 + 80 | 0;
            break __inlined_func$_ZN106_$LT$core__ops__range__Range$LT$usize$GT$$u20$as$u20$core__slice__index__SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9b0ab8e9475d7d12E$305;
           }
           $3 = __stack_pointer - 48 | 0;
           __stack_pointer = $3;
           HEAP32[$3 + 4 >> 2] = 32;
           HEAP32[$3 >> 2] = $4;
           $1 = $3 + 8 | 0;
           HEAP32[$1 + 12 >> 2] = 2;
           HEAP32[$3 + 28 >> 2] = 2;
           $0 = $3 + 32 | 0;
           HEAP32[$0 + 12 >> 2] = 14;
           HEAP32[$3 + 16 >> 2] = 692148;
          }
          HEAP32[$3 + 8 >> 2] = 0;
          HEAP32[$3 + 36 >> 2] = 14;
          HEAP32[$3 + 24 >> 2] = $0;
          HEAP32[$3 + 40 >> 2] = $3 + 4;
          HEAP32[$3 + 32 >> 2] = $3;
          _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($1, 655804);
          wasm2js_trap();
         }
         $0 = HEAP32[$5 + 8 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 12 >> 2];
         HEAP32[$2 >> 2] = $0;
         __stack_pointer = $5 + 32 | 0;
         $0 = HEAP32[$6 + 8 >> 2];
         $2 = $1 + 8 | 0;
         HEAP32[$2 + 4 >> 2] = HEAP32[$6 + 12 >> 2];
         HEAP32[$2 >> 2] = $0;
         __stack_pointer = $6 + 32 | 0;
         $2 = HEAP32[$1 + 12 >> 2];
         $0 = __stack_pointer - 32 | 0;
         __stack_pointer = $0;
         $4 = HEAP32[$1 + 8 >> 2];
         HEAP32[$0 >> 2] = $4;
         HEAP32[$0 + 4 >> 2] = $2;
         $5 = $1 + 68 | 0;
         HEAP32[$0 + 8 >> 2] = $5;
         HEAP32[$0 + 12 >> 2] = 4;
         __inlined_func$_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h06564c935fae5d6fE$11 : {
          if (($2 | 0) == 4) {
           HEAP32[$0 + 20 >> 2] = $5;
           HEAP32[$0 + 24 >> 2] = $4;
           HEAP32[$0 + 28 >> 2] = $2;
           memcpy($4, $5, $2);
           __stack_pointer = $0 + 32 | 0;
           break __inlined_func$_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h06564c935fae5d6fE$11;
          }
          $3 = __stack_pointer - 48 | 0;
          __stack_pointer = $3;
          HEAP32[$3 + 4 >> 2] = 4;
          HEAP32[$3 >> 2] = $2;
          $1 = $3 + 8 | 0;
          HEAP32[$1 + 12 >> 2] = 3;
          HEAP32[$3 + 28 >> 2] = 2;
          $0 = $3 + 32 | 0;
          HEAP32[$0 + 12 >> 2] = 14;
          HEAP32[$3 + 16 >> 2] = 692280;
          HEAP32[$3 + 8 >> 2] = 0;
          HEAP32[$3 + 36 >> 2] = 14;
          HEAP32[$3 + 24 >> 2] = $0;
          HEAP32[$3 + 40 >> 2] = $3;
          HEAP32[$3 + 32 >> 2] = $3 + 4;
          _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($1, 655820);
          wasm2js_trap();
         }
         continue;
        }
        break;
       };
       _ZN4core9panicking5panic17h2f041bf6aa990dfdE(655776, 28, 655756);
       wasm2js_trap();
      }
      HEAP32[$3 + 128 >> 2] = 692312;
      HEAP32[$3 + 132 >> 2] = 32;
      $1 = __stack_pointer - 16 | 0;
      __stack_pointer = $1;
      HEAP32[$1 + 12 >> 2] = $9;
      HEAP32[$1 + 8 >> 2] = 692312;
      $0 = __stack_pointer - 16 | 0;
      HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      if (HEAP32[HEAP32[$0 + 12 >> 2] >> 2]) {
       rustsecp256k1_v0_8_1_ecmult_gen_blind(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2])
      }
      __stack_pointer = $1 + 16 | 0;
      HEAP32[$3 + 56 >> 2] = 1;
      HEAP8[692312] = 1;
      HEAP32[$3 + 60 >> 2] = 1;
      $0 = HEAP32[$3 + 60 >> 2];
      $2 = __stack_pointer - 16 | 0;
      __stack_pointer = $2;
      HEAP32[$2 + 8 >> 2] = 692312;
      HEAP32[$2 + 12 >> 2] = $0;
      $4 = __stack_pointer - 32 | 0;
      __stack_pointer = $4;
      HEAP32[$4 + 16 >> 2] = 692312;
      HEAP32[$4 + 20 >> 2] = 32;
      HEAP32[$4 + 28 >> 2] = $0;
      $6 = $4 + 8 | 0;
      $5 = __stack_pointer - 32 | 0;
      __stack_pointer = $5;
      HEAP32[$5 + 20 >> 2] = $0;
      HEAP32[$5 + 24 >> 2] = 692312;
      HEAP32[$5 + 28 >> 2] = 32;
      __inlined_func$_ZN110_$LT$core__ops__range__RangeFrom$LT$usize$GT$$u20$as$u20$core__slice__index__SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf3d59f4028d301ebE$307 : {
       if ($0 >>> 0 <= 32) {
        $1 = __stack_pointer - 96 | 0;
        HEAP32[$1 + 36 >> 2] = $0;
        HEAP32[$1 + 40 >> 2] = 692312;
        HEAP32[$1 + 44 >> 2] = 32;
        HEAP32[$1 + 48 >> 2] = 692312;
        HEAP32[$1 + 52 >> 2] = 32;
        HEAP32[$1 + 8 >> 2] = 692312;
        HEAP32[$1 + 12 >> 2] = 32;
        $7 = HEAP32[$1 + 12 >> 2];
        HEAP32[$1 >> 2] = $0;
        HEAP32[$1 + 4 >> 2] = $7;
        HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2];
        $0 = HEAP32[$1 + 60 >> 2];
        HEAP32[$1 + 64 >> 2] = $0;
        HEAP32[$1 + 68 >> 2] = 692312;
        $7 = HEAP32[$1 >> 2];
        HEAP32[$1 + 72 >> 2] = $7;
        HEAP32[$1 + 76 >> 2] = $7;
        HEAP32[$1 + 80 >> 2] = $7 + 692312;
        $7 = HEAP32[$1 + 80 >> 2];
        HEAP32[$1 + 84 >> 2] = $7;
        HEAP32[$1 + 88 >> 2] = $0;
        HEAP32[$1 + 92 >> 2] = $7;
        HEAP32[$1 + 24 >> 2] = $7;
        HEAP32[$1 + 28 >> 2] = $0;
        $0 = HEAP32[$1 + 28 >> 2];
        HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
        HEAP32[$1 + 20 >> 2] = $0;
        $0 = HEAP32[$1 + 16 >> 2];
        $7 = $5 + 8 | 0;
        HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 20 >> 2];
        HEAP32[$7 >> 2] = $0;
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 12 >> 2];
        HEAP32[$6 >> 2] = $1;
        __stack_pointer = $5 + 32 | 0;
        break __inlined_func$_ZN110_$LT$core__ops__range__RangeFrom$LT$usize$GT$$u20$as$u20$core__slice__index__SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf3d59f4028d301ebE$307;
       }
       _ZN4core5slice5index26slice_start_index_len_fail17h65f4c63cf9c3fca0E($0, 32, 655876);
       wasm2js_trap();
      }
      $1 = HEAP32[$4 + 8 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$2 >> 2] = $1;
      __stack_pointer = $4 + 32 | 0;
      $1 = HEAP32[$2 >> 2];
      HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$3 >> 2] = $1;
      __stack_pointer = $2 + 16 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = __stack_pointer - 16 | 0;
      __stack_pointer = $5;
      $4 = HEAP32[$3 >> 2];
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $2;
      HEAP8[$5 + 15 | 0] = 0;
      $0 = __stack_pointer + -64 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 32 >> 2] = $4;
      HEAP32[$0 + 36 >> 2] = $2;
      HEAP8[$0 + 47 | 0] = 0;
      $1 = __stack_pointer - 112 | 0;
      HEAP32[$1 + 56 >> 2] = $4;
      HEAP32[$1 + 60 >> 2] = $2;
      HEAP32[$1 + 68 >> 2] = $4;
      HEAP32[$1 + 36 >> 2] = $4;
      HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 36 >> 2];
      HEAP32[$1 + 100 >> 2] = $2;
      HEAP32[$1 + 104 >> 2] = $2;
      HEAP32[$1 + 108 >> 2] = $2 + $4;
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 108 >> 2];
      HEAP32[$1 + 32 >> 2] = $4;
      $2 = HEAP32[$1 + 28 >> 2];
      HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 32 >> 2];
      HEAP32[$1 + 16 >> 2] = $2;
      $2 = HEAP32[$1 + 16 >> 2];
      $4 = $0 + 8 | 0;
      HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$4 >> 2] = $2;
      $1 = HEAP32[$0 + 12 >> 2];
      $2 = HEAP32[$0 + 8 >> 2];
      HEAP32[$0 + 48 >> 2] = $2;
      HEAP32[$0 + 52 >> 2] = $1;
      HEAP32[$0 + 16 >> 2] = $2;
      HEAP32[$0 + 20 >> 2] = $1;
      while (1) {
       $1 = __stack_pointer - 128 | 0;
       $2 = $0 + 16 | 0;
       HEAP32[$1 + 44 >> 2] = $2;
       $4 = HEAP32[$2 + 4 >> 2];
       HEAP32[$1 + 48 >> 2] = $4;
       HEAP32[$1 + 52 >> 2] = $4;
       HEAP32[$1 + 20 >> 2] = $4;
       HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 20 >> 2];
       $4 = HEAP32[$2 >> 2];
       HEAP32[$1 + 60 >> 2] = $4;
       HEAP32[$1 + 24 >> 2] = $4;
       HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 24 >> 2];
       $4 = HEAP32[$2 + 4 >> 2];
       HEAP32[$1 + 68 >> 2] = $4;
       label$23 : {
        if (HEAP32[$2 >> 2] == ($4 | 0)) {
         HEAP32[$1 + 12 >> 2] = 0;
         break label$23;
        }
        $4 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 + 72 >> 2] = $4;
        HEAP32[$1 + 76 >> 2] = $4;
        $6 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 + 80 >> 2] = $6;
        HEAP32[$1 + 84 >> 2] = $6;
        HEAP32[$1 + 88 >> 2] = 1;
        HEAP32[$1 + 92 >> 2] = $6 + 1;
        $6 = HEAP32[$1 + 92 >> 2];
        HEAP32[$1 + 96 >> 2] = $6;
        HEAP32[$1 + 28 >> 2] = $6;
        HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 28 >> 2];
        HEAP32[$1 + 16 >> 2] = $4;
        HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 16 >> 2];
       }
       HEAP32[$0 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
       if (HEAP32[$0 + 28 >> 2]) {
        $1 = HEAP32[$0 + 28 >> 2];
        HEAP32[$0 + 60 >> 2] = $1;
        HEAP8[$1 | 0] = 0;
        continue;
       } else {
        __stack_pointer = $0 - -64 | 0
       }
       break;
      };
      __stack_pointer = $5 + 16 | 0;
      HEAP32[$3 + 64 >> 2] = $3 + 56;
      HEAP32[$3 + 68 >> 2] = 655892;
      $1 = HEAP32[$3 + 64 >> 2];
      HEAP32[$3 + 116 >> 2] = $1;
      $0 = HEAP32[$3 + 68 >> 2];
      HEAP32[$3 + 120 >> 2] = $0;
      if ((HEAP32[$1 >> 2] == HEAP32[$0 >> 2] ^ -1) & 1) {
       break label$2
      }
      break label$3;
     }
     HEAP8[$3 + 31 | 0] = 0;
     HEAP32[$3 + 40 >> 2] = 0;
     $4 = HEAPU8[$3 + 31 | 0];
     $1 = __stack_pointer - 48 | 0;
     __stack_pointer = $1;
     HEAP32[$1 + 12 >> 2] = $0;
     HEAP32[$1 + 16 >> 2] = $2;
     HEAP8[$1 + 23 | 0] = $4;
     $3 = $3 + 32 | 0;
     $2 = $3 + 16 | 0;
     $5 = HEAP32[$2 + 4 >> 2];
     $0 = $1 + 24 | 0;
     $6 = $0 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $2 = $3 + 8 | 0;
     $5 = HEAP32[$2 + 4 >> 2];
     $6 = $0 + 8 | 0;
     HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $2 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1 + 24 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 28 >> 2] = $2;
     _ZN4core9panicking19assert_failed_inner17h2aa5e8e7fe201c6eE($4, $1 + 12 | 0, 656364, $1 + 16 | 0, 656364, $0, 655836);
     wasm2js_trap();
    }
    HEAP32[$3 + 124 >> 2] = $9;
    HEAP32[173151] = $9;
    break label$1;
   }
   HEAP8[$3 + 79 | 0] = 0;
   HEAP32[$3 + 88 >> 2] = 0;
   _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$3 + 79 | 0], $1, $0, $3 + 80 | 0, 655896);
   wasm2js_trap();
  }
  __stack_pointer = $3 + 144 | 0;
  return HEAP32[173151];
 }
 
 function _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 144 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 136 >> 2] = $1;
  HEAP32[$5 + 140 >> 2] = $2;
  $4 = $5 + 8 | 0;
  _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($4);
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 104 >> 2] = HEAP32[173076];
  HEAP32[$3 + 100 >> 2] = $4;
  HEAP32[$3 + 96 >> 2] = $1;
  HEAP32[$3 + 92 >> 2] = $2;
  label$10 : {
   if ((HEAP32[$3 + 100 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 104 >> 2] + 168 | 0, 690050);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   $1 = HEAP32[$3 + 100 >> 2];
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $2 = $1 + 56 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 48 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 40 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 32 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 24 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 16 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $1 = $1 + 8 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   if ((HEAP32[$3 + 96 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 104 >> 2] + 168 | 0, 690065);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   $2 = HEAP32[$3 + 96 >> 2];
   $4 = HEAP32[$3 + 92 >> 2];
   $1 = __stack_pointer - 144 | 0;
   __stack_pointer = $1;
   HEAP32[$1 + 136 >> 2] = $3;
   HEAP32[$1 + 132 >> 2] = $2;
   HEAP32[$1 + 128 >> 2] = $4;
   label$1 : {
    label$2 : {
     if (HEAP32[$1 + 128 >> 2] != 33) {
      break label$2
     }
     $2 = HEAPU8[HEAP32[$1 + 132 >> 2]];
     if (($2 | 0) != 2 & ($2 | 0) != 3) {
      break label$2
     }
     if (rustsecp256k1_v0_8_1_fe_set_b32($1 + 88 | 0, HEAP32[$1 + 132 >> 2] + 1 | 0)) {
      $2 = (rustsecp256k1_v0_8_1_ge_set_xo_var(HEAP32[$1 + 136 >> 2], $1 + 88 | 0, HEAPU8[HEAP32[$1 + 132 >> 2]] == 3) | 0) != 0
     } else {
      $2 = 0
     }
     HEAP32[$1 + 140 >> 2] = $2;
     break label$1;
    }
    label$5 : {
     if (HEAP32[$1 + 128 >> 2] != 65) {
      break label$5
     }
     label$6 : {
      if (HEAPU8[HEAP32[$1 + 132 >> 2]] == 4) {
       break label$6
      }
      if (HEAPU8[HEAP32[$1 + 132 >> 2]] == 6) {
       break label$6
      }
      if (HEAPU8[HEAP32[$1 + 132 >> 2]] != 7) {
       break label$5
      }
     }
     label$7 : {
      if (rustsecp256k1_v0_8_1_fe_set_b32($1 + 48 | 0, HEAP32[$1 + 132 >> 2] + 1 | 0)) {
       if (rustsecp256k1_v0_8_1_fe_set_b32($1 + 8 | 0, HEAP32[$1 + 132 >> 2] + 33 | 0)) {
        break label$7
       }
      }
      HEAP32[$1 + 140 >> 2] = 0;
      break label$1;
     }
     rustsecp256k1_v0_8_1_ge_set_xy(HEAP32[$1 + 136 >> 2], $1 + 48 | 0, $1 + 8 | 0);
     label$9 : {
      $2 = HEAPU8[HEAP32[$1 + 132 >> 2]];
      if (($2 | 0) != 6 & ($2 | 0) != 7) {
       break label$9
      }
      $2 = __stack_pointer - 16 | 0;
      HEAP32[$2 + 12 >> 2] = $1 + 8;
      if ((HEAP32[HEAP32[$2 + 12 >> 2] >> 2] & 1) == (HEAPU8[HEAP32[$1 + 132 >> 2]] == 7 | 0)) {
       break label$9
      }
      HEAP32[$1 + 140 >> 2] = 0;
      break label$1;
     }
     $2 = __stack_pointer - 96 | 0;
     __stack_pointer = $2;
     HEAP32[$2 + 88 >> 2] = HEAP32[$1 + 136 >> 2];
     label$100 : {
      if (HEAP32[HEAP32[$2 + 88 >> 2] + 80 >> 2]) {
       HEAP32[$2 + 92 >> 2] = 0;
       break label$100;
      }
      $6 = $2 + 48 | 0;
      rustsecp256k1_v0_8_1_fe_sqr($6, HEAP32[$2 + 88 >> 2] + 40 | 0);
      $4 = $2 + 8 | 0;
      rustsecp256k1_v0_8_1_fe_sqr($4, HEAP32[$2 + 88 >> 2]);
      rustsecp256k1_v0_8_1_fe_mul($4, $4, HEAP32[$2 + 88 >> 2]);
      rustsecp256k1_v0_8_1_fe_add($4, 690928);
      rustsecp256k1_v0_8_1_fe_normalize_weak($4);
      (wasm2js_i32$0 = $2, wasm2js_i32$1 = rustsecp256k1_v0_8_1_fe_equal_var($6, $4)), HEAP32[wasm2js_i32$0 + 92 >> 2] = wasm2js_i32$1;
     }
     __stack_pointer = $2 + 96 | 0;
     HEAP32[$1 + 140 >> 2] = HEAP32[$2 + 92 >> 2];
     break label$1;
    }
    HEAP32[$1 + 140 >> 2] = 0;
   }
   __stack_pointer = $1 + 144 | 0;
   if (!HEAP32[$1 + 140 >> 2]) {
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $3;
   rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$3 + 100 >> 2], $3);
   rustsecp256k1_v0_8_1_ge_clear($3);
   HEAP32[$3 + 108 >> 2] = 1;
  }
  __stack_pointer = $3 + 112 | 0;
  label$11 : {
   if (HEAP32[$3 + 108 >> 2] == 1) {
    $1 = $5 + 8 | 0;
    $3 = $1 + 56 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $2 = $5 + 72 | 0;
    $4 = $2 + 56 | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = $6;
    $3 = $1 + 48 | 0;
    $7 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 48 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $3 = $1 + 40 | 0;
    $8 = HEAP32[$3 + 4 >> 2];
    $7 = $2 + 40 | 0;
    HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$7 + 4 >> 2] = $8;
    $3 = $1 + 32 | 0;
    $9 = HEAP32[$3 + 4 >> 2];
    $8 = $2 + 32 | 0;
    HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$8 + 4 >> 2] = $9;
    $3 = $1 + 24 | 0;
    $10 = HEAP32[$3 + 4 >> 2];
    $9 = $2 + 24 | 0;
    HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$9 + 4 >> 2] = $10;
    $3 = $1 + 16 | 0;
    $11 = HEAP32[$3 + 4 >> 2];
    $10 = $2 + 16 | 0;
    HEAP32[$10 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$10 + 4 >> 2] = $11;
    $1 = $1 + 8 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $11 = $2 + 8 | 0;
    HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$11 + 4 >> 2] = $3;
    $1 = HEAP32[$5 + 12 >> 2];
    HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 8 >> 2];
    HEAP32[$5 + 76 >> 2] = $1;
    $2 = HEAP32[$5 + 76 >> 2];
    $1 = $0 + 1 | 0;
    $3 = HEAP32[$5 + 72 >> 2];
    HEAP8[$1 | 0] = $3;
    HEAP8[$1 + 1 | 0] = $3 >>> 8;
    HEAP8[$1 + 2 | 0] = $3 >>> 16;
    HEAP8[$1 + 3 | 0] = $3 >>> 24;
    HEAP8[$1 + 4 | 0] = $2;
    HEAP8[$1 + 5 | 0] = $2 >>> 8;
    HEAP8[$1 + 6 | 0] = $2 >>> 16;
    HEAP8[$1 + 7 | 0] = $2 >>> 24;
    $3 = HEAP32[$4 + 4 >> 2];
    $2 = $1 + 56 | 0;
    $4 = HEAP32[$4 >> 2];
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    $3 = HEAP32[$6 + 4 >> 2];
    $2 = $1 + 48 | 0;
    $4 = HEAP32[$6 >> 2];
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    $3 = HEAP32[$7 + 4 >> 2];
    $2 = $1 + 40 | 0;
    $4 = HEAP32[$7 >> 2];
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    $3 = HEAP32[$8 + 4 >> 2];
    $2 = $1 + 32 | 0;
    $4 = HEAP32[$8 >> 2];
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    $3 = HEAP32[$9 + 4 >> 2];
    $2 = $1 + 24 | 0;
    $4 = HEAP32[$9 >> 2];
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    $3 = HEAP32[$10 + 4 >> 2];
    $2 = $1 + 16 | 0;
    $4 = HEAP32[$10 >> 2];
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    $2 = HEAP32[$11 + 4 >> 2];
    $1 = $1 + 8 | 0;
    $3 = HEAP32[$11 >> 2];
    HEAP8[$1 | 0] = $3;
    HEAP8[$1 + 1 | 0] = $3 >>> 8;
    HEAP8[$1 + 2 | 0] = $3 >>> 16;
    HEAP8[$1 + 3 | 0] = $3 >>> 24;
    HEAP8[$1 + 4 | 0] = $2;
    HEAP8[$1 + 5 | 0] = $2 >>> 8;
    HEAP8[$1 + 6 | 0] = $2 >>> 16;
    HEAP8[$1 + 7 | 0] = $2 >>> 24;
    HEAP8[$0 | 0] = 0;
    break label$11;
   }
   HEAP32[$0 + 4 >> 2] = 1;
   HEAP8[$0 | 0] = 1;
  }
  __stack_pointer = $5 + 144 | 0;
 }
 
 function _ZN14secp256k1_wasm32x_only_pubkey_from_pubkey_struct17h88155263bed130b4E($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 108 >> 2] = $1;
  HEAP32[$5 + 112 >> 2] = $2;
  HEAP32[$5 + 116 >> 2] = $3;
  $6 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 120 >> 2] = $6;
  HEAP32[$4 + 116 >> 2] = $1;
  HEAP32[$4 + 112 >> 2] = $2;
  HEAP32[$4 + 108 >> 2] = $3;
  label$1 : {
   if ((HEAP32[$4 + 116 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$4 + 120 >> 2] + 168 | 0, 690656);
    HEAP32[$4 + 124 >> 2] = 0;
    break label$1;
   }
   if ((HEAP32[$4 + 108 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$4 + 120 >> 2] + 168 | 0, 690050);
    HEAP32[$4 + 124 >> 2] = 0;
    break label$1;
   }
   if (!rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$4 + 120 >> 2], $4 + 16 | 0, HEAP32[$4 + 108 >> 2])) {
    HEAP32[$4 + 124 >> 2] = 0;
    break label$1;
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = rustsecp256k1_v0_8_1_extrakeys_ge_even_y($4 + 16 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   if (HEAP32[$4 + 112 >> 2]) {
    HEAP32[HEAP32[$4 + 112 >> 2] >> 2] = HEAP32[$4 + 12 >> 2]
   }
   rustsecp256k1_v0_8_1_xonly_pubkey_save(HEAP32[$4 + 116 >> 2], $4 + 16 | 0);
   HEAP32[$4 + 124 >> 2] = 1;
  }
  __stack_pointer = $4 + 128 | 0;
  HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 124 >> 2];
  HEAP32[$5 >> 2] = $5 + 8;
  HEAP32[$5 + 4 >> 2] = 655892;
  $3 = HEAP32[$5 >> 2];
  HEAP32[$5 + 120 >> 2] = $3;
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$5 + 124 >> 2] = $4;
  if (!((HEAP32[$3 >> 2] == HEAP32[$4 >> 2] ^ -1) & 1)) {
   $3 = $1 + 56 | 0;
   $7 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $4 = $5 + 40 | 0;
   $6 = $4 + 56 | 0;
   HEAP32[$6 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$6 + 4 >> 2] = $7;
   $3 = $1 + 48 | 0;
   $8 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $7 = $4 + 48 | 0;
   HEAP32[$7 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$7 + 4 >> 2] = $8;
   $3 = $1 + 40 | 0;
   $9 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $8 = $4 + 40 | 0;
   HEAP32[$8 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$8 + 4 >> 2] = $9;
   $3 = $1 + 32 | 0;
   $10 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $9 = $4 + 32 | 0;
   HEAP32[$9 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$9 + 4 >> 2] = $10;
   $3 = $1 + 24 | 0;
   $11 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $10 = $4 + 24 | 0;
   HEAP32[$10 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$10 + 4 >> 2] = $11;
   $3 = $1 + 16 | 0;
   $12 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $11 = $4 + 16 | 0;
   HEAP32[$11 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$11 + 4 >> 2] = $12;
   $3 = $1 + 8 | 0;
   $12 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $4 = $4 + 8 | 0;
   HEAP32[$4 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   HEAP32[$4 + 4 >> 2] = $12;
   $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   HEAP32[$5 + 40 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP32[$5 + 44 >> 2] = $3;
   $12 = HEAP32[$2 >> 2];
   $1 = HEAP32[$5 + 44 >> 2];
   $2 = HEAP32[$5 + 40 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $2 = HEAP32[$6 + 4 >> 2];
   $1 = $0 + 56 | 0;
   $3 = HEAP32[$6 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   $2 = HEAP32[$7 + 4 >> 2];
   $1 = $0 + 48 | 0;
   $3 = HEAP32[$7 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   $2 = HEAP32[$8 + 4 >> 2];
   $1 = $0 + 40 | 0;
   $3 = HEAP32[$8 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   $2 = HEAP32[$9 + 4 >> 2];
   $1 = $0 + 32 | 0;
   $3 = HEAP32[$9 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   $2 = HEAP32[$10 + 4 >> 2];
   $1 = $0 + 24 | 0;
   $3 = HEAP32[$10 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   $2 = HEAP32[$11 + 4 >> 2];
   $1 = $0 + 16 | 0;
   $3 = HEAP32[$11 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   $2 = HEAP32[$4 + 4 >> 2];
   $1 = $0 + 8 | 0;
   $3 = HEAP32[$4 >> 2];
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $2;
   HEAP8[$1 + 5 | 0] = $2 >>> 8;
   HEAP8[$1 + 6 | 0] = $2 >>> 16;
   HEAP8[$1 + 7 | 0] = $2 >>> 24;
   HEAP32[$0 + 64 >> 2] = $12;
   __stack_pointer = $5 + 128 | 0;
   return;
  }
  HEAP8[$5 + 15 | 0] = 0;
  HEAP32[$5 + 24 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$5 + 15 | 0], $3, $4, $5 + 16 | 0, 655912);
  wasm2js_trap();
 }
 
 function _ZN14secp256k1_wasm19x_only_pubkey_parse17h41e45a132a1a3178E($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $5 = __stack_pointer - 144 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 140 >> 2] = $1;
  $2 = $5 + 8 | 0;
  _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($2);
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 136 >> 2] = HEAP32[173076];
  HEAP32[$3 + 132 >> 2] = $2;
  HEAP32[$3 + 128 >> 2] = $1;
  label$10 : {
   if ((HEAP32[$3 + 132 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 136 >> 2] + 168 | 0, 690050);
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   $1 = HEAP32[$3 + 132 >> 2];
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $2 = $1 + 56 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 48 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 40 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 32 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 24 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $1 + 16 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $1 = $1 + 8 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   if ((HEAP32[$3 + 128 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 136 >> 2] + 168 | 0, 690623);
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   if (!rustsecp256k1_v0_8_1_fe_set_b32($3, HEAP32[$3 + 128 >> 2])) {
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   if (!rustsecp256k1_v0_8_1_ge_set_xo_var($3 + 40 | 0, $3, 0)) {
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   $1 = $3 + 40 | 0;
   HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $1;
   rustsecp256k1_v0_8_1_xonly_pubkey_save(HEAP32[$3 + 132 >> 2], $1);
   HEAP32[$3 + 140 >> 2] = 1;
  }
  __stack_pointer = $3 + 144 | 0;
  label$1 : {
   if (HEAP32[$3 + 140 >> 2] == 1) {
    $1 = $5 + 8 | 0;
    $2 = $1 + 56 | 0;
    $6 = HEAP32[$2 + 4 >> 2];
    $3 = $5 + 72 | 0;
    $4 = $3 + 56 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $6;
    $2 = $1 + 48 | 0;
    $7 = HEAP32[$2 + 4 >> 2];
    $6 = $3 + 48 | 0;
    HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $2 = $1 + 40 | 0;
    $8 = HEAP32[$2 + 4 >> 2];
    $7 = $3 + 40 | 0;
    HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$7 + 4 >> 2] = $8;
    $2 = $1 + 32 | 0;
    $9 = HEAP32[$2 + 4 >> 2];
    $8 = $3 + 32 | 0;
    HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$8 + 4 >> 2] = $9;
    $2 = $1 + 24 | 0;
    $10 = HEAP32[$2 + 4 >> 2];
    $9 = $3 + 24 | 0;
    HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$9 + 4 >> 2] = $10;
    $2 = $1 + 16 | 0;
    $11 = HEAP32[$2 + 4 >> 2];
    $10 = $3 + 16 | 0;
    HEAP32[$10 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$10 + 4 >> 2] = $11;
    $1 = $1 + 8 | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $11 = $3 + 8 | 0;
    HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$11 + 4 >> 2] = $2;
    $1 = HEAP32[$5 + 12 >> 2];
    HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 8 >> 2];
    HEAP32[$5 + 76 >> 2] = $1;
    $3 = HEAP32[$5 + 76 >> 2];
    $1 = $0 + 1 | 0;
    $2 = HEAP32[$5 + 72 >> 2];
    HEAP8[$1 | 0] = $2;
    HEAP8[$1 + 1 | 0] = $2 >>> 8;
    HEAP8[$1 + 2 | 0] = $2 >>> 16;
    HEAP8[$1 + 3 | 0] = $2 >>> 24;
    HEAP8[$1 + 4 | 0] = $3;
    HEAP8[$1 + 5 | 0] = $3 >>> 8;
    HEAP8[$1 + 6 | 0] = $3 >>> 16;
    HEAP8[$1 + 7 | 0] = $3 >>> 24;
    $2 = HEAP32[$4 + 4 >> 2];
    $3 = $1 + 56 | 0;
    $4 = HEAP32[$4 >> 2];
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $2;
    HEAP8[$3 + 5 | 0] = $2 >>> 8;
    HEAP8[$3 + 6 | 0] = $2 >>> 16;
    HEAP8[$3 + 7 | 0] = $2 >>> 24;
    $2 = HEAP32[$6 + 4 >> 2];
    $3 = $1 + 48 | 0;
    $4 = HEAP32[$6 >> 2];
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $2;
    HEAP8[$3 + 5 | 0] = $2 >>> 8;
    HEAP8[$3 + 6 | 0] = $2 >>> 16;
    HEAP8[$3 + 7 | 0] = $2 >>> 24;
    $2 = HEAP32[$7 + 4 >> 2];
    $3 = $1 + 40 | 0;
    $4 = HEAP32[$7 >> 2];
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $2;
    HEAP8[$3 + 5 | 0] = $2 >>> 8;
    HEAP8[$3 + 6 | 0] = $2 >>> 16;
    HEAP8[$3 + 7 | 0] = $2 >>> 24;
    $2 = HEAP32[$8 + 4 >> 2];
    $3 = $1 + 32 | 0;
    $4 = HEAP32[$8 >> 2];
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $2;
    HEAP8[$3 + 5 | 0] = $2 >>> 8;
    HEAP8[$3 + 6 | 0] = $2 >>> 16;
    HEAP8[$3 + 7 | 0] = $2 >>> 24;
    $2 = HEAP32[$9 + 4 >> 2];
    $3 = $1 + 24 | 0;
    $4 = HEAP32[$9 >> 2];
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $2;
    HEAP8[$3 + 5 | 0] = $2 >>> 8;
    HEAP8[$3 + 6 | 0] = $2 >>> 16;
    HEAP8[$3 + 7 | 0] = $2 >>> 24;
    $2 = HEAP32[$10 + 4 >> 2];
    $3 = $1 + 16 | 0;
    $4 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $2;
    HEAP8[$3 + 5 | 0] = $2 >>> 8;
    HEAP8[$3 + 6 | 0] = $2 >>> 16;
    HEAP8[$3 + 7 | 0] = $2 >>> 24;
    $3 = HEAP32[$11 + 4 >> 2];
    $1 = $1 + 8 | 0;
    $2 = HEAP32[$11 >> 2];
    HEAP8[$1 | 0] = $2;
    HEAP8[$1 + 1 | 0] = $2 >>> 8;
    HEAP8[$1 + 2 | 0] = $2 >>> 16;
    HEAP8[$1 + 3 | 0] = $2 >>> 24;
    HEAP8[$1 + 4 | 0] = $3;
    HEAP8[$1 + 5 | 0] = $3 >>> 8;
    HEAP8[$1 + 6 | 0] = $3 >>> 16;
    HEAP8[$1 + 7 | 0] = $3 >>> 24;
    HEAP8[$0 | 0] = 0;
    break label$1;
   }
   HEAP32[$0 + 4 >> 2] = 1;
   HEAP8[$0 | 0] = 1;
  }
  __stack_pointer = $5 + 144 | 0;
 }
 
 function _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 48 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = 692376;
  label$1 : {
   if (HEAP32[$2 >> 2] != 33) {
    HEAP32[$2 + 4 >> 2] = 2;
    break label$1;
   }
   HEAP32[$2 + 4 >> 2] = 258;
  }
  $3 = HEAP32[$2 + 4 >> 2];
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 120 >> 2] = HEAP32[173076];
  HEAP32[$1 + 116 >> 2] = 692376;
  HEAP32[$1 + 112 >> 2] = $2;
  HEAP32[$1 + 108 >> 2] = $0;
  HEAP32[$1 + 104 >> 2] = $3;
  HEAP32[$1 + 8 >> 2] = 0;
  label$10 : {
   if ((HEAP32[$1 + 112 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 120 >> 2] + 168 | 0, 690079);
    HEAP32[$1 + 124 >> 2] = 0;
    break label$10;
   }
   if ((HEAPU32[HEAP32[$1 + 112 >> 2] >> 2] >= (HEAP32[$1 + 104 >> 2] & 256 ? 33 : 65) >>> 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 120 >> 2] + 168 | 0, 690097);
    HEAP32[$1 + 124 >> 2] = 0;
    break label$10;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 112 >> 2] >> 2];
   HEAP32[HEAP32[$1 + 112 >> 2] >> 2] = 0;
   if ((HEAP32[$1 + 116 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 120 >> 2] + 168 | 0, 690167);
    HEAP32[$1 + 124 >> 2] = 0;
    break label$10;
   }
   memset(HEAP32[$1 + 116 >> 2], HEAP32[$1 + 12 >> 2]);
   if ((HEAP32[$1 + 108 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 120 >> 2] + 168 | 0, 690050);
    HEAP32[$1 + 124 >> 2] = 0;
    break label$10;
   }
   if (((HEAP32[$1 + 104 >> 2] & 255) == 2 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 120 >> 2] + 168 | 0, 690182);
    HEAP32[$1 + 124 >> 2] = 0;
    break label$10;
   }
   if (rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$1 + 120 >> 2], $1 + 16 | 0, HEAP32[$1 + 108 >> 2])) {
    $3 = HEAP32[$1 + 116 >> 2];
    $4 = HEAP32[$1 + 104 >> 2] & 256;
    $0 = __stack_pointer - 32 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 24 >> 2] = $1 + 16;
    HEAP32[$0 + 20 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = $1 + 12;
    HEAP32[$0 + 12 >> 2] = $4;
    $3 = __stack_pointer - 16 | 0;
    HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 24 >> 2];
    label$11 : {
     if (HEAP32[HEAP32[$3 + 12 >> 2] + 80 >> 2]) {
      HEAP32[$0 + 28 >> 2] = 0;
      break label$11;
     }
     rustsecp256k1_v0_8_1_fe_normalize_var(HEAP32[$0 + 24 >> 2]);
     rustsecp256k1_v0_8_1_fe_normalize_var(HEAP32[$0 + 24 >> 2] + 40 | 0);
     rustsecp256k1_v0_8_1_fe_get_b32(HEAP32[$0 + 20 >> 2] + 1 | 0, HEAP32[$0 + 24 >> 2]);
     label$3 : {
      if (HEAP32[$0 + 12 >> 2]) {
       HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = 33;
       $3 = __stack_pointer - 16 | 0;
       HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + 40;
       HEAP8[HEAP32[$0 + 20 >> 2]] = HEAP32[HEAP32[$3 + 12 >> 2] >> 2] & 1 ? 3 : 2;
       break label$3;
      }
      HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = 65;
      HEAP8[HEAP32[$0 + 20 >> 2]] = 4;
      rustsecp256k1_v0_8_1_fe_get_b32(HEAP32[$0 + 20 >> 2] + 33 | 0, HEAP32[$0 + 24 >> 2] + 40 | 0);
     }
     HEAP32[$0 + 28 >> 2] = 1;
    }
    __stack_pointer = $0 + 32 | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 28 >> 2];
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[HEAP32[$1 + 112 >> 2] >> 2] = HEAP32[$1 + 12 >> 2]
    }
   }
   HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  __stack_pointer = $1 + 128 | 0;
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 124 >> 2];
  HEAP32[$2 + 8 >> 2] = $2 + 16;
  HEAP32[$2 + 12 >> 2] = 655892;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 56 >> 2] = $0;
  $1 = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 60 >> 2] = $1;
  if (!((HEAP32[$0 >> 2] == HEAP32[$1 >> 2] ^ -1) & 1)) {
   __stack_pointer = $2 - -64 | 0;
   return;
  }
  HEAP8[$2 + 23 | 0] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$2 + 23 | 0], $0, $1, $2 + 24 | 0, 655928);
  wasm2js_trap();
 }
 
 function _ZN14secp256k1_wasm23x_only_pubkey_serialize17h4d8873bf823986baE($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 48 >> 2] = $0;
  HEAP32[$3 + 52 >> 2] = 692441;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 104 >> 2] = HEAP32[173076];
  HEAP32[$1 + 100 >> 2] = 692441;
  HEAP32[$1 + 96 >> 2] = $0;
  label$1 : {
   if ((HEAP32[$1 + 100 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 104 >> 2] + 168 | 0, 690639);
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$1 + 100 >> 2];
   HEAP8[$0 | 0] = 0;
   HEAP8[$0 + 1 | 0] = 0;
   HEAP8[$0 + 2 | 0] = 0;
   HEAP8[$0 + 3 | 0] = 0;
   HEAP8[$0 + 4 | 0] = 0;
   HEAP8[$0 + 5 | 0] = 0;
   HEAP8[$0 + 6 | 0] = 0;
   HEAP8[$0 + 7 | 0] = 0;
   $2 = $0 + 24 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = $0 + 16 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $0 = $0 + 8 | 0;
   HEAP8[$0 | 0] = 0;
   HEAP8[$0 + 1 | 0] = 0;
   HEAP8[$0 + 2 | 0] = 0;
   HEAP8[$0 + 3 | 0] = 0;
   HEAP8[$0 + 4 | 0] = 0;
   HEAP8[$0 + 5 | 0] = 0;
   HEAP8[$0 + 6 | 0] = 0;
   HEAP8[$0 + 7 | 0] = 0;
   if ((HEAP32[$1 + 96 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 104 >> 2] + 168 | 0, 690050);
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   if (!rustsecp256k1_v0_8_1_xonly_pubkey_load(HEAP32[$1 + 104 >> 2], $1 + 8 | 0, HEAP32[$1 + 96 >> 2])) {
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   rustsecp256k1_v0_8_1_fe_get_b32(HEAP32[$1 + 100 >> 2], $1 + 8 | 0);
   HEAP32[$1 + 108 >> 2] = 1;
  }
  __stack_pointer = $1 + 112 | 0;
  HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 108 >> 2];
  HEAP32[$3 + 8 >> 2] = $3 + 16;
  HEAP32[$3 + 12 >> 2] = 655892;
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 56 >> 2] = $0;
  $1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 60 >> 2] = $1;
  if (!((HEAP32[$0 >> 2] == HEAP32[$1 >> 2] ^ -1) & 1)) {
   __stack_pointer = $3 - -64 | 0;
   return;
  }
  HEAP8[$3 + 23 | 0] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$3 + 23 | 0], $0, $1, $3 + 24 | 0, 655944);
  wasm2js_trap();
 }
 
 function initializeContext() {
  _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
 }
 
 function isPoint($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 176 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 156 >> 2] = $0;
  label$1 : {
   if (($0 | 0) != 32) {
    HEAP32[$1 + 160 >> 2] = 692376;
    HEAP32[$1 + 164 >> 2] = 65;
    $2 = $1 + 88 | 0;
    _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($2, 692376, $0);
    (wasm2js_i32$0 = $1, wasm2js_i32$1 = _ZN4core6result19Result$LT$T$C$E$GT$11map_or_else17h7456f63c1d71384fE($2)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    break label$1;
   }
   HEAP32[$1 + 168 >> 2] = 692376;
   HEAP32[$1 + 172 >> 2] = 65;
   $0 = $1 + 16 | 0;
   _ZN14secp256k1_wasm19x_only_pubkey_parse17h41e45a132a1a3178E($0, 692376);
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = _ZN4core6result19Result$LT$T$C$E$GT$11map_or_else17h7456f63c1d71384fE($0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  }
  __stack_pointer = $1 + 176 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function pointAdd($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $4 = __stack_pointer - 544 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 488 >> 2] = $0;
  HEAP32[$4 + 492 >> 2] = $1;
  HEAP32[$4 + 496 >> 2] = $2;
  HEAP32[$4 + 536 >> 2] = 692376;
  HEAP32[$4 + 540 >> 2] = 65;
  _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($4 + 80 | 0, 692376, $0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!(HEAP8[$4 + 80 | 0] & 1)) {
        $0 = $4 + 81 | 0;
        $3 = $0 + 56 | 0;
        $7 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $5 = $4 + 152 | 0;
        $6 = $5 + 56 | 0;
        HEAP32[$6 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$6 + 4 >> 2] = $7;
        $3 = $0 + 48 | 0;
        $8 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $7 = $5 + 48 | 0;
        HEAP32[$7 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$7 + 4 >> 2] = $8;
        $3 = $0 + 40 | 0;
        $9 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $8 = $5 + 40 | 0;
        HEAP32[$8 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$8 + 4 >> 2] = $9;
        $3 = $0 + 32 | 0;
        $10 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $9 = $5 + 32 | 0;
        HEAP32[$9 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$9 + 4 >> 2] = $10;
        $3 = $0 + 24 | 0;
        $11 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $10 = $5 + 24 | 0;
        HEAP32[$10 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$10 + 4 >> 2] = $11;
        $3 = $0 + 16 | 0;
        $12 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $11 = $5 + 16 | 0;
        HEAP32[$11 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$11 + 4 >> 2] = $12;
        $3 = $0 + 8 | 0;
        $12 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $5 = $5 + 8 | 0;
        HEAP32[$5 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        HEAP32[$5 + 4 >> 2] = $12;
        $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
        HEAP32[$4 + 152 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
        HEAP32[$4 + 156 >> 2] = $3;
        $3 = HEAP32[$6 + 4 >> 2];
        $0 = $4 + 16 | 0;
        $12 = $0 + 56 | 0;
        HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$12 + 4 >> 2] = $3;
        $3 = HEAP32[$7 + 4 >> 2];
        $6 = $0 + 48 | 0;
        HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$6 + 4 >> 2] = $3;
        $3 = HEAP32[$8 + 4 >> 2];
        $6 = $0 + 40 | 0;
        HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$6 + 4 >> 2] = $3;
        $3 = HEAP32[$9 + 4 >> 2];
        $6 = $0 + 32 | 0;
        HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
        HEAP32[$6 + 4 >> 2] = $3;
        $3 = HEAP32[$10 + 4 >> 2];
        $6 = $0 + 24 | 0;
        HEAP32[$6 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$6 + 4 >> 2] = $3;
        $3 = HEAP32[$11 + 4 >> 2];
        $6 = $0 + 16 | 0;
        HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$6 + 4 >> 2] = $3;
        $3 = HEAP32[$5 + 4 >> 2];
        $0 = $0 + 8 | 0;
        HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$0 + 4 >> 2] = $3;
        $0 = HEAP32[$4 + 156 >> 2];
        HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 152 >> 2];
        HEAP32[$4 + 20 >> 2] = $0;
        HEAP32[$4 + 528 >> 2] = 655617;
        HEAP32[$4 + 532 >> 2] = 65;
        _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($4 + 280 | 0, 655617, $1);
        if (!(HEAP8[$4 + 280 | 0] & 1)) {
         break label$5
        }
        break label$4;
       }
       $0 = HEAP32[$4 + 84 >> 2];
       HEAP32[$4 + 500 >> 2] = $0;
       _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
       HEAP32[$4 + 12 >> 2] = 0;
       break label$1;
      }
      $0 = $4 + 281 | 0;
      $1 = $0 + 56 | 0;
      $6 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $3 = $4 + 352 | 0;
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$5 + 4 >> 2] = $6;
      $1 = $0 + 48 | 0;
      $7 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $6 = $3 + 48 | 0;
      HEAP32[$6 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$6 + 4 >> 2] = $7;
      $1 = $0 + 40 | 0;
      $8 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $7 = $3 + 40 | 0;
      HEAP32[$7 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$7 + 4 >> 2] = $8;
      $1 = $0 + 32 | 0;
      $9 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $8 = $3 + 32 | 0;
      HEAP32[$8 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$8 + 4 >> 2] = $9;
      $1 = $0 + 24 | 0;
      $10 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$9 + 4 >> 2] = $10;
      $1 = $0 + 16 | 0;
      $11 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $10 = $3 + 16 | 0;
      HEAP32[$10 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$10 + 4 >> 2] = $11;
      $1 = $0 + 8 | 0;
      $11 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$3 + 4 >> 2] = $11;
      $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      HEAP32[$4 + 352 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$4 + 356 >> 2] = $1;
      $1 = HEAP32[$5 + 4 >> 2];
      $0 = $4 + 216 | 0;
      $11 = $0 + 56 | 0;
      HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$11 + 4 >> 2] = $1;
      $1 = HEAP32[$6 + 4 >> 2];
      $5 = $0 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $1;
      $1 = HEAP32[$7 + 4 >> 2];
      $5 = $0 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $1;
      $1 = HEAP32[$8 + 4 >> 2];
      $5 = $0 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $1;
      $1 = HEAP32[$9 + 4 >> 2];
      $5 = $0 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$5 + 4 >> 2] = $1;
      $1 = HEAP32[$10 + 4 >> 2];
      $5 = $0 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $1;
      $1 = HEAP32[$3 + 4 >> 2];
      $5 = $0 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $1;
      $1 = HEAP32[$4 + 356 >> 2];
      HEAP32[$4 + 216 >> 2] = HEAP32[$4 + 352 >> 2];
      HEAP32[$4 + 220 >> 2] = $1;
      $3 = $4 + 416 | 0;
      _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($3);
      HEAP32[$4 + 480 >> 2] = $4 + 16;
      HEAP32[$4 + 484 >> 2] = $0;
      $5 = HEAP32[173076];
      $1 = $4 + 480 | 0;
      HEAP32[$4 + 520 >> 2] = $1;
      HEAP32[$4 + 524 >> 2] = 2;
      HEAP32[$4 + 508 >> 2] = $1;
      $0 = __stack_pointer - 240 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 232 >> 2] = $5;
      HEAP32[$0 + 228 >> 2] = $3;
      HEAP32[$0 + 224 >> 2] = $1;
      HEAP32[$0 + 220 >> 2] = 2;
      label$10 : {
       if ((HEAP32[$0 + 228 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 232 >> 2] + 168 | 0, 690488);
        HEAP32[$0 + 236 >> 2] = 0;
        break label$10;
       }
       $1 = HEAP32[$0 + 228 >> 2];
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $3 = $1 + 56 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $1 + 48 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $1 + 40 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $1 + 32 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $1 + 24 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $1 + 16 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $1 = $1 + 8 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       if ((HEAP32[$0 + 220 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 232 >> 2] + 168 | 0, 690505);
        HEAP32[$0 + 236 >> 2] = 0;
        break label$10;
       }
       if ((HEAP32[$0 + 224 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 232 >> 2] + 168 | 0, 690512);
        HEAP32[$0 + 236 >> 2] = 0;
        break label$10;
       }
       rustsecp256k1_v0_8_1_gej_set_infinity($0 + 88 | 0);
       HEAP32[$0 + 216 >> 2] = 0;
       while (1) {
        if (HEAPU32[$0 + 216 >> 2] < HEAPU32[$0 + 220 >> 2]) {
         if ((HEAP32[HEAP32[$0 + 224 >> 2] + (HEAP32[$0 + 216 >> 2] << 2) >> 2] != 0 ^ -1) & 1) {
          rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 232 >> 2] + 168 | 0, 690530);
          HEAP32[$0 + 236 >> 2] = 0;
          break label$10;
         } else {
          rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$0 + 232 >> 2], $0, HEAP32[HEAP32[$0 + 224 >> 2] + (HEAP32[$0 + 216 >> 2] << 2) >> 2]);
          $1 = $0 + 88 | 0;
          rustsecp256k1_v0_8_1_gej_add_ge($1, $1, $0);
          HEAP32[$0 + 216 >> 2] = HEAP32[$0 + 216 >> 2] + 1;
          continue;
         }
        }
        break;
       };
       $1 = __stack_pointer - 16 | 0;
       HEAP32[$1 + 12 >> 2] = $0 + 88;
       if (HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2]) {
        HEAP32[$0 + 236 >> 2] = 0;
        break label$10;
       }
       rustsecp256k1_v0_8_1_ge_set_gej($0, $0 + 88 | 0);
       rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$0 + 228 >> 2], $0);
       HEAP32[$0 + 236 >> 2] = 1;
      }
      __stack_pointer = $0 + 240 | 0;
      if (HEAP32[$0 + 236 >> 2] == 1) {
       break label$3
      }
      break label$2;
     }
     $0 = HEAP32[$4 + 284 >> 2];
     HEAP32[$4 + 504 >> 2] = $0;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
     HEAP32[$4 + 12 >> 2] = 0;
     break label$1;
    }
    HEAP32[$4 + 512 >> 2] = 692376;
    HEAP32[$4 + 516 >> 2] = 65;
    _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($4 + 416 | 0, $2);
    HEAP32[$4 + 12 >> 2] = 1;
    break label$1;
   }
   HEAP32[$4 + 12 >> 2] = 0;
  }
  __stack_pointer = $4 + 544 | 0;
  return HEAP32[$4 + 12 >> 2];
 }
 
 function pointAddScalar($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 256 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 220 >> 2] = $0;
  HEAP32[$4 + 224 >> 2] = $1;
  HEAP32[$4 + 248 >> 2] = 692376;
  HEAP32[$4 + 252 >> 2] = 65;
  _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($4 + 80 | 0, 692376, $0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP8[$4 + 80 | 0] & 1)) {
      $0 = $4 + 81 | 0;
      $2 = $0 + 56 | 0;
      $6 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $3 = $4 + 152 | 0;
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$5 + 4 >> 2] = $6;
      $2 = $0 + 48 | 0;
      $7 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $6 = $3 + 48 | 0;
      HEAP32[$6 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$6 + 4 >> 2] = $7;
      $2 = $0 + 40 | 0;
      $8 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $7 = $3 + 40 | 0;
      HEAP32[$7 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$7 + 4 >> 2] = $8;
      $2 = $0 + 32 | 0;
      $9 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $8 = $3 + 32 | 0;
      HEAP32[$8 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$8 + 4 >> 2] = $9;
      $2 = $0 + 24 | 0;
      $10 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$9 + 4 >> 2] = $10;
      $2 = $0 + 16 | 0;
      $11 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $10 = $3 + 16 | 0;
      HEAP32[$10 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$10 + 4 >> 2] = $11;
      $2 = $0 + 8 | 0;
      $11 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$3 + 4 >> 2] = $11;
      $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      HEAP32[$4 + 152 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$4 + 156 >> 2] = $2;
      $0 = HEAP32[$5 + 4 >> 2];
      $2 = $4 + 16 | 0;
      $11 = $2 + 56 | 0;
      HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$11 + 4 >> 2] = $0;
      $0 = HEAP32[$6 + 4 >> 2];
      $5 = $2 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$7 + 4 >> 2];
      $5 = $2 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$8 + 4 >> 2];
      $5 = $2 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$9 + 4 >> 2];
      $5 = $2 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$10 + 4 >> 2];
      $5 = $2 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$3 + 4 >> 2];
      $5 = $2 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$4 + 156 >> 2];
      HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 152 >> 2];
      HEAP32[$4 + 20 >> 2] = $0;
      $3 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
      HEAP32[$4 + 240 >> 2] = 692505;
      HEAP32[$4 + 244 >> 2] = 32;
      $0 = __stack_pointer - 112 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 104 >> 2] = $3;
      HEAP32[$0 + 100 >> 2] = $2;
      HEAP32[$0 + 96 >> 2] = 692505;
      HEAP32[$0 + 4 >> 2] = 0;
      label$10 : {
       if ((HEAP32[$0 + 100 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 104 >> 2] + 168 | 0, 690050);
        HEAP32[$0 + 108 >> 2] = 0;
        break label$10;
       }
       if ((HEAP32[$0 + 96 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 104 >> 2] + 168 | 0, 690472);
        HEAP32[$0 + 108 >> 2] = 0;
        break label$10;
       }
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$0 + 104 >> 2], $0 + 8 | 0, HEAP32[$0 + 100 >> 2])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
       $2 = HEAP32[$0 + 100 >> 2];
       HEAP8[$2 | 0] = 0;
       HEAP8[$2 + 1 | 0] = 0;
       HEAP8[$2 + 2 | 0] = 0;
       HEAP8[$2 + 3 | 0] = 0;
       HEAP8[$2 + 4 | 0] = 0;
       HEAP8[$2 + 5 | 0] = 0;
       HEAP8[$2 + 6 | 0] = 0;
       HEAP8[$2 + 7 | 0] = 0;
       $3 = $2 + 56 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 48 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 40 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 32 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 24 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 16 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $2 = $2 + 8 | 0;
       HEAP8[$2 | 0] = 0;
       HEAP8[$2 + 1 | 0] = 0;
       HEAP8[$2 + 2 | 0] = 0;
       HEAP8[$2 + 3 | 0] = 0;
       HEAP8[$2 + 4 | 0] = 0;
       HEAP8[$2 + 5 | 0] = 0;
       HEAP8[$2 + 6 | 0] = 0;
       HEAP8[$2 + 7 | 0] = 0;
       if (HEAP32[$0 + 4 >> 2]) {
        $2 = (rustsecp256k1_v0_8_1_ec_pubkey_tweak_add_helper($0 + 8 | 0, HEAP32[$0 + 96 >> 2]) | 0) != 0
       } else {
        $2 = 0
       }
       HEAP32[$0 + 4 >> 2] = $2;
       if (HEAP32[$0 + 4 >> 2]) {
        rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$0 + 100 >> 2], $0 + 8 | 0)
       }
       HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 4 >> 2];
      }
      __stack_pointer = $0 + 112 | 0;
      if (HEAP32[$0 + 108 >> 2] == 1) {
       break label$3
      }
      break label$2;
     }
     $0 = HEAP32[$4 + 84 >> 2];
     HEAP32[$4 + 228 >> 2] = $0;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
     HEAP32[$4 + 12 >> 2] = 0;
     break label$1;
    }
    HEAP32[$4 + 232 >> 2] = 692376;
    HEAP32[$4 + 236 >> 2] = 65;
    _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($4 + 16 | 0, $1);
    HEAP32[$4 + 12 >> 2] = 1;
    break label$1;
   }
   HEAP32[$4 + 12 >> 2] = 0;
  }
  __stack_pointer = $4 + 256 | 0;
  return HEAP32[$4 + 12 >> 2];
 }
 
 function xOnlyPointAddTweak() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $3 = __stack_pointer - 384 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 376 >> 2] = 692441;
  HEAP32[$3 + 380 >> 2] = 32;
  _ZN14secp256k1_wasm19x_only_pubkey_parse17h41e45a132a1a3178E($3 + 80 | 0, 692441);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP8[$3 + 80 | 0] & 1)) {
      $2 = $3 + 81 | 0;
      $0 = $2 + 56 | 0;
      $5 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $1 = $3 + 152 | 0;
      $4 = $1 + 56 | 0;
      HEAP32[$4 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$4 + 4 >> 2] = $5;
      $0 = $2 + 48 | 0;
      $6 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $5 = $1 + 48 | 0;
      HEAP32[$5 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$5 + 4 >> 2] = $6;
      $0 = $2 + 40 | 0;
      $7 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $6 = $1 + 40 | 0;
      HEAP32[$6 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$6 + 4 >> 2] = $7;
      $0 = $2 + 32 | 0;
      $8 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $7 = $1 + 32 | 0;
      HEAP32[$7 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$7 + 4 >> 2] = $8;
      $0 = $2 + 24 | 0;
      $9 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $8 = $1 + 24 | 0;
      HEAP32[$8 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$8 + 4 >> 2] = $9;
      $0 = $2 + 16 | 0;
      $10 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $9 = $1 + 16 | 0;
      HEAP32[$9 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$9 + 4 >> 2] = $10;
      $0 = $2 + 8 | 0;
      $10 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      $1 = $1 + 8 | 0;
      HEAP32[$1 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$1 + 4 >> 2] = $10;
      $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      HEAP32[$3 + 152 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$3 + 156 >> 2] = $0;
      $2 = HEAP32[$4 + 4 >> 2];
      $0 = $3 + 16 | 0;
      $10 = $0 + 56 | 0;
      HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$10 + 4 >> 2] = $2;
      $2 = HEAP32[$5 + 4 >> 2];
      $4 = $0 + 48 | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$6 + 4 >> 2];
      $4 = $0 + 40 | 0;
      HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$7 + 4 >> 2];
      $4 = $0 + 32 | 0;
      HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$8 + 4 >> 2];
      $4 = $0 + 24 | 0;
      HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$9 + 4 >> 2];
      $4 = $0 + 16 | 0;
      HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$1 + 4 >> 2];
      $4 = $0 + 8 | 0;
      HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$3 + 156 >> 2];
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 152 >> 2];
      HEAP32[$3 + 20 >> 2] = $2;
      $1 = $3 + 216 | 0;
      _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($1);
      $4 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
      HEAP32[$3 + 368 >> 2] = 692505;
      HEAP32[$3 + 372 >> 2] = 32;
      $2 = __stack_pointer - 112 | 0;
      __stack_pointer = $2;
      HEAP32[$2 + 104 >> 2] = $4;
      HEAP32[$2 + 100 >> 2] = $1;
      HEAP32[$2 + 96 >> 2] = $0;
      HEAP32[$2 + 92 >> 2] = 692505;
      label$10 : {
       if ((HEAP32[$2 + 100 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 104 >> 2] + 168 | 0, 690677);
        HEAP32[$2 + 108 >> 2] = 0;
        break label$10;
       }
       $0 = HEAP32[$2 + 100 >> 2];
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $1 = $0 + 56 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $1 = $0 + 48 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $1 = $0 + 40 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $1 = $0 + 32 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $1 = $0 + 24 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $1 = $0 + 16 | 0;
       HEAP8[$1 | 0] = 0;
       HEAP8[$1 + 1 | 0] = 0;
       HEAP8[$1 + 2 | 0] = 0;
       HEAP8[$1 + 3 | 0] = 0;
       HEAP8[$1 + 4 | 0] = 0;
       HEAP8[$1 + 5 | 0] = 0;
       HEAP8[$1 + 6 | 0] = 0;
       HEAP8[$1 + 7 | 0] = 0;
       $0 = $0 + 8 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       if ((HEAP32[$2 + 96 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 104 >> 2] + 168 | 0, 690699);
        HEAP32[$2 + 108 >> 2] = 0;
        break label$10;
       }
       if ((HEAP32[$2 + 92 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 104 >> 2] + 168 | 0, 690472);
        HEAP32[$2 + 108 >> 2] = 0;
        break label$10;
       }
       label$5 : {
        if (rustsecp256k1_v0_8_1_xonly_pubkey_load(HEAP32[$2 + 104 >> 2], $2, HEAP32[$2 + 96 >> 2])) {
         if (rustsecp256k1_v0_8_1_ec_pubkey_tweak_add_helper($2, HEAP32[$2 + 92 >> 2])) {
          break label$5
         }
        }
        HEAP32[$2 + 108 >> 2] = 0;
        break label$10;
       }
       rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$2 + 100 >> 2], $2);
       HEAP32[$2 + 108 >> 2] = 1;
      }
      __stack_pointer = $2 + 112 | 0;
      if (HEAP32[$2 + 108 >> 2] == 1) {
       break label$3
      }
      break label$2;
     }
     $2 = HEAP32[$3 + 84 >> 2];
     HEAP32[$3 + 356 >> 2] = $2;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($2 | 0);
     HEAP32[$3 + 12 >> 2] = 0;
     break label$1;
    }
    HEAP32[$3 + 284 >> 2] = 0;
    $2 = $3 + 16 | 0;
    _ZN14secp256k1_wasm32x_only_pubkey_from_pubkey_struct17h88155263bed130b4E($3 + 288 | 0, $2, $3 + 284 | 0, $3 + 216 | 0);
    HEAP32[$3 + 360 >> 2] = 692441;
    HEAP32[$3 + 364 >> 2] = 32;
    _ZN14secp256k1_wasm23x_only_pubkey_serialize17h4d8873bf823986baE($2);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 284 >> 2];
    break label$1;
   }
   HEAP32[$3 + 12 >> 2] = -1;
  }
  __stack_pointer = $3 + 384 | 0;
  return HEAP32[$3 + 12 >> 2];
 }
 
 function xOnlyPointAddTweakCheck($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $3 = __stack_pointer - 384 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 344 >> 2] = $0;
  HEAP32[$3 + 376 >> 2] = 692441;
  HEAP32[$3 + 380 >> 2] = 32;
  _ZN14secp256k1_wasm19x_only_pubkey_parse17h41e45a132a1a3178E($3 + 72 | 0, 692441);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP8[$3 + 72 | 0] & 1)) {
      $2 = $3 + 73 | 0;
      $1 = $2 + 56 | 0;
      $5 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $6 = $3 + 144 | 0;
      $4 = $6 + 56 | 0;
      HEAP32[$4 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$4 + 4 >> 2] = $5;
      $1 = $2 + 48 | 0;
      $7 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $5 = $6 + 48 | 0;
      HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$5 + 4 >> 2] = $7;
      $1 = $2 + 40 | 0;
      $8 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $7 = $6 + 40 | 0;
      HEAP32[$7 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$7 + 4 >> 2] = $8;
      $1 = $2 + 32 | 0;
      $9 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $8 = $6 + 32 | 0;
      HEAP32[$8 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$8 + 4 >> 2] = $9;
      $1 = $2 + 24 | 0;
      $10 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $9 = $6 + 24 | 0;
      HEAP32[$9 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$9 + 4 >> 2] = $10;
      $1 = $2 + 16 | 0;
      $11 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $10 = $6 + 16 | 0;
      HEAP32[$10 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$10 + 4 >> 2] = $11;
      $1 = $2 + 8 | 0;
      $11 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $6 = $6 + 8 | 0;
      HEAP32[$6 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$6 + 4 >> 2] = $11;
      $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      HEAP32[$3 + 144 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$3 + 148 >> 2] = $1;
      $1 = HEAP32[$4 + 4 >> 2];
      $2 = $3 + 8 | 0;
      $11 = $2 + 56 | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = $1;
      $1 = HEAP32[$5 + 4 >> 2];
      $4 = $2 + 48 | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      $1 = HEAP32[$7 + 4 >> 2];
      $4 = $2 + 40 | 0;
      HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      $1 = HEAP32[$8 + 4 >> 2];
      $4 = $2 + 32 | 0;
      HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      $1 = HEAP32[$9 + 4 >> 2];
      $4 = $2 + 24 | 0;
      HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      $1 = HEAP32[$10 + 4 >> 2];
      $4 = $2 + 16 | 0;
      HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      $1 = HEAP32[$6 + 4 >> 2];
      $2 = $2 + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$2 + 4 >> 2] = $1;
      $2 = HEAP32[$3 + 148 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 144 >> 2];
      HEAP32[$3 + 12 >> 2] = $2;
      HEAP32[$3 + 368 >> 2] = 692473;
      HEAP32[$3 + 372 >> 2] = 32;
      HEAP32[$3 + 352 >> 2] = 692473;
      _ZN14secp256k1_wasm19x_only_pubkey_parse17h41e45a132a1a3178E($3 + 208 | 0, 692473);
      if (!(HEAP8[$3 + 208 | 0] & 1)) {
       break label$3
      }
      break label$2;
     }
     $0 = HEAP32[$3 + 76 >> 2];
     HEAP32[$3 + 348 >> 2] = $0;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
     HEAP32[$3 + 4 >> 2] = 0;
     break label$1;
    }
    $2 = $3 + 209 | 0;
    $1 = $2 + 56 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $6 = $3 + 280 | 0;
    $5 = $6 + 56 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 48 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $5 = $6 + 48 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 40 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $5 = $6 + 40 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 32 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $5 = $6 + 32 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 24 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $5 = $6 + 24 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 16 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $5 = $6 + 16 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 8 | 0;
    $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $6 = $6 + 8 | 0;
    HEAP32[$6 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$6 + 4 >> 2] = $4;
    $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    HEAP32[$3 + 280 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    HEAP32[$3 + 284 >> 2] = $1;
    $1 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
    HEAP32[$3 + 360 >> 2] = 692505;
    HEAP32[$3 + 364 >> 2] = 32;
    $2 = __stack_pointer - 144 | 0;
    __stack_pointer = $2;
    HEAP32[$2 + 136 >> 2] = $1;
    HEAP32[$2 + 132 >> 2] = 692473;
    HEAP32[$2 + 128 >> 2] = $0;
    HEAP32[$2 + 124 >> 2] = $3 + 8;
    HEAP32[$2 + 120 >> 2] = 692505;
    label$10 : {
     if ((HEAP32[$2 + 124 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 136 >> 2] + 168 | 0, 690699);
      HEAP32[$2 + 140 >> 2] = 0;
      break label$10;
     }
     if ((HEAP32[$2 + 132 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 136 >> 2] + 168 | 0, 690723);
      HEAP32[$2 + 140 >> 2] = 0;
      break label$10;
     }
     if ((HEAP32[$2 + 120 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 136 >> 2] + 168 | 0, 690472);
      HEAP32[$2 + 140 >> 2] = 0;
      break label$10;
     }
     label$5 : {
      if (rustsecp256k1_v0_8_1_xonly_pubkey_load(HEAP32[$2 + 136 >> 2], $2 + 32 | 0, HEAP32[$2 + 124 >> 2])) {
       if (rustsecp256k1_v0_8_1_ec_pubkey_tweak_add_helper($2 + 32 | 0, HEAP32[$2 + 120 >> 2])) {
        break label$5
       }
      }
      HEAP32[$2 + 140 >> 2] = 0;
      break label$10;
     }
     $0 = $2 + 32 | 0;
     rustsecp256k1_v0_8_1_fe_normalize_var($0);
     rustsecp256k1_v0_8_1_fe_normalize_var($0 + 40 | 0);
     rustsecp256k1_v0_8_1_fe_get_b32($2, $0);
     if (rustsecp256k1_v0_8_1_memcmp_var($2, HEAP32[$2 + 132 >> 2], 32)) {
      $0 = 0
     } else {
      $0 = __stack_pointer - 16 | 0;
      HEAP32[$0 + 12 >> 2] = $2 + 72;
      $0 = HEAP32[$2 + 128 >> 2] == (HEAP32[HEAP32[$0 + 12 >> 2] >> 2] & 1);
     }
     HEAP32[$2 + 140 >> 2] = $0;
    }
    __stack_pointer = $2 + 144 | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 140 >> 2];
    break label$1;
   }
   $0 = HEAP32[$3 + 212 >> 2];
   HEAP32[$3 + 356 >> 2] = $0;
   _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
   HEAP32[$3 + 4 >> 2] = 0;
  }
  __stack_pointer = $3 + 384 | 0;
  return HEAP32[$3 + 4 >> 2];
 }
 
 function pointCompress($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $5 = __stack_pointer - 240 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 212 >> 2] = $0;
  HEAP32[$5 + 216 >> 2] = $1;
  HEAP32[$5 + 232 >> 2] = 692376;
  HEAP32[$5 + 236 >> 2] = 65;
  _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($5 + 72 | 0, 692376, $0);
  label$1 : {
   if (!(HEAP8[$5 + 72 | 0] & 1)) {
    $0 = $5 + 73 | 0;
    $2 = $0 + 56 | 0;
    $6 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $3 = $5 + 144 | 0;
    $4 = $3 + 56 | 0;
    HEAP32[$4 >> 2] = $6;
    HEAP32[$4 + 4 >> 2] = $2;
    $2 = $0 + 48 | 0;
    $7 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $6 = $3 + 48 | 0;
    HEAP32[$6 >> 2] = $7;
    HEAP32[$6 + 4 >> 2] = $2;
    $2 = $0 + 40 | 0;
    $8 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $7 = $3 + 40 | 0;
    HEAP32[$7 >> 2] = $8;
    HEAP32[$7 + 4 >> 2] = $2;
    $2 = $0 + 32 | 0;
    $9 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $8 = $3 + 32 | 0;
    HEAP32[$8 >> 2] = $9;
    HEAP32[$8 + 4 >> 2] = $2;
    $2 = $0 + 24 | 0;
    $10 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $9 = $3 + 24 | 0;
    HEAP32[$9 >> 2] = $10;
    HEAP32[$9 + 4 >> 2] = $2;
    $2 = $0 + 16 | 0;
    $11 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $10 = $3 + 16 | 0;
    HEAP32[$10 >> 2] = $11;
    HEAP32[$10 + 4 >> 2] = $2;
    $2 = $0 + 8 | 0;
    $11 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $12 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $2 = $3 + 8 | 0;
    HEAP32[$2 >> 2] = $11;
    HEAP32[$2 + 4 >> 2] = $12;
    $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    HEAP32[$5 + 144 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    HEAP32[$5 + 148 >> 2] = $3;
    $3 = HEAP32[$4 + 4 >> 2];
    $0 = $5 + 8 | 0;
    $11 = $0 + 56 | 0;
    HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$11 + 4 >> 2] = $3;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = $0 + 48 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$7 + 4 >> 2];
    $4 = $0 + 40 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$8 + 4 >> 2];
    $4 = $0 + 32 | 0;
    HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$9 + 4 >> 2];
    $4 = $0 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$10 + 4 >> 2];
    $4 = $0 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 8 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = HEAP32[$5 + 148 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 144 >> 2];
    HEAP32[$5 + 12 >> 2] = $2;
    HEAP32[$5 + 224 >> 2] = 692376;
    HEAP32[$5 + 228 >> 2] = 65;
    _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($0, $1);
    break label$1;
   }
   $0 = HEAP32[$5 + 76 >> 2];
   HEAP32[$5 + 220 >> 2] = $0;
   _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
  }
  __stack_pointer = $5 + 240 | 0;
 }
 
 function pointFromScalar($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 76 >> 2] = $0;
  $2 = $4 + 8 | 0;
  _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($2);
  $1 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
  HEAP32[$4 + 88 >> 2] = 692344;
  HEAP32[$4 + 92 >> 2] = 32;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 136 >> 2] = $1;
  HEAP32[$3 + 132 >> 2] = $2;
  HEAP32[$3 + 128 >> 2] = 692344;
  HEAP32[$3 + 4 >> 2] = 0;
  label$10 : {
   if ((HEAP32[$3 + 132 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 136 >> 2] + 168 | 0, 690050);
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   $2 = HEAP32[$3 + 132 >> 2];
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $1 = $2 + 56 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $2 + 48 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $2 + 40 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $2 + 32 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $2 + 24 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $2 + 16 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $2 = $2 + 8 | 0;
   HEAP8[$2 | 0] = 0;
   HEAP8[$2 + 1 | 0] = 0;
   HEAP8[$2 + 2 | 0] = 0;
   HEAP8[$2 + 3 | 0] = 0;
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   $2 = __stack_pointer - 16 | 0;
   HEAP32[$2 + 12 >> 2] = HEAP32[$3 + 136 >> 2];
   if ((HEAP32[HEAP32[$2 + 12 >> 2] >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 136 >> 2] + 168 | 0, 690336);
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$3 + 128 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 136 >> 2] + 168 | 0, 690425);
    HEAP32[$3 + 140 >> 2] = 0;
    break label$10;
   }
   $2 = $3 + 8 | 0;
   $1 = $3 + 40 | 0;
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ec_pubkey_create_helper(HEAP32[$3 + 136 >> 2], $2, $1, HEAP32[$3 + 128 >> 2])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$3 + 132 >> 2], $1);
   rustsecp256k1_v0_8_1_memczero(HEAP32[$3 + 132 >> 2], 64, (HEAP32[$3 + 4 >> 2] != 0 ^ -1) & 1);
   rustsecp256k1_v0_8_1_scalar_clear($2);
   HEAP32[$3 + 140 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  __stack_pointer = $3 + 144 | 0;
  label$1 : {
   if (HEAP32[$3 + 140 >> 2] == 1) {
    HEAP32[$4 + 80 >> 2] = 692376;
    HEAP32[$4 + 84 >> 2] = 65;
    _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($4 + 8 | 0, $0);
    HEAP32[$4 + 4 >> 2] = 1;
    break label$1;
   }
   HEAP32[$4 + 4 >> 2] = 0;
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 4 >> 2];
 }
 
 function xOnlyPointFromScalar() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 448 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 440 >> 2] = 692344;
  HEAP32[$1 + 444 >> 2] = 32;
  $2 = $1 + 104 | 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 204 >> 2] = 692344;
  $0 = $4 + 8 | 0;
  _ZN13secp256k1_sys7KeyPair3new17h00df1d038dad8685E($0);
  label$1 : {
   if ((rustsecp256k1_v0_8_1_keypair_create(_ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E(), $0) | 0) == 1) {
    $0 = $4 + 104 | 0;
    memcpy($0, $4 + 8 | 0, 96);
    memcpy($2 + 1 | 0, $0, 96);
    HEAP8[$2 | 0] = 0;
    break label$1;
   }
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP8[$2 | 0] = 1;
  }
  __stack_pointer = $4 + 208 | 0;
  label$10 : {
   label$2 : {
    label$3 : {
     if (!(HEAP8[$1 + 104 | 0] & 1)) {
      $0 = $1 + 208 | 0;
      memcpy($0, $1 + 105 | 0, 96);
      $4 = $1 + 8 | 0;
      memcpy($4, $0, 96);
      $2 = $1 + 304 | 0;
      _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($2);
      HEAP32[$1 + 372 >> 2] = 0;
      $0 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
      $3 = __stack_pointer - 128 | 0;
      __stack_pointer = $3;
      HEAP32[$3 + 120 >> 2] = $0;
      HEAP32[$3 + 116 >> 2] = $2;
      HEAP32[$3 + 112 >> 2] = $1 + 372;
      HEAP32[$3 + 108 >> 2] = $4;
      label$11 : {
       if ((HEAP32[$3 + 116 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 120 >> 2] + 168 | 0, 690050);
        HEAP32[$3 + 124 >> 2] = 0;
        break label$11;
       }
       $2 = HEAP32[$3 + 116 >> 2];
       HEAP8[$2 | 0] = 0;
       HEAP8[$2 + 1 | 0] = 0;
       HEAP8[$2 + 2 | 0] = 0;
       HEAP8[$2 + 3 | 0] = 0;
       HEAP8[$2 + 4 | 0] = 0;
       HEAP8[$2 + 5 | 0] = 0;
       HEAP8[$2 + 6 | 0] = 0;
       HEAP8[$2 + 7 | 0] = 0;
       $0 = $2 + 56 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $0 = $2 + 48 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $0 = $2 + 40 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $0 = $2 + 32 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $0 = $2 + 24 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $0 = $2 + 16 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       $0 = $2 + 8 | 0;
       HEAP8[$0 | 0] = 0;
       HEAP8[$0 + 1 | 0] = 0;
       HEAP8[$0 + 2 | 0] = 0;
       HEAP8[$0 + 3 | 0] = 0;
       HEAP8[$0 + 4 | 0] = 0;
       HEAP8[$0 + 5 | 0] = 0;
       HEAP8[$0 + 6 | 0] = 0;
       HEAP8[$0 + 7 | 0] = 0;
       if ((HEAP32[$3 + 108 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 120 >> 2] + 168 | 0, 690748);
        HEAP32[$3 + 124 >> 2] = 0;
        break label$11;
       }
       if (!rustsecp256k1_v0_8_1_keypair_load(HEAP32[$3 + 120 >> 2], 0, $3 + 16 | 0, HEAP32[$3 + 108 >> 2])) {
        HEAP32[$3 + 124 >> 2] = 0;
        break label$11;
       }
       (wasm2js_i32$0 = $3, wasm2js_i32$1 = rustsecp256k1_v0_8_1_extrakeys_ge_even_y($3 + 16 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       if (HEAP32[$3 + 112 >> 2]) {
        HEAP32[HEAP32[$3 + 112 >> 2] >> 2] = HEAP32[$3 + 12 >> 2]
       }
       rustsecp256k1_v0_8_1_xonly_pubkey_save(HEAP32[$3 + 116 >> 2], $3 + 16 | 0);
       HEAP32[$3 + 124 >> 2] = 1;
      }
      __stack_pointer = $3 + 128 | 0;
      HEAP32[$1 + 384 >> 2] = HEAP32[$3 + 124 >> 2];
      HEAP32[$1 + 376 >> 2] = $1 + 384;
      HEAP32[$1 + 380 >> 2] = 655892;
      $2 = HEAP32[$1 + 376 >> 2];
      HEAP32[$1 + 424 >> 2] = $2;
      $0 = HEAP32[$1 + 380 >> 2];
      HEAP32[$1 + 428 >> 2] = $0;
      if ((HEAP32[$2 >> 2] == HEAP32[$0 >> 2] ^ -1) & 1) {
       break label$2
      }
      break label$3;
     }
     $0 = HEAP32[$1 + 108 >> 2];
     HEAP32[$1 + 420 >> 2] = $0;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
     HEAP32[$1 + 4 >> 2] = 0;
     break label$10;
    }
    HEAP32[$1 + 432 >> 2] = 692441;
    HEAP32[$1 + 436 >> 2] = 32;
    _ZN14secp256k1_wasm23x_only_pubkey_serialize17h4d8873bf823986baE($1 + 304 | 0);
    HEAP32[$1 + 4 >> 2] = 1;
    break label$10;
   }
   HEAP8[$1 + 391 | 0] = 0;
   HEAP32[$1 + 400 >> 2] = 0;
   _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$1 + 391 | 0], $2, $0, $1 + 392 | 0, 655960);
   wasm2js_trap();
  }
  __stack_pointer = $1 + 448 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function xOnlyPointFromPoint($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $6 = __stack_pointer - 160 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 136 >> 2] = $0;
  HEAP32[$6 + 152 >> 2] = 692376;
  HEAP32[$6 + 156 >> 2] = 65;
  $5 = $6 - -64 | 0;
  $3 = __stack_pointer - 352 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 340 >> 2] = 692376;
  HEAP32[$3 + 344 >> 2] = $0;
  _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($3);
  HEAP32[$3 + 68 >> 2] = 0;
  _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($3 + 136 | 0, 692376, $0);
  label$1 : {
   if (!(HEAP8[$3 + 136 | 0] & 1)) {
    $0 = $3 + 137 | 0;
    $1 = $0 + 56 | 0;
    $7 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $2 = $3 + 208 | 0;
    $4 = $2 + 56 | 0;
    HEAP32[$4 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$4 + 4 >> 2] = $7;
    $1 = $0 + 48 | 0;
    $8 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $7 = $2 + 48 | 0;
    HEAP32[$7 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$7 + 4 >> 2] = $8;
    $1 = $0 + 40 | 0;
    $9 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $8 = $2 + 40 | 0;
    HEAP32[$8 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$8 + 4 >> 2] = $9;
    $1 = $0 + 32 | 0;
    $10 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $9 = $2 + 32 | 0;
    HEAP32[$9 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$9 + 4 >> 2] = $10;
    $1 = $0 + 24 | 0;
    $11 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $10 = $2 + 24 | 0;
    HEAP32[$10 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$10 + 4 >> 2] = $11;
    $1 = $0 + 16 | 0;
    $12 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $11 = $2 + 16 | 0;
    HEAP32[$11 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$11 + 4 >> 2] = $12;
    $1 = $0 + 8 | 0;
    $12 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$2 + 4 >> 2] = $12;
    $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    HEAP32[$3 + 208 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    HEAP32[$3 + 212 >> 2] = $1;
    $1 = HEAP32[$4 + 4 >> 2];
    $0 = $3 + 72 | 0;
    $12 = $0 + 56 | 0;
    HEAP32[$12 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$12 + 4 >> 2] = $1;
    $1 = HEAP32[$7 + 4 >> 2];
    $4 = $0 + 48 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = HEAP32[$8 + 4 >> 2];
    $4 = $0 + 40 | 0;
    HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = HEAP32[$9 + 4 >> 2];
    $4 = $0 + 32 | 0;
    HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = HEAP32[$10 + 4 >> 2];
    $4 = $0 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = HEAP32[$11 + 4 >> 2];
    $4 = $0 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 8 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = HEAP32[$3 + 212 >> 2];
    HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 208 >> 2];
    HEAP32[$3 + 76 >> 2] = $1;
    _ZN14secp256k1_wasm32x_only_pubkey_from_pubkey_struct17h88155263bed130b4E($5, $3, $3 + 68 | 0, $0);
    break label$1;
   }
   $0 = HEAP32[$3 + 140 >> 2];
   HEAP32[$3 + 348 >> 2] = $0;
   _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
   $1 = $3 + 56 | 0;
   $4 = HEAP32[$1 + 4 >> 2];
   $0 = $3 + 272 | 0;
   $2 = $0 + 56 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $1 = $3 + 48 | 0;
   $7 = HEAP32[$1 + 4 >> 2];
   $4 = $0 + 48 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $1 = $3 + 40 | 0;
   $8 = HEAP32[$1 + 4 >> 2];
   $7 = $0 + 40 | 0;
   HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$7 + 4 >> 2] = $8;
   $1 = $3 + 32 | 0;
   $9 = HEAP32[$1 + 4 >> 2];
   $8 = $0 + 32 | 0;
   HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$8 + 4 >> 2] = $9;
   $1 = $3 + 24 | 0;
   $10 = HEAP32[$1 + 4 >> 2];
   $9 = $0 + 24 | 0;
   HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$9 + 4 >> 2] = $10;
   $1 = $3 + 16 | 0;
   $11 = HEAP32[$1 + 4 >> 2];
   $10 = $0 + 16 | 0;
   HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$10 + 4 >> 2] = $11;
   $1 = $3 + 8 | 0;
   $12 = HEAP32[$1 + 4 >> 2];
   $11 = $0 + 8 | 0;
   HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$11 + 4 >> 2] = $12;
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$3 + 272 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$3 + 276 >> 2] = $0;
   $12 = HEAP32[$3 + 68 >> 2];
   $0 = HEAP32[$3 + 276 >> 2];
   $1 = HEAP32[$3 + 272 >> 2];
   HEAP8[$5 | 0] = $1;
   HEAP8[$5 + 1 | 0] = $1 >>> 8;
   HEAP8[$5 + 2 | 0] = $1 >>> 16;
   HEAP8[$5 + 3 | 0] = $1 >>> 24;
   HEAP8[$5 + 4 | 0] = $0;
   HEAP8[$5 + 5 | 0] = $0 >>> 8;
   HEAP8[$5 + 6 | 0] = $0 >>> 16;
   HEAP8[$5 + 7 | 0] = $0 >>> 24;
   $1 = HEAP32[$2 + 4 >> 2];
   $0 = $5 + 56 | 0;
   $2 = HEAP32[$2 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $1 = HEAP32[$4 + 4 >> 2];
   $0 = $5 + 48 | 0;
   $2 = HEAP32[$4 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $1 = HEAP32[$7 + 4 >> 2];
   $0 = $5 + 40 | 0;
   $2 = HEAP32[$7 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $1 = HEAP32[$8 + 4 >> 2];
   $0 = $5 + 32 | 0;
   $2 = HEAP32[$8 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $1 = HEAP32[$9 + 4 >> 2];
   $0 = $5 + 24 | 0;
   $2 = HEAP32[$9 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $1 = HEAP32[$10 + 4 >> 2];
   $0 = $5 + 16 | 0;
   $2 = HEAP32[$10 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   $1 = HEAP32[$11 + 4 >> 2];
   $0 = $5 + 8 | 0;
   $2 = HEAP32[$11 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   HEAP32[$5 + 64 >> 2] = $12;
  }
  __stack_pointer = $3 + 352 | 0;
  $0 = $5 + 56 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 56 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = $5 + 48 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 48 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = $5 + 40 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 40 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = $5 + 32 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 32 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = $5 + 24 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 24 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = $5 + 16 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = $5 + 8 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $5 = $6 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $0 = HEAP32[$6 + 68 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$6 + 64 >> 2];
  HEAP32[$6 + 4 >> 2] = $0;
  HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 128 >> 2];
  HEAP32[$6 + 144 >> 2] = 692441;
  HEAP32[$6 + 148 >> 2] = 32;
  _ZN14secp256k1_wasm23x_only_pubkey_serialize17h4d8873bf823986baE($6);
  __stack_pointer = $6 + 160 | 0;
  return 1;
 }
 
 function pointMultiply($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $4 = __stack_pointer - 256 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 220 >> 2] = $0;
  HEAP32[$4 + 224 >> 2] = $1;
  HEAP32[$4 + 248 >> 2] = 692376;
  HEAP32[$4 + 252 >> 2] = 65;
  _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($4 + 80 | 0, 692376, $0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP8[$4 + 80 | 0] & 1)) {
      $0 = $4 + 81 | 0;
      $2 = $0 + 56 | 0;
      $6 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $3 = $4 + 152 | 0;
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$5 + 4 >> 2] = $6;
      $2 = $0 + 48 | 0;
      $7 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $6 = $3 + 48 | 0;
      HEAP32[$6 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$6 + 4 >> 2] = $7;
      $2 = $0 + 40 | 0;
      $8 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $7 = $3 + 40 | 0;
      HEAP32[$7 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$7 + 4 >> 2] = $8;
      $2 = $0 + 32 | 0;
      $9 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $8 = $3 + 32 | 0;
      HEAP32[$8 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$8 + 4 >> 2] = $9;
      $2 = $0 + 24 | 0;
      $10 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$9 + 4 >> 2] = $10;
      $2 = $0 + 16 | 0;
      $11 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $10 = $3 + 16 | 0;
      HEAP32[$10 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$10 + 4 >> 2] = $11;
      $2 = $0 + 8 | 0;
      $11 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$3 + 4 >> 2] = $11;
      $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      HEAP32[$4 + 152 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$4 + 156 >> 2] = $2;
      $0 = HEAP32[$5 + 4 >> 2];
      $2 = $4 + 16 | 0;
      $11 = $2 + 56 | 0;
      HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$11 + 4 >> 2] = $0;
      $0 = HEAP32[$6 + 4 >> 2];
      $5 = $2 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$7 + 4 >> 2];
      $5 = $2 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$8 + 4 >> 2];
      $5 = $2 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$9 + 4 >> 2];
      $5 = $2 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$10 + 4 >> 2];
      $5 = $2 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$3 + 4 >> 2];
      $5 = $2 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $0;
      $0 = HEAP32[$4 + 156 >> 2];
      HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 152 >> 2];
      HEAP32[$4 + 20 >> 2] = $0;
      $3 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
      HEAP32[$4 + 240 >> 2] = 692505;
      HEAP32[$4 + 244 >> 2] = 32;
      $0 = __stack_pointer - 144 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 136 >> 2] = $3;
      HEAP32[$0 + 132 >> 2] = $2;
      HEAP32[$0 + 128 >> 2] = 692505;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 >> 2] = 0;
      label$10 : {
       if ((HEAP32[$0 + 132 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 136 >> 2] + 168 | 0, 690050);
        HEAP32[$0 + 140 >> 2] = 0;
        break label$10;
       }
       if ((HEAP32[$0 + 128 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 136 >> 2] + 168 | 0, 690472);
        HEAP32[$0 + 140 >> 2] = 0;
        break label$10;
       }
       rustsecp256k1_v0_8_1_scalar_set_b32($0 + 8 | 0, HEAP32[$0 + 128 >> 2], $0);
       if (HEAP32[$0 >> 2]) {
        $2 = 0
       } else {
        $2 = (rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$0 + 136 >> 2], $0 + 40 | 0, HEAP32[$0 + 132 >> 2]) | 0) != 0
       }
       HEAP32[$0 + 4 >> 2] = $2;
       $2 = HEAP32[$0 + 132 >> 2];
       HEAP8[$2 | 0] = 0;
       HEAP8[$2 + 1 | 0] = 0;
       HEAP8[$2 + 2 | 0] = 0;
       HEAP8[$2 + 3 | 0] = 0;
       HEAP8[$2 + 4 | 0] = 0;
       HEAP8[$2 + 5 | 0] = 0;
       HEAP8[$2 + 6 | 0] = 0;
       HEAP8[$2 + 7 | 0] = 0;
       $3 = $2 + 56 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 48 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 40 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 32 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 24 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $3 = $2 + 16 | 0;
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP8[$3 + 4 | 0] = 0;
       HEAP8[$3 + 5 | 0] = 0;
       HEAP8[$3 + 6 | 0] = 0;
       HEAP8[$3 + 7 | 0] = 0;
       $2 = $2 + 8 | 0;
       HEAP8[$2 | 0] = 0;
       HEAP8[$2 + 1 | 0] = 0;
       HEAP8[$2 + 2 | 0] = 0;
       HEAP8[$2 + 3 | 0] = 0;
       HEAP8[$2 + 4 | 0] = 0;
       HEAP8[$2 + 5 | 0] = 0;
       HEAP8[$2 + 6 | 0] = 0;
       HEAP8[$2 + 7 | 0] = 0;
       if (HEAP32[$0 + 4 >> 2]) {
        label$6 : {
         $2 = __stack_pointer - 176 | 0;
         __stack_pointer = $2;
         HEAP32[$2 + 168 >> 2] = $0 + 40;
         HEAP32[$2 + 164 >> 2] = $0 + 8;
         label$11 : {
          if (rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$2 + 164 >> 2])) {
           HEAP32[$2 + 172 >> 2] = 0;
           break label$11;
          }
          $3 = $2 + 128 | 0;
          rustsecp256k1_v0_8_1_scalar_set_int($3, 0);
          rustsecp256k1_v0_8_1_gej_set_ge($2, HEAP32[$2 + 168 >> 2]);
          rustsecp256k1_v0_8_1_ecmult($2, $2, HEAP32[$2 + 164 >> 2], $3);
          rustsecp256k1_v0_8_1_ge_set_gej(HEAP32[$2 + 168 >> 2], $2);
          HEAP32[$2 + 172 >> 2] = 1;
         }
         __stack_pointer = $2 + 176 | 0;
         if (HEAP32[$2 + 172 >> 2]) {
          rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$0 + 132 >> 2], $0 + 40 | 0);
          break label$6;
         }
         HEAP32[$0 + 4 >> 2] = 0;
        }
       }
       HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 4 >> 2];
      }
      __stack_pointer = $0 + 144 | 0;
      if (HEAP32[$0 + 140 >> 2] == 1) {
       break label$3
      }
      break label$2;
     }
     $0 = HEAP32[$4 + 84 >> 2];
     HEAP32[$4 + 228 >> 2] = $0;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
     HEAP32[$4 + 12 >> 2] = 0;
     break label$1;
    }
    HEAP32[$4 + 232 >> 2] = 692376;
    HEAP32[$4 + 236 >> 2] = 65;
    _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($4 + 16 | 0, $1);
    HEAP32[$4 + 12 >> 2] = 1;
    break label$1;
   }
   HEAP32[$4 + 12 >> 2] = 0;
  }
  __stack_pointer = $4 + 256 | 0;
  return HEAP32[$4 + 12 >> 2];
 }
 
 function privateAdd() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  $1 = HEAP32[173076];
  HEAP32[$0 + 8 >> 2] = 692344;
  HEAP32[$0 + 12 >> 2] = 32;
  HEAP32[$0 + 16 >> 2] = 692505;
  HEAP32[$0 + 20 >> 2] = 32;
  $1 = (rustsecp256k1_v0_8_1_ec_seckey_tweak_add($1) | 0) == 1;
  HEAP8[$0 + 31 | 0] = $1;
  __stack_pointer = $0 + 32 | 0;
  return $1 | 0;
 }
 
 function privateSub() {
  var $0 = 0, $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  $1 = HEAP32[173076];
  HEAP32[$0 + 56 >> 2] = 692505;
  HEAP32[$0 + 60 >> 2] = 32;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ec_seckey_negate($1, 692505)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[$0 >> 2] = $0 + 8;
  HEAP32[$0 + 4 >> 2] = 655892;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 + 40 >> 2] = $1;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 44 >> 2] = $2;
  if (!((HEAP32[$1 >> 2] == HEAP32[$2 >> 2] ^ -1) & 1)) {
   $1 = HEAP32[173076];
   HEAP32[$0 + 48 >> 2] = 692344;
   HEAP32[$0 + 52 >> 2] = 32;
   HEAP32[$0 + 64 >> 2] = 692505;
   HEAP32[$0 + 68 >> 2] = 32;
   $1 = (rustsecp256k1_v0_8_1_ec_seckey_tweak_add($1) | 0) == 1;
   HEAP8[$0 + 79 | 0] = $1;
   __stack_pointer = $0 + 80 | 0;
   return $1 | 0;
  }
  HEAP8[$0 + 15 | 0] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$0 + 15 | 0], $1, $2, $0 + 16 | 0, 655976);
  wasm2js_trap();
 }
 
 function privateNegate() {
  var $0 = 0, $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer + -64 | 0;
  __stack_pointer = $0;
  $1 = HEAP32[173076];
  HEAP32[$0 + 56 >> 2] = 692344;
  HEAP32[$0 + 60 >> 2] = 32;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ec_seckey_negate($1, 692344)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$0 + 8 >> 2] = $0 + 16;
  HEAP32[$0 + 12 >> 2] = 655892;
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 48 >> 2] = $1;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 + 52 >> 2] = $2;
  if (!((HEAP32[$1 >> 2] == HEAP32[$2 >> 2] ^ -1) & 1)) {
   __stack_pointer = $0 - -64 | 0;
   return;
  }
  HEAP8[$0 + 23 | 0] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$0 + 23 | 0], $1, $2, $0 + 24 | 0, 655992);
  wasm2js_trap();
 }
 
 function sign($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 240 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 164 >> 2] = $0;
  _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($1 + 8 | 0);
  label$1 : {
   if (!$0) {
    HEAP32[$1 + 196 >> 2] = 0;
    HEAP32[$1 + 200 >> 2] = 0;
    HEAP32[$1 + 192 >> 2] = 0;
    HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 192 >> 2];
    HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 184 >> 2];
    break label$1;
   }
   HEAP32[$1 + 232 >> 2] = 655714;
   HEAP32[$1 + 236 >> 2] = 32;
   HEAP32[$1 + 76 >> 2] = 655714;
  }
  $4 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
  HEAP32[$1 + 224 >> 2] = 655682;
  HEAP32[$1 + 228 >> 2] = 32;
  HEAP32[$1 + 216 >> 2] = 692344;
  HEAP32[$1 + 220 >> 2] = 32;
  $2 = HEAP32[172583];
  $0 = HEAP32[$1 + 76 >> 2];
  HEAP32[$1 + 204 >> 2] = $0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 104 >> 2] = $4;
  HEAP32[$3 + 100 >> 2] = $1 + 8;
  HEAP32[$3 + 96 >> 2] = 655682;
  HEAP32[$3 + 92 >> 2] = 692344;
  HEAP32[$3 + 88 >> 2] = $2;
  HEAP32[$3 + 84 >> 2] = $0;
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 104 >> 2];
  label$10 : {
   if ((HEAP32[HEAP32[$0 + 12 >> 2] >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 104 >> 2] + 168 | 0, 690336);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$3 + 96 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 104 >> 2] + 168 | 0, 690313);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$3 + 100 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 104 >> 2] + 168 | 0, 690407);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$3 + 92 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 104 >> 2] + 168 | 0, 690425);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$10;
   }
   $2 = $3 + 48 | 0;
   $0 = $3 + 16 | 0;
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ecdsa_sign_inner(HEAP32[$3 + 104 >> 2], $2, $0, 0, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], HEAP32[$3 + 84 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   rustsecp256k1_v0_8_1_ecdsa_signature_save(HEAP32[$3 + 100 >> 2], $2, $0);
   HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 112 | 0;
  HEAP32[$1 + 88 >> 2] = HEAP32[$3 + 108 >> 2];
  HEAP32[$1 + 80 >> 2] = $1 + 88;
  HEAP32[$1 + 84 >> 2] = 655892;
  $2 = HEAP32[$1 + 80 >> 2];
  HEAP32[$1 + 168 >> 2] = $2;
  $0 = HEAP32[$1 + 84 >> 2];
  HEAP32[$1 + 172 >> 2] = $0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[$2 >> 2] == HEAP32[$0 >> 2] ^ -1) & 1)) {
     $0 = HEAP32[173076];
     HEAP32[$1 + 208 >> 2] = 692537;
     HEAP32[$1 + 212 >> 2] = 64;
     $2 = __stack_pointer - 80 | 0;
     __stack_pointer = $2;
     HEAP32[$2 + 72 >> 2] = $0;
     HEAP32[$2 + 68 >> 2] = 692537;
     HEAP32[$2 + 64 >> 2] = $1 + 8;
     label$11 : {
      if ((HEAP32[$2 + 68 >> 2] != 0 ^ -1) & 1) {
       rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 72 >> 2] + 168 | 0, 690282);
       HEAP32[$2 + 76 >> 2] = 0;
       break label$11;
      }
      if ((HEAP32[$2 + 64 >> 2] != 0 ^ -1) & 1) {
       rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 72 >> 2] + 168 | 0, 690254);
       HEAP32[$2 + 76 >> 2] = 0;
       break label$11;
      }
      $0 = $2 + 32 | 0;
      rustsecp256k1_v0_8_1_ecdsa_signature_load(HEAP32[$2 + 72 >> 2], $0, $2, HEAP32[$2 + 64 >> 2]);
      rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$2 + 68 >> 2], $0);
      rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$2 + 68 >> 2] + 32 | 0, $2);
      HEAP32[$2 + 76 >> 2] = 1;
     }
     __stack_pointer = $2 + 80 | 0;
     HEAP32[$1 + 128 >> 2] = HEAP32[$2 + 76 >> 2];
     HEAP32[$1 + 120 >> 2] = $1 + 128;
     HEAP32[$1 + 124 >> 2] = 655892;
     $2 = HEAP32[$1 + 120 >> 2];
     HEAP32[$1 + 176 >> 2] = $2;
     $0 = HEAP32[$1 + 124 >> 2];
     HEAP32[$1 + 180 >> 2] = $0;
     if ((HEAP32[$2 >> 2] == HEAP32[$0 >> 2] ^ -1) & 1) {
      break label$3
     }
     break label$4;
    }
    HEAP8[$1 + 95 | 0] = 0;
    HEAP32[$1 + 104 >> 2] = 0;
    _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$1 + 95 | 0], $2, $0, $1 + 96 | 0, 656008);
    wasm2js_trap();
   }
   __stack_pointer = $1 + 240 | 0;
   return;
  }
  HEAP8[$1 + 135 | 0] = 0;
  HEAP32[$1 + 144 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$1 + 135 | 0], $2, $0, $1 + 136 | 0, 656024);
  wasm2js_trap();
 }
 
 function signRecoverable($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 192 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 124 >> 2] = $0;
  _ZN13secp256k1_sys8recovery20RecoverableSignature3new17h9e7869ccddcd38e7E($1 + 8 | 0);
  label$1 : {
   if (!$0) {
    HEAP32[$1 + 148 >> 2] = 0;
    HEAP32[$1 + 152 >> 2] = 0;
    HEAP32[$1 + 144 >> 2] = 0;
    HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 144 >> 2];
    HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 136 >> 2];
    break label$1;
   }
   HEAP32[$1 + 184 >> 2] = 655714;
   HEAP32[$1 + 188 >> 2] = 32;
   HEAP32[$1 + 76 >> 2] = 655714;
  }
  $2 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
  HEAP32[$1 + 176 >> 2] = 655682;
  HEAP32[$1 + 180 >> 2] = 32;
  HEAP32[$1 + 168 >> 2] = 692344;
  HEAP32[$1 + 172 >> 2] = 32;
  $3 = HEAP32[172583];
  $4 = HEAP32[$1 + 76 >> 2];
  HEAP32[$1 + 156 >> 2] = $4;
  $0 = __stack_pointer - 112 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 104 >> 2] = $2;
  HEAP32[$0 + 100 >> 2] = $1 + 8;
  HEAP32[$0 + 96 >> 2] = 655682;
  HEAP32[$0 + 92 >> 2] = 692344;
  HEAP32[$0 + 88 >> 2] = $3;
  HEAP32[$0 + 84 >> 2] = $4;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 104 >> 2];
  label$10 : {
   if ((HEAP32[HEAP32[$2 + 12 >> 2] >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 104 >> 2] + 168 | 0, 690336);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$0 + 96 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 104 >> 2] + 168 | 0, 690313);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$0 + 100 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 104 >> 2] + 168 | 0, 690407);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$0 + 92 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 104 >> 2] + 168 | 0, 690425);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$10;
   }
   $2 = $0 + 48 | 0;
   $3 = $0 + 16 | 0;
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ecdsa_sign_inner(HEAP32[$0 + 104 >> 2], $2, $3, $0 + 8 | 0, HEAP32[$0 + 96 >> 2], HEAP32[$0 + 92 >> 2], HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_save(HEAP32[$0 + 100 >> 2], $2, $3, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 12 >> 2];
  }
  __stack_pointer = $0 + 112 | 0;
  HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 108 >> 2];
  HEAP32[$1 + 80 >> 2] = $1 + 88;
  HEAP32[$1 + 84 >> 2] = 655892;
  $0 = HEAP32[$1 + 80 >> 2];
  HEAP32[$1 + 128 >> 2] = $0;
  $2 = HEAP32[$1 + 84 >> 2];
  HEAP32[$1 + 132 >> 2] = $2;
  if (!((HEAP32[$0 >> 2] == HEAP32[$2 >> 2] ^ -1) & 1)) {
   HEAP32[$1 + 4 >> 2] = 0;
   $2 = HEAP32[173076];
   HEAP32[$1 + 160 >> 2] = 692537;
   HEAP32[$1 + 164 >> 2] = 64;
   $0 = __stack_pointer - 96 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 88 >> 2] = $2;
   HEAP32[$0 + 84 >> 2] = 692537;
   HEAP32[$0 + 80 >> 2] = $1 + 4;
   HEAP32[$0 + 76 >> 2] = $1 + 8;
   label$11 : {
    if ((HEAP32[$0 + 84 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 88 >> 2] + 168 | 0, 690282);
     HEAP32[$0 + 92 >> 2] = 0;
     break label$11;
    }
    if ((HEAP32[$0 + 76 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 88 >> 2] + 168 | 0, 690254);
     HEAP32[$0 + 92 >> 2] = 0;
     break label$11;
    }
    if ((HEAP32[$0 + 80 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 88 >> 2] + 168 | 0, 690609);
     HEAP32[$0 + 92 >> 2] = 0;
     break label$11;
    }
    $2 = $0 + 40 | 0;
    $3 = $0 + 8 | 0;
    rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_load(HEAP32[$0 + 88 >> 2], $2, $3, HEAP32[$0 + 80 >> 2], HEAP32[$0 + 76 >> 2]);
    rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$0 + 84 >> 2], $2);
    rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$0 + 84 >> 2] + 32 | 0, $3);
    HEAP32[$0 + 92 >> 2] = 1;
   }
   __stack_pointer = $0 + 96 | 0;
   __stack_pointer = $1 + 192 | 0;
   return HEAP32[$1 + 4 >> 2];
  }
  HEAP8[$1 + 95 | 0] = 0;
  HEAP32[$1 + 104 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$1 + 95 | 0], $0, $2, $1 + 96 | 0, 656040);
  wasm2js_trap();
 }
 
 function signSchnorr($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 272 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 184 >> 2] = $0;
  _ZN13secp256k1_sys7KeyPair3new17h00df1d038dad8685E($2);
  label$1 : {
   if (!$0) {
    HEAP32[$2 + 224 >> 2] = 0;
    HEAP32[$2 + 228 >> 2] = 0;
    HEAP32[$2 + 216 >> 2] = 0;
    HEAP32[$2 + 208 >> 2] = HEAP32[$2 + 216 >> 2];
    HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 208 >> 2];
    break label$1;
   }
   HEAP32[$2 + 264 >> 2] = 655714;
   HEAP32[$2 + 268 >> 2] = 32;
   HEAP32[$2 + 100 >> 2] = 655714;
  }
  $0 = HEAP32[$2 + 100 >> 2];
  HEAP32[$2 + 236 >> 2] = $0;
  HEAP32[$2 + 188 >> 2] = $0;
  $4 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
  HEAP32[$2 + 256 >> 2] = 692344;
  HEAP32[$2 + 260 >> 2] = 32;
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = rustsecp256k1_v0_8_1_keypair_create($4, $2)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 104 >> 2] = $2 + 112;
  HEAP32[$2 + 108 >> 2] = 655892;
  $4 = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 192 >> 2] = $4;
  $5 = HEAP32[$2 + 108 >> 2];
  HEAP32[$2 + 196 >> 2] = $5;
  label$3 : {
   label$4 : {
    if (!((HEAP32[$4 >> 2] == HEAP32[$5 >> 2] ^ -1) & 1)) {
     $5 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
     HEAP32[$2 + 240 >> 2] = 692537;
     HEAP32[$2 + 244 >> 2] = 64;
     HEAP32[$2 + 248 >> 2] = 655682;
     HEAP32[$2 + 252 >> 2] = 32;
     HEAP32[$2 + 232 >> 2] = $0;
     $4 = __stack_pointer - 32 | 0;
     __stack_pointer = $4;
     HEAP32[$4 + 28 >> 2] = $5;
     HEAP32[$4 + 24 >> 2] = 692537;
     HEAP32[$4 + 20 >> 2] = 655682;
     HEAP32[$4 + 16 >> 2] = $2;
     HEAP32[$4 + 12 >> 2] = $0;
     $0 = HEAP32[$4 + 24 >> 2];
     $1 = HEAP32[$4 + 20 >> 2];
     $3 = HEAP32[$4 + 16 >> 2];
     $6 = HEAP32[$4 + 12 >> 2];
     $5 = __stack_pointer - 32 | 0;
     __stack_pointer = $5;
     HEAP32[$5 + 28 >> 2] = HEAP32[$4 + 28 >> 2];
     HEAP32[$5 + 24 >> 2] = $0;
     HEAP32[$5 + 20 >> 2] = $1;
     HEAP32[$5 + 16 >> 2] = $3;
     HEAP32[$5 + 12 >> 2] = $6;
     $1 = HEAP32[$5 + 24 >> 2];
     $3 = HEAP32[$5 + 20 >> 2];
     $6 = HEAP32[$5 + 16 >> 2];
     $7 = HEAP32[$5 + 12 >> 2];
     $0 = __stack_pointer - 544 | 0;
     __stack_pointer = $0;
     HEAP32[$0 + 536 >> 2] = HEAP32[$5 + 28 >> 2];
     HEAP32[$0 + 532 >> 2] = $1;
     HEAP32[$0 + 528 >> 2] = $3;
     HEAP32[$0 + 524 >> 2] = 32;
     HEAP32[$0 + 520 >> 2] = $6;
     HEAP32[$0 + 516 >> 2] = 7;
     HEAP32[$0 + 512 >> 2] = $7;
     $1 = $0 + 80 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $3 = $1 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $1 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $1 = $1 + 8 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 1;
     $1 = __stack_pointer - 16 | 0;
     HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 536 >> 2];
     label$10 : {
      if ((HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0 ^ -1) & 1) {
       rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 536 >> 2] + 168 | 0, 690336);
       HEAP32[$0 + 540 >> 2] = 0;
       break label$10;
      }
      if ((HEAP32[$0 + 532 >> 2] != 0 ^ -1) & 1) {
       rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 536 >> 2] + 168 | 0, 690781);
       HEAP32[$0 + 540 >> 2] = 0;
       break label$10;
      }
      if ((!(HEAP32[$0 + 528 >> 2] ? 0 : HEAP32[$0 + 524 >> 2]) ^ -1) & 1) {
       rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 536 >> 2] + 168 | 0, 690795);
       HEAP32[$0 + 540 >> 2] = 0;
       break label$10;
      }
      if ((HEAP32[$0 + 520 >> 2] != 0 ^ -1) & 1) {
       rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 536 >> 2] + 168 | 0, 690748);
       HEAP32[$0 + 540 >> 2] = 0;
       break label$10;
      }
      if (!HEAP32[$0 + 516 >> 2]) {
       HEAP32[$0 + 516 >> 2] = 7
      }
      $1 = $0 + 200 | 0;
      (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_keypair_load(HEAP32[$0 + 536 >> 2], $0 + 480 | 0, $1, HEAP32[$0 + 520 >> 2]) & HEAP32[$0 + 12 >> 2]), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      $3 = __stack_pointer - 16 | 0;
      HEAP32[$3 + 12 >> 2] = $1 + 40;
      if (HEAP32[HEAP32[$3 + 12 >> 2] >> 2] & 1) {
       $1 = $0 + 480 | 0;
       rustsecp256k1_v0_8_1_scalar_negate($1, $1);
      }
      $1 = $0 + 16 | 0;
      rustsecp256k1_v0_8_1_scalar_get_b32($1, $0 + 480 | 0);
      $3 = $0 + 48 | 0;
      rustsecp256k1_v0_8_1_fe_get_b32($3, $0 + 200 | 0);
      $6 = $0 + 80 | 0;
      (wasm2js_i32$0 = $0, wasm2js_i32$1 = (FUNCTION_TABLE[HEAP32[$0 + 516 >> 2]]($6, HEAP32[$0 + 528 >> 2], HEAP32[$0 + 524 >> 2], $1, $3, 691632, 13, HEAP32[$0 + 512 >> 2]) | 0) != 0 & HEAP32[$0 + 12 >> 2]), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      $1 = $0 + 416 | 0;
      rustsecp256k1_v0_8_1_scalar_set_b32($1, $6, 0);
      $3 = (rustsecp256k1_v0_8_1_scalar_is_zero($1) | 0) != 0 ^ -1;
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] & ($3 & 1);
      rustsecp256k1_v0_8_1_scalar_cmov($1, 690552, (HEAP32[$0 + 12 >> 2] != 0 ^ -1) & 1);
      $3 = $0 + 288 | 0;
      rustsecp256k1_v0_8_1_ecmult_gen(HEAP32[$0 + 536 >> 2], $3, $1);
      $1 = $0 + 112 | 0;
      rustsecp256k1_v0_8_1_ge_set_gej($1, $3);
      $3 = __stack_pointer - 16 | 0;
      HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 536 >> 2];
      HEAP32[$3 + 8 >> 2] = $1;
      HEAP32[$3 + 4 >> 2] = 88;
      $1 = $1 + 40 | 0;
      rustsecp256k1_v0_8_1_fe_normalize_var($1);
      $3 = __stack_pointer - 16 | 0;
      HEAP32[$3 + 12 >> 2] = $1;
      if (HEAP32[HEAP32[$3 + 12 >> 2] >> 2] & 1) {
       $1 = $0 + 416 | 0;
       rustsecp256k1_v0_8_1_scalar_negate($1, $1);
      }
      $1 = $0 + 112 | 0;
      rustsecp256k1_v0_8_1_fe_normalize_var($1);
      rustsecp256k1_v0_8_1_fe_get_b32(HEAP32[$0 + 532 >> 2], $1);
      $1 = $0 + 448 | 0;
      rustsecp256k1_v0_8_1_schnorrsig_challenge($1, HEAP32[$0 + 532 >> 2], HEAP32[$0 + 528 >> 2], HEAP32[$0 + 524 >> 2], $0 + 48 | 0);
      $3 = $0 + 480 | 0;
      rustsecp256k1_v0_8_1_scalar_mul($1, $1, $3);
      $6 = $0 + 416 | 0;
      rustsecp256k1_v0_8_1_scalar_add($1, $1, $6);
      rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$0 + 532 >> 2] + 32 | 0, $1);
      rustsecp256k1_v0_8_1_memczero(HEAP32[$0 + 532 >> 2], 64, (HEAP32[$0 + 12 >> 2] != 0 ^ -1) & 1);
      rustsecp256k1_v0_8_1_scalar_clear($6);
      rustsecp256k1_v0_8_1_scalar_clear($3);
      $1 = $0 + 16 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $3 = $1 + 24 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = $1 + 16 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $1 = $1 + 8 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$0 + 540 >> 2] = HEAP32[$0 + 12 >> 2];
     }
     __stack_pointer = $0 + 544 | 0;
     __stack_pointer = $5 + 32 | 0;
     __stack_pointer = $4 + 32 | 0;
     HEAP32[$2 + 152 >> 2] = HEAP32[$0 + 540 >> 2];
     HEAP32[$2 + 144 >> 2] = $2 + 152;
     HEAP32[$2 + 148 >> 2] = 655892;
     $0 = HEAP32[$2 + 144 >> 2];
     HEAP32[$2 + 200 >> 2] = $0;
     $4 = HEAP32[$2 + 148 >> 2];
     HEAP32[$2 + 204 >> 2] = $4;
     if ((HEAP32[$0 >> 2] == HEAP32[$4 >> 2] ^ -1) & 1) {
      break label$3
     }
     break label$4;
    }
    HEAP8[$2 + 119 | 0] = 0;
    HEAP32[$2 + 128 >> 2] = 0;
    _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$2 + 119 | 0], $4, $5, $2 + 120 | 0, 656056);
    wasm2js_trap();
   }
   __stack_pointer = $2 + 272 | 0;
   return;
  }
  HEAP8[$2 + 159 | 0] = 0;
  HEAP32[$2 + 168 >> 2] = 0;
  _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E(HEAPU8[$2 + 159 | 0], $0, $4, $2 + 160 | 0, 656072);
  wasm2js_trap();
 }
 
 function verify($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 320 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 276 >> 2] = $0;
  HEAP32[$4 + 280 >> 2] = $1;
  HEAP32[$4 + 304 >> 2] = 692376;
  HEAP32[$4 + 308 >> 2] = 65;
  _ZN14secp256k1_wasm12pubkey_parse17hc3675eb962ac75d7E($4 + 72 | 0, 692376, $0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP8[$4 + 72 | 0] & 1)) {
      $0 = $4 + 73 | 0;
      $2 = $0 + 56 | 0;
      $6 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $3 = $4 + 144 | 0;
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$5 + 4 >> 2] = $6;
      $2 = $0 + 48 | 0;
      $7 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $6 = $3 + 48 | 0;
      HEAP32[$6 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$6 + 4 >> 2] = $7;
      $2 = $0 + 40 | 0;
      $8 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $7 = $3 + 40 | 0;
      HEAP32[$7 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$7 + 4 >> 2] = $8;
      $2 = $0 + 32 | 0;
      $9 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $8 = $3 + 32 | 0;
      HEAP32[$8 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$8 + 4 >> 2] = $9;
      $2 = $0 + 24 | 0;
      $10 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$9 + 4 >> 2] = $10;
      $2 = $0 + 16 | 0;
      $11 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $10 = $3 + 16 | 0;
      HEAP32[$10 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$10 + 4 >> 2] = $11;
      $2 = $0 + 8 | 0;
      $11 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      HEAP32[$3 + 4 >> 2] = $11;
      $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
      HEAP32[$4 + 144 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      HEAP32[$4 + 148 >> 2] = $2;
      $2 = HEAP32[$5 + 4 >> 2];
      $0 = $4 + 8 | 0;
      $11 = $0 + 56 | 0;
      HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$11 + 4 >> 2] = $2;
      $2 = HEAP32[$6 + 4 >> 2];
      $5 = $0 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $2 = HEAP32[$7 + 4 >> 2];
      $5 = $0 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $2 = HEAP32[$8 + 4 >> 2];
      $5 = $0 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $2 = HEAP32[$9 + 4 >> 2];
      $5 = $0 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $2 = HEAP32[$10 + 4 >> 2];
      $5 = $0 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $2 = HEAP32[$3 + 4 >> 2];
      $0 = $0 + 8 | 0;
      HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$0 + 4 >> 2] = $2;
      $0 = HEAP32[$4 + 148 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 144 >> 2];
      HEAP32[$4 + 12 >> 2] = $0;
      $2 = $4 + 208 | 0;
      _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($2);
      $3 = HEAP32[173076];
      HEAP32[$4 + 296 >> 2] = 692537;
      HEAP32[$4 + 300 >> 2] = 64;
      $0 = __stack_pointer - 96 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 88 >> 2] = $3;
      HEAP32[$0 + 84 >> 2] = $2;
      HEAP32[$0 + 80 >> 2] = 692537;
      HEAP32[$0 + 12 >> 2] = 1;
      HEAP32[$0 + 8 >> 2] = 0;
      label$10 : {
       if ((HEAP32[$0 + 84 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 88 >> 2] + 168 | 0, 690254);
        HEAP32[$0 + 92 >> 2] = 0;
        break label$10;
       }
       if ((HEAP32[$0 + 80 >> 2] != 0 ^ -1) & 1) {
        rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 88 >> 2] + 168 | 0, 690266);
        HEAP32[$0 + 92 >> 2] = 0;
        break label$10;
       }
       $2 = $0 + 8 | 0;
       rustsecp256k1_v0_8_1_scalar_set_b32($0 + 48 | 0, HEAP32[$0 + 80 >> 2], $2);
       HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] & ((HEAP32[$0 + 8 >> 2] != 0 ^ -1) & 1);
       rustsecp256k1_v0_8_1_scalar_set_b32($0 + 16 | 0, HEAP32[$0 + 80 >> 2] + 32 | 0, $2);
       HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] & ((HEAP32[$0 + 8 >> 2] != 0 ^ -1) & 1);
       label$4 : {
        if (HEAP32[$0 + 12 >> 2]) {
         rustsecp256k1_v0_8_1_ecdsa_signature_save(HEAP32[$0 + 84 >> 2], $0 + 48 | 0, $0 + 16 | 0);
         break label$4;
        }
        $2 = HEAP32[$0 + 84 >> 2];
        HEAP8[$2 | 0] = 0;
        HEAP8[$2 + 1 | 0] = 0;
        HEAP8[$2 + 2 | 0] = 0;
        HEAP8[$2 + 3 | 0] = 0;
        HEAP8[$2 + 4 | 0] = 0;
        HEAP8[$2 + 5 | 0] = 0;
        HEAP8[$2 + 6 | 0] = 0;
        HEAP8[$2 + 7 | 0] = 0;
        $3 = $2 + 56 | 0;
        HEAP8[$3 | 0] = 0;
        HEAP8[$3 + 1 | 0] = 0;
        HEAP8[$3 + 2 | 0] = 0;
        HEAP8[$3 + 3 | 0] = 0;
        HEAP8[$3 + 4 | 0] = 0;
        HEAP8[$3 + 5 | 0] = 0;
        HEAP8[$3 + 6 | 0] = 0;
        HEAP8[$3 + 7 | 0] = 0;
        $3 = $2 + 48 | 0;
        HEAP8[$3 | 0] = 0;
        HEAP8[$3 + 1 | 0] = 0;
        HEAP8[$3 + 2 | 0] = 0;
        HEAP8[$3 + 3 | 0] = 0;
        HEAP8[$3 + 4 | 0] = 0;
        HEAP8[$3 + 5 | 0] = 0;
        HEAP8[$3 + 6 | 0] = 0;
        HEAP8[$3 + 7 | 0] = 0;
        $3 = $2 + 40 | 0;
        HEAP8[$3 | 0] = 0;
        HEAP8[$3 + 1 | 0] = 0;
        HEAP8[$3 + 2 | 0] = 0;
        HEAP8[$3 + 3 | 0] = 0;
        HEAP8[$3 + 4 | 0] = 0;
        HEAP8[$3 + 5 | 0] = 0;
        HEAP8[$3 + 6 | 0] = 0;
        HEAP8[$3 + 7 | 0] = 0;
        $3 = $2 + 32 | 0;
        HEAP8[$3 | 0] = 0;
        HEAP8[$3 + 1 | 0] = 0;
        HEAP8[$3 + 2 | 0] = 0;
        HEAP8[$3 + 3 | 0] = 0;
        HEAP8[$3 + 4 | 0] = 0;
        HEAP8[$3 + 5 | 0] = 0;
        HEAP8[$3 + 6 | 0] = 0;
        HEAP8[$3 + 7 | 0] = 0;
        $3 = $2 + 24 | 0;
        HEAP8[$3 | 0] = 0;
        HEAP8[$3 + 1 | 0] = 0;
        HEAP8[$3 + 2 | 0] = 0;
        HEAP8[$3 + 3 | 0] = 0;
        HEAP8[$3 + 4 | 0] = 0;
        HEAP8[$3 + 5 | 0] = 0;
        HEAP8[$3 + 6 | 0] = 0;
        HEAP8[$3 + 7 | 0] = 0;
        $3 = $2 + 16 | 0;
        HEAP8[$3 | 0] = 0;
        HEAP8[$3 + 1 | 0] = 0;
        HEAP8[$3 + 2 | 0] = 0;
        HEAP8[$3 + 3 | 0] = 0;
        HEAP8[$3 + 4 | 0] = 0;
        HEAP8[$3 + 5 | 0] = 0;
        HEAP8[$3 + 6 | 0] = 0;
        HEAP8[$3 + 7 | 0] = 0;
        $2 = $2 + 8 | 0;
        HEAP8[$2 | 0] = 0;
        HEAP8[$2 + 1 | 0] = 0;
        HEAP8[$2 + 2 | 0] = 0;
        HEAP8[$2 + 3 | 0] = 0;
        HEAP8[$2 + 4 | 0] = 0;
        HEAP8[$2 + 5 | 0] = 0;
        HEAP8[$2 + 6 | 0] = 0;
        HEAP8[$2 + 7 | 0] = 0;
       }
       HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 12 >> 2];
      }
      __stack_pointer = $0 + 96 | 0;
      if (!HEAP32[$0 + 92 >> 2]) {
       break label$3
      }
      break label$2;
     }
     $0 = HEAP32[$4 + 76 >> 2];
     HEAP32[$4 + 284 >> 2] = $0;
     _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
     HEAP32[$4 + 4 >> 2] = 0;
     break label$1;
    }
    _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E(4);
    HEAP32[$4 + 4 >> 2] = 0;
    break label$1;
   }
   if (!$1) {
    $0 = __stack_pointer - 96 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 88 >> 2] = HEAP32[173076];
    $1 = $4 + 208 | 0;
    HEAP32[$0 + 84 >> 2] = $1;
    HEAP32[$0 + 80 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = 0;
    label$11 : {
     if ((HEAP32[$0 + 80 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 88 >> 2] + 168 | 0, 690299);
      HEAP32[$0 + 92 >> 2] = 0;
      break label$11;
     }
     $1 = $0 + 16 | 0;
     rustsecp256k1_v0_8_1_ecdsa_signature_load(HEAP32[$0 + 88 >> 2], $0 + 48 | 0, $1, HEAP32[$0 + 80 >> 2]);
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_is_high($1)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     if (HEAP32[$0 + 84 >> 2]) {
      if (HEAP32[$0 + 12 >> 2]) {
       $1 = $0 + 16 | 0;
       rustsecp256k1_v0_8_1_scalar_negate($1, $1);
      }
      rustsecp256k1_v0_8_1_ecdsa_signature_save(HEAP32[$0 + 84 >> 2], $0 + 48 | 0, $0 + 16 | 0);
     }
     HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 12 >> 2];
    }
    __stack_pointer = $0 + 96 | 0;
   }
   $1 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
   HEAP32[$4 + 288 >> 2] = 655682;
   HEAP32[$4 + 292 >> 2] = 32;
   $0 = __stack_pointer - 208 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 200 >> 2] = $1;
   HEAP32[$0 + 196 >> 2] = $4 + 208;
   HEAP32[$0 + 192 >> 2] = 655682;
   HEAP32[$0 + 188 >> 2] = $4 + 8;
   label$12 : {
    if ((HEAP32[$0 + 192 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 200 >> 2] + 168 | 0, 690313);
     HEAP32[$0 + 204 >> 2] = 0;
     break label$12;
    }
    if ((HEAP32[$0 + 196 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 200 >> 2] + 168 | 0, 690254);
     HEAP32[$0 + 204 >> 2] = 0;
     break label$12;
    }
    if ((HEAP32[$0 + 188 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 200 >> 2] + 168 | 0, 690050);
     HEAP32[$0 + 204 >> 2] = 0;
     break label$12;
    }
    rustsecp256k1_v0_8_1_scalar_set_b32($0, HEAP32[$0 + 192 >> 2], 0);
    $2 = $0 + 32 | 0;
    rustsecp256k1_v0_8_1_ecdsa_signature_load(HEAP32[$0 + 200 >> 2], $0 - -64 | 0, $2, HEAP32[$0 + 196 >> 2]);
    $1 = 0;
    label$5 : {
     if (rustsecp256k1_v0_8_1_scalar_is_high($2)) {
      break label$5
     }
     $1 = 0;
     if (!rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$0 + 200 >> 2], $0 + 96 | 0, HEAP32[$0 + 188 >> 2])) {
      break label$5
     }
     $1 = __stack_pointer - 464 | 0;
     __stack_pointer = $1;
     HEAP32[$1 + 456 >> 2] = $0 - -64;
     HEAP32[$1 + 452 >> 2] = $0 + 32;
     HEAP32[$1 + 448 >> 2] = $0 + 96;
     HEAP32[$1 + 444 >> 2] = $0;
     label$13 : {
      label$24 : {
       if (!rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$1 + 456 >> 2])) {
        if (!rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$1 + 452 >> 2])) {
         break label$24
        }
       }
       HEAP32[$1 + 460 >> 2] = 0;
       break label$13;
      }
      $2 = $1 + 368 | 0;
      rustsecp256k1_v0_8_1_scalar_inverse_var($2, HEAP32[$1 + 452 >> 2]);
      $3 = $1 + 336 | 0;
      rustsecp256k1_v0_8_1_scalar_mul($3, $2, HEAP32[$1 + 444 >> 2]);
      $5 = $1 + 304 | 0;
      rustsecp256k1_v0_8_1_scalar_mul($5, $2, HEAP32[$1 + 456 >> 2]);
      $2 = $1 + 136 | 0;
      rustsecp256k1_v0_8_1_gej_set_ge($2, HEAP32[$1 + 448 >> 2]);
      $6 = $1 + 8 | 0;
      rustsecp256k1_v0_8_1_ecmult($6, $2, $5, $3);
      $2 = __stack_pointer - 16 | 0;
      HEAP32[$2 + 12 >> 2] = $6;
      if (HEAP32[HEAP32[$2 + 12 >> 2] + 120 >> 2]) {
       HEAP32[$1 + 460 >> 2] = 0;
       break label$13;
      }
      $2 = $1 + 400 | 0;
      rustsecp256k1_v0_8_1_scalar_get_b32($2, HEAP32[$1 + 456 >> 2]);
      $3 = $1 + 264 | 0;
      rustsecp256k1_v0_8_1_fe_set_b32($3, $2);
      if (rustsecp256k1_v0_8_1_gej_eq_x_var($3, $1 + 8 | 0)) {
       HEAP32[$1 + 460 >> 2] = 1;
       break label$13;
      }
      if ((rustsecp256k1_v0_8_1_fe_cmp_var($1 + 264 | 0) | 0) >= 0) {
       HEAP32[$1 + 460 >> 2] = 0;
       break label$13;
      }
      $2 = $1 + 264 | 0;
      rustsecp256k1_v0_8_1_fe_add($2, 691056);
      if (rustsecp256k1_v0_8_1_gej_eq_x_var($2, $1 + 8 | 0)) {
       HEAP32[$1 + 460 >> 2] = 1;
       break label$13;
      }
      HEAP32[$1 + 460 >> 2] = 0;
     }
     __stack_pointer = $1 + 464 | 0;
     $1 = HEAP32[$1 + 460 >> 2] != 0;
    }
    HEAP32[$0 + 204 >> 2] = $1;
   }
   __stack_pointer = $0 + 208 | 0;
   $0 = HEAP32[$0 + 204 >> 2] == 1;
   HEAP8[$4 + 319 | 0] = $0;
   HEAP32[$4 + 4 >> 2] = $0;
  }
  __stack_pointer = $4 + 320 | 0;
  return HEAP32[$4 + 4 >> 2];
 }
 
 function recover($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 176 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 144 >> 2] = $0;
  HEAP32[$4 + 148 >> 2] = $1;
  $2 = $4 + 8 | 0;
  _ZN13secp256k1_sys8recovery20RecoverableSignature3new17h9e7869ccddcd38e7E($2);
  $5 = HEAP32[173076];
  HEAP32[$4 + 168 >> 2] = 692537;
  HEAP32[$4 + 172 >> 2] = 64;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $5;
  HEAP32[$3 + 84 >> 2] = $2;
  HEAP32[$3 + 80 >> 2] = 692537;
  HEAP32[$3 + 76 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = 1;
  HEAP32[$3 >> 2] = 0;
  label$10 : {
   if ((HEAP32[$3 + 84 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 88 >> 2] + 168 | 0, 690254);
    HEAP32[$3 + 92 >> 2] = 0;
    break label$10;
   }
   if ((HEAP32[$3 + 80 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 88 >> 2] + 168 | 0, 690266);
    HEAP32[$3 + 92 >> 2] = 0;
    break label$10;
   }
   $1 = HEAP32[$3 + 76 >> 2];
   if ((($1 | 0) <= 3 & ($1 | 0) >= 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 88 >> 2] + 168 | 0, 690584);
    HEAP32[$3 + 92 >> 2] = 0;
    break label$10;
   }
   rustsecp256k1_v0_8_1_scalar_set_b32($3 + 40 | 0, HEAP32[$3 + 80 >> 2], $3);
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & ((HEAP32[$3 >> 2] != 0 ^ -1) & 1);
   rustsecp256k1_v0_8_1_scalar_set_b32($3 + 8 | 0, HEAP32[$3 + 80 >> 2] + 32 | 0, $3);
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & ((HEAP32[$3 >> 2] != 0 ^ -1) & 1);
   label$6 : {
    if (HEAP32[$3 + 4 >> 2]) {
     rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_save(HEAP32[$3 + 84 >> 2], $3 + 40 | 0, $3 + 8 | 0, HEAP32[$3 + 76 >> 2]);
     break label$6;
    }
    memset(HEAP32[$3 + 84 >> 2], 65);
   }
   HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  __stack_pointer = $3 + 96 | 0;
  label$1 : {
   if (!HEAP32[$3 + 92 >> 2]) {
    _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E(4);
    HEAP32[$4 + 4 >> 2] = 0;
    break label$1;
   }
   $1 = $4 + 80 | 0;
   _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($1);
   $2 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
   HEAP32[$4 + 160 >> 2] = 655682;
   HEAP32[$4 + 164 >> 2] = 32;
   $3 = __stack_pointer - 224 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 216 >> 2] = $2;
   HEAP32[$3 + 212 >> 2] = $1;
   HEAP32[$3 + 208 >> 2] = $4 + 8;
   HEAP32[$3 + 204 >> 2] = 655682;
   label$11 : {
    if ((HEAP32[$3 + 204 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 216 >> 2] + 168 | 0, 690313);
     HEAP32[$3 + 220 >> 2] = 0;
     break label$11;
    }
    if ((HEAP32[$3 + 208 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 216 >> 2] + 168 | 0, 690407);
     HEAP32[$3 + 220 >> 2] = 0;
     break label$11;
    }
    if ((HEAP32[$3 + 212 >> 2] != 0 ^ -1) & 1) {
     rustsecp256k1_v0_8_1_callback_call(HEAP32[$3 + 216 >> 2] + 168 | 0, 690050);
     HEAP32[$3 + 220 >> 2] = 0;
     break label$11;
    }
    $2 = $3 + 80 | 0;
    $5 = $3 + 48 | 0;
    rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_load(HEAP32[$3 + 216 >> 2], $2, $5, $3 + 12 | 0, HEAP32[$3 + 208 >> 2]);
    $6 = $3 + 16 | 0;
    rustsecp256k1_v0_8_1_scalar_set_b32($6, HEAP32[$3 + 204 >> 2], 0);
    $7 = HEAP32[$3 + 12 >> 2];
    $1 = __stack_pointer - 560 | 0;
    __stack_pointer = $1;
    HEAP32[$1 + 552 >> 2] = $2;
    HEAP32[$1 + 548 >> 2] = $5;
    HEAP32[$1 + 544 >> 2] = $3 + 112;
    HEAP32[$1 + 540 >> 2] = $6;
    HEAP32[$1 + 536 >> 2] = $7;
    label$12 : {
     label$2 : {
      if (!rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$1 + 552 >> 2])) {
       if (!rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$1 + 548 >> 2])) {
        break label$2
       }
      }
      HEAP32[$1 + 556 >> 2] = 0;
      break label$12;
     }
     $2 = $1 + 496 | 0;
     rustsecp256k1_v0_8_1_scalar_get_b32($2, HEAP32[$1 + 552 >> 2]);
     (wasm2js_i32$0 = $1, wasm2js_i32$1 = rustsecp256k1_v0_8_1_fe_set_b32($1 + 456 | 0, $2)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     if (HEAP32[$1 + 536 >> 2] & 2) {
      if ((rustsecp256k1_v0_8_1_fe_cmp_var($1 + 456 | 0) | 0) >= 0) {
       HEAP32[$1 + 556 >> 2] = 0;
       break label$12;
      }
      rustsecp256k1_v0_8_1_fe_add($1 + 456 | 0, 691056);
     }
     if (!rustsecp256k1_v0_8_1_ge_set_xo_var($1 + 368 | 0, $1 + 456 | 0, HEAP32[$1 + 536 >> 2] & 1)) {
      HEAP32[$1 + 556 >> 2] = 0;
      break label$12;
     }
     $6 = $1 + 240 | 0;
     rustsecp256k1_v0_8_1_gej_set_ge($6, $1 + 368 | 0);
     $5 = $1 + 208 | 0;
     rustsecp256k1_v0_8_1_scalar_inverse_var($5, HEAP32[$1 + 552 >> 2]);
     $2 = $1 + 176 | 0;
     rustsecp256k1_v0_8_1_scalar_mul($2, $5, HEAP32[$1 + 540 >> 2]);
     rustsecp256k1_v0_8_1_scalar_negate($2, $2);
     $7 = $1 + 144 | 0;
     rustsecp256k1_v0_8_1_scalar_mul($7, $5, HEAP32[$1 + 548 >> 2]);
     $5 = $1 + 16 | 0;
     rustsecp256k1_v0_8_1_ecmult($5, $6, $7, $2);
     rustsecp256k1_v0_8_1_ge_set_gej_var(HEAP32[$1 + 544 >> 2], $5);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $5;
     HEAP32[$1 + 556 >> 2] = (HEAP32[HEAP32[$2 + 12 >> 2] + 120 >> 2] != 0 ^ -1) & 1;
    }
    __stack_pointer = $1 + 560 | 0;
    if (HEAP32[$1 + 556 >> 2]) {
     rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$3 + 212 >> 2], $3 + 112 | 0);
     HEAP32[$3 + 220 >> 2] = 1;
     break label$11;
    }
    $1 = HEAP32[$3 + 212 >> 2];
    HEAP8[$1 | 0] = 0;
    HEAP8[$1 + 1 | 0] = 0;
    HEAP8[$1 + 2 | 0] = 0;
    HEAP8[$1 + 3 | 0] = 0;
    HEAP8[$1 + 4 | 0] = 0;
    HEAP8[$1 + 5 | 0] = 0;
    HEAP8[$1 + 6 | 0] = 0;
    HEAP8[$1 + 7 | 0] = 0;
    $2 = $1 + 56 | 0;
    HEAP8[$2 | 0] = 0;
    HEAP8[$2 + 1 | 0] = 0;
    HEAP8[$2 + 2 | 0] = 0;
    HEAP8[$2 + 3 | 0] = 0;
    HEAP8[$2 + 4 | 0] = 0;
    HEAP8[$2 + 5 | 0] = 0;
    HEAP8[$2 + 6 | 0] = 0;
    HEAP8[$2 + 7 | 0] = 0;
    $2 = $1 + 48 | 0;
    HEAP8[$2 | 0] = 0;
    HEAP8[$2 + 1 | 0] = 0;
    HEAP8[$2 + 2 | 0] = 0;
    HEAP8[$2 + 3 | 0] = 0;
    HEAP8[$2 + 4 | 0] = 0;
    HEAP8[$2 + 5 | 0] = 0;
    HEAP8[$2 + 6 | 0] = 0;
    HEAP8[$2 + 7 | 0] = 0;
    $2 = $1 + 40 | 0;
    HEAP8[$2 | 0] = 0;
    HEAP8[$2 + 1 | 0] = 0;
    HEAP8[$2 + 2 | 0] = 0;
    HEAP8[$2 + 3 | 0] = 0;
    HEAP8[$2 + 4 | 0] = 0;
    HEAP8[$2 + 5 | 0] = 0;
    HEAP8[$2 + 6 | 0] = 0;
    HEAP8[$2 + 7 | 0] = 0;
    $2 = $1 + 32 | 0;
    HEAP8[$2 | 0] = 0;
    HEAP8[$2 + 1 | 0] = 0;
    HEAP8[$2 + 2 | 0] = 0;
    HEAP8[$2 + 3 | 0] = 0;
    HEAP8[$2 + 4 | 0] = 0;
    HEAP8[$2 + 5 | 0] = 0;
    HEAP8[$2 + 6 | 0] = 0;
    HEAP8[$2 + 7 | 0] = 0;
    $2 = $1 + 24 | 0;
    HEAP8[$2 | 0] = 0;
    HEAP8[$2 + 1 | 0] = 0;
    HEAP8[$2 + 2 | 0] = 0;
    HEAP8[$2 + 3 | 0] = 0;
    HEAP8[$2 + 4 | 0] = 0;
    HEAP8[$2 + 5 | 0] = 0;
    HEAP8[$2 + 6 | 0] = 0;
    HEAP8[$2 + 7 | 0] = 0;
    $2 = $1 + 16 | 0;
    HEAP8[$2 | 0] = 0;
    HEAP8[$2 + 1 | 0] = 0;
    HEAP8[$2 + 2 | 0] = 0;
    HEAP8[$2 + 3 | 0] = 0;
    HEAP8[$2 + 4 | 0] = 0;
    HEAP8[$2 + 5 | 0] = 0;
    HEAP8[$2 + 6 | 0] = 0;
    HEAP8[$2 + 7 | 0] = 0;
    $1 = $1 + 8 | 0;
    HEAP8[$1 | 0] = 0;
    HEAP8[$1 + 1 | 0] = 0;
    HEAP8[$1 + 2 | 0] = 0;
    HEAP8[$1 + 3 | 0] = 0;
    HEAP8[$1 + 4 | 0] = 0;
    HEAP8[$1 + 5 | 0] = 0;
    HEAP8[$1 + 6 | 0] = 0;
    HEAP8[$1 + 7 | 0] = 0;
    HEAP32[$3 + 220 >> 2] = 0;
   }
   __stack_pointer = $3 + 224 | 0;
   if (HEAP32[$3 + 220 >> 2] == 1) {
    HEAP32[$4 + 152 >> 2] = 692376;
    HEAP32[$4 + 156 >> 2] = 65;
    _ZN14secp256k1_wasm16pubkey_serialize17h06781ea3f8451941E($4 + 80 | 0, $0);
    HEAP32[$4 + 4 >> 2] = 1;
    break label$1;
   }
   HEAP32[$4 + 4 >> 2] = 0;
  }
  __stack_pointer = $4 + 176 | 0;
  return HEAP32[$4 + 4 >> 2];
 }
 
 function verifySchnorr() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 240 >> 2] = 692441;
  HEAP32[$3 + 244 >> 2] = 32;
  _ZN14secp256k1_wasm19x_only_pubkey_parse17h41e45a132a1a3178E($3 + 80 | 0, 692441);
  label$1 : {
   if (!(HEAP8[$3 + 80 | 0] & 1)) {
    $5 = $3 + 81 | 0;
    $1 = $5 + 56 | 0;
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $2 = $3 + 152 | 0;
    $8 = $2 + 56 | 0;
    HEAP32[$8 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$8 + 4 >> 2] = $0;
    $1 = $5 + 48 | 0;
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $9 = $2 + 48 | 0;
    HEAP32[$9 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$9 + 4 >> 2] = $0;
    $1 = $5 + 40 | 0;
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $10 = $2 + 40 | 0;
    HEAP32[$10 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$10 + 4 >> 2] = $0;
    $1 = $5 + 32 | 0;
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $11 = $2 + 32 | 0;
    HEAP32[$11 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$11 + 4 >> 2] = $0;
    $1 = $5 + 24 | 0;
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $7 = $2 + 24 | 0;
    HEAP32[$7 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$7 + 4 >> 2] = $0;
    $1 = $5 + 16 | 0;
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$6 + 4 >> 2] = $0;
    $4 = $5 + 8 | 0;
    $0 = HEAPU8[$4 + 4 | 0] | HEAPU8[$4 + 5 | 0] << 8 | (HEAPU8[$4 + 6 | 0] << 16 | HEAPU8[$4 + 7 | 0] << 24);
    $1 = $2 + 8 | 0;
    HEAP32[$1 >> 2] = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
    HEAP32[$1 + 4 >> 2] = $0;
    $0 = HEAPU8[$5 + 4 | 0] | HEAPU8[$5 + 5 | 0] << 8 | (HEAPU8[$5 + 6 | 0] << 16 | HEAPU8[$5 + 7 | 0] << 24);
    HEAP32[$3 + 152 >> 2] = HEAPU8[$5 | 0] | HEAPU8[$5 + 1 | 0] << 8 | (HEAPU8[$5 + 2 | 0] << 16 | HEAPU8[$5 + 3 | 0] << 24);
    HEAP32[$3 + 156 >> 2] = $0;
    $2 = HEAP32[$8 + 4 >> 2];
    $4 = $3 + 16 | 0;
    $0 = $4 + 56 | 0;
    HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $2 = HEAP32[$9 + 4 >> 2];
    $0 = $4 + 48 | 0;
    HEAP32[$0 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $2 = HEAP32[$10 + 4 >> 2];
    $0 = $4 + 40 | 0;
    HEAP32[$0 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $2 = HEAP32[$11 + 4 >> 2];
    $0 = $4 + 32 | 0;
    HEAP32[$0 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $2 = HEAP32[$7 + 4 >> 2];
    $0 = $4 + 24 | 0;
    HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $2 = HEAP32[$6 + 4 >> 2];
    $0 = $4 + 16 | 0;
    HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $4 + 8 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $0 = HEAP32[$3 + 156 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 152 >> 2];
    HEAP32[$3 + 20 >> 2] = $0;
    $2 = _ZN14secp256k1_wasm11get_context17haccd032d2df2d4c4E();
    HEAP32[$3 + 232 >> 2] = 692537;
    HEAP32[$3 + 236 >> 2] = 64;
    HEAP32[$3 + 224 >> 2] = 655682;
    HEAP32[$3 + 228 >> 2] = 32;
    $0 = __stack_pointer - 608 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 600 >> 2] = $2;
    HEAP32[$0 + 596 >> 2] = 692537;
    HEAP32[$0 + 592 >> 2] = 655682;
    HEAP32[$0 + 588 >> 2] = 32;
    HEAP32[$0 + 584 >> 2] = $4;
    label$10 : {
     if ((HEAP32[$0 + 596 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 600 >> 2] + 168 | 0, 690781);
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     if ((!(HEAP32[$0 + 592 >> 2] ? 0 : HEAP32[$0 + 588 >> 2]) ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 600 >> 2] + 168 | 0, 690795);
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     if ((HEAP32[$0 + 584 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 600 >> 2] + 168 | 0, 690050);
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     if (!rustsecp256k1_v0_8_1_fe_set_b32($0 + 136 | 0, HEAP32[$0 + 596 >> 2])) {
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     rustsecp256k1_v0_8_1_scalar_set_b32($0 + 552 | 0, HEAP32[$0 + 596 >> 2] + 32 | 0, $0 + 12 | 0);
     if (HEAP32[$0 + 12 >> 2]) {
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     if (!rustsecp256k1_v0_8_1_xonly_pubkey_load(HEAP32[$0 + 600 >> 2], $0 + 304 | 0, HEAP32[$0 + 584 >> 2])) {
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     $1 = $0 + 16 | 0;
     $2 = $0 + 304 | 0;
     rustsecp256k1_v0_8_1_fe_get_b32($1, $2);
     $6 = $0 + 520 | 0;
     rustsecp256k1_v0_8_1_schnorrsig_challenge($6, HEAP32[$0 + 596 >> 2], HEAP32[$0 + 592 >> 2], HEAP32[$0 + 588 >> 2], $1);
     rustsecp256k1_v0_8_1_scalar_negate($6, $6);
     $1 = $0 + 176 | 0;
     rustsecp256k1_v0_8_1_gej_set_ge($1, $2);
     $2 = $0 + 392 | 0;
     rustsecp256k1_v0_8_1_ecmult($2, $1, $6, $0 + 552 | 0);
     $1 = $0 + 48 | 0;
     rustsecp256k1_v0_8_1_ge_set_gej_var($1, $2);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $1;
     if (HEAP32[HEAP32[$2 + 12 >> 2] + 80 >> 2]) {
      HEAP32[$0 + 604 >> 2] = 0;
      break label$10;
     }
     $1 = $0 + 88 | 0;
     rustsecp256k1_v0_8_1_fe_normalize_var($1);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $1;
     if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2] & 1) {
      $7 = 0
     } else {
      $7 = (rustsecp256k1_v0_8_1_fe_equal_var($0 + 136 | 0, $0 + 48 | 0) | 0) != 0
     }
     HEAP32[$0 + 604 >> 2] = $7;
    }
    __stack_pointer = $0 + 608 | 0;
    $0 = HEAP32[$0 + 604 >> 2] == 1;
    HEAP8[$3 + 255 | 0] = $0;
    HEAP32[$3 + 12 >> 2] = $0;
    break label$1;
   }
   $0 = HEAP32[$3 + 84 >> 2];
   HEAP32[$3 + 220 >> 2] = $0;
   _ZN14secp256k1_wasm11throw_error17hede52bbe73c352b2E($0 | 0);
   HEAP32[$3 + 12 >> 2] = 0;
  }
  __stack_pointer = $3 + 256 | 0;
  return HEAP32[$3 + 12 >> 2];
 }
 
 function _ZN4core6result19Result$LT$T$C$E$GT$11map_or_else17h7456f63c1d71384fE($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $2 = __stack_pointer - 160 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 143 | 0] = 1;
  HEAP8[$2 + 142 | 0] = 1;
  label$1 : {
   if (!(HEAP8[$0 | 0] & 1)) {
    $0 = $0 + 1 | 0;
    $1 = $0 + 56 | 0;
    $5 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $4 = $2 + 8 | 0;
    $3 = $4 + 56 | 0;
    HEAP32[$3 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$3 + 4 >> 2] = $5;
    $1 = $0 + 48 | 0;
    $6 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $5 = $4 + 48 | 0;
    HEAP32[$5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$5 + 4 >> 2] = $6;
    $1 = $0 + 40 | 0;
    $7 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $6 = $4 + 40 | 0;
    HEAP32[$6 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$6 + 4 >> 2] = $7;
    $1 = $0 + 32 | 0;
    $8 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $7 = $4 + 32 | 0;
    HEAP32[$7 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$7 + 4 >> 2] = $8;
    $1 = $0 + 24 | 0;
    $9 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $8 = $4 + 24 | 0;
    HEAP32[$8 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$8 + 4 >> 2] = $9;
    $1 = $0 + 16 | 0;
    $10 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $9 = $4 + 16 | 0;
    HEAP32[$9 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$9 + 4 >> 2] = $10;
    $1 = $0 + 8 | 0;
    $10 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $4 = $4 + 8 | 0;
    HEAP32[$4 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$4 + 4 >> 2] = $10;
    $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    HEAP32[$2 + 8 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    HEAP32[$2 + 12 >> 2] = $1;
    HEAP8[$2 + 142 | 0] = 0;
    $1 = HEAP32[$3 + 4 >> 2];
    $0 = $2 + 72 | 0;
    $10 = $0 + 56 | 0;
    HEAP32[$10 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$10 + 4 >> 2] = $1;
    $1 = HEAP32[$5 + 4 >> 2];
    $3 = $0 + 48 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $1 = HEAP32[$6 + 4 >> 2];
    $3 = $0 + 40 | 0;
    HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $1 = HEAP32[$7 + 4 >> 2];
    $3 = $0 + 32 | 0;
    HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $1 = HEAP32[$8 + 4 >> 2];
    $3 = $0 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $1 = HEAP32[$9 + 4 >> 2];
    $3 = $0 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $1 = HEAP32[$4 + 4 >> 2];
    $0 = $0 + 8 | 0;
    HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 76 >> 2] = $0;
    HEAP32[$2 + 4 >> 2] = 1;
    break label$1;
   }
   $0 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 156 >> 2] = $0;
   HEAP8[$2 + 143 | 0] = 0;
   HEAP32[$2 + 136 >> 2] = $0;
   HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = HEAP32[$2 + 136 >> 2];
   HEAP32[$2 + 4 >> 2] = 0;
  }
  label$3 : {
   if (!(HEAP8[$2 + 142 | 0] & 1)) {
    break label$3
   }
  }
  label$4 : {
   if (!(HEAP8[$2 + 143 | 0] & 1)) {
    break label$4
   }
  }
  __stack_pointer = $2 + 160 | 0;
  return HEAP32[$2 + 4 >> 2];
 }
 
 function _ZN13secp256k1_sys9PublicKey3new17h336810221dfe46b9E($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = __stack_pointer + -64 | 0;
  __stack_pointer = $7;
  HEAP8[$7 | 0] = 0;
  HEAP8[$7 + 1 | 0] = 0;
  HEAP8[$7 + 2 | 0] = 0;
  HEAP8[$7 + 3 | 0] = 0;
  HEAP8[$7 + 4 | 0] = 0;
  HEAP8[$7 + 5 | 0] = 0;
  HEAP8[$7 + 6 | 0] = 0;
  HEAP8[$7 + 7 | 0] = 0;
  $2 = $7 + 56 | 0;
  $1 = $2;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $3 = $7 + 48 | 0;
  $1 = $3;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $4 = $7 + 40 | 0;
  $1 = $4;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $5 = $7 + 32 | 0;
  $1 = $5;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $6 = $7 + 24 | 0;
  $1 = $6;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $8 = $7 + 16 | 0;
  $1 = $8;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $1 = $7 + 8 | 0;
  HEAP8[$1 | 0] = 0;
  HEAP8[$1 + 1 | 0] = 0;
  HEAP8[$1 + 2 | 0] = 0;
  HEAP8[$1 + 3 | 0] = 0;
  HEAP8[$1 + 4 | 0] = 0;
  HEAP8[$1 + 5 | 0] = 0;
  HEAP8[$1 + 6 | 0] = 0;
  HEAP8[$1 + 7 | 0] = 0;
  $10 = HEAPU8[$7 + 4 | 0] | HEAPU8[$7 + 5 | 0] << 8 | (HEAPU8[$7 + 6 | 0] << 16 | HEAPU8[$7 + 7 | 0] << 24);
  $9 = HEAPU8[$7 | 0] | HEAPU8[$7 + 1 | 0] << 8 | (HEAPU8[$7 + 2 | 0] << 16 | HEAPU8[$7 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $9;
  HEAP8[$0 + 1 | 0] = $9 >>> 8;
  HEAP8[$0 + 2 | 0] = $9 >>> 16;
  HEAP8[$0 + 3 | 0] = $9 >>> 24;
  HEAP8[$0 + 4 | 0] = $10;
  HEAP8[$0 + 5 | 0] = $10 >>> 8;
  HEAP8[$0 + 6 | 0] = $10 >>> 16;
  HEAP8[$0 + 7 | 0] = $10 >>> 24;
  $9 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $2 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $10 = $0 + 56 | 0;
  HEAP8[$10 | 0] = $9;
  HEAP8[$10 + 1 | 0] = $9 >>> 8;
  HEAP8[$10 + 2 | 0] = $9 >>> 16;
  HEAP8[$10 + 3 | 0] = $9 >>> 24;
  HEAP8[$10 + 4 | 0] = $2;
  HEAP8[$10 + 5 | 0] = $2 >>> 8;
  HEAP8[$10 + 6 | 0] = $2 >>> 16;
  HEAP8[$10 + 7 | 0] = $2 >>> 24;
  $2 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $3 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $9 = $0 + 48 | 0;
  HEAP8[$9 | 0] = $2;
  HEAP8[$9 + 1 | 0] = $2 >>> 8;
  HEAP8[$9 + 2 | 0] = $2 >>> 16;
  HEAP8[$9 + 3 | 0] = $2 >>> 24;
  HEAP8[$9 + 4 | 0] = $3;
  HEAP8[$9 + 5 | 0] = $3 >>> 8;
  HEAP8[$9 + 6 | 0] = $3 >>> 16;
  HEAP8[$9 + 7 | 0] = $3 >>> 24;
  $3 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
  $4 = HEAPU8[$4 + 4 | 0] | HEAPU8[$4 + 5 | 0] << 8 | (HEAPU8[$4 + 6 | 0] << 16 | HEAPU8[$4 + 7 | 0] << 24);
  $2 = $0 + 40 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $4 = HEAPU8[$5 | 0] | HEAPU8[$5 + 1 | 0] << 8 | (HEAPU8[$5 + 2 | 0] << 16 | HEAPU8[$5 + 3 | 0] << 24);
  $5 = HEAPU8[$5 + 4 | 0] | HEAPU8[$5 + 5 | 0] << 8 | (HEAPU8[$5 + 6 | 0] << 16 | HEAPU8[$5 + 7 | 0] << 24);
  $3 = $0 + 32 | 0;
  HEAP8[$3 | 0] = $4;
  HEAP8[$3 + 1 | 0] = $4 >>> 8;
  HEAP8[$3 + 2 | 0] = $4 >>> 16;
  HEAP8[$3 + 3 | 0] = $4 >>> 24;
  HEAP8[$3 + 4 | 0] = $5;
  HEAP8[$3 + 5 | 0] = $5 >>> 8;
  HEAP8[$3 + 6 | 0] = $5 >>> 16;
  HEAP8[$3 + 7 | 0] = $5 >>> 24;
  $5 = HEAPU8[$6 | 0] | HEAPU8[$6 + 1 | 0] << 8 | (HEAPU8[$6 + 2 | 0] << 16 | HEAPU8[$6 + 3 | 0] << 24);
  $6 = HEAPU8[$6 + 4 | 0] | HEAPU8[$6 + 5 | 0] << 8 | (HEAPU8[$6 + 6 | 0] << 16 | HEAPU8[$6 + 7 | 0] << 24);
  $4 = $0 + 24 | 0;
  HEAP8[$4 | 0] = $5;
  HEAP8[$4 + 1 | 0] = $5 >>> 8;
  HEAP8[$4 + 2 | 0] = $5 >>> 16;
  HEAP8[$4 + 3 | 0] = $5 >>> 24;
  HEAP8[$4 + 4 | 0] = $6;
  HEAP8[$4 + 5 | 0] = $6 >>> 8;
  HEAP8[$4 + 6 | 0] = $6 >>> 16;
  HEAP8[$4 + 7 | 0] = $6 >>> 24;
  $6 = HEAPU8[$8 | 0] | HEAPU8[$8 + 1 | 0] << 8 | (HEAPU8[$8 + 2 | 0] << 16 | HEAPU8[$8 + 3 | 0] << 24);
  $8 = HEAPU8[$8 + 4 | 0] | HEAPU8[$8 + 5 | 0] << 8 | (HEAPU8[$8 + 6 | 0] << 16 | HEAPU8[$8 + 7 | 0] << 24);
  $5 = $0 + 16 | 0;
  HEAP8[$5 | 0] = $6;
  HEAP8[$5 + 1 | 0] = $6 >>> 8;
  HEAP8[$5 + 2 | 0] = $6 >>> 16;
  HEAP8[$5 + 3 | 0] = $6 >>> 24;
  HEAP8[$5 + 4 | 0] = $8;
  HEAP8[$5 + 5 | 0] = $8 >>> 8;
  HEAP8[$5 + 6 | 0] = $8 >>> 16;
  HEAP8[$5 + 7 | 0] = $8 >>> 24;
  $8 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $6 = $0 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  HEAP8[$6 | 0] = $0;
  HEAP8[$6 + 1 | 0] = $0 >>> 8;
  HEAP8[$6 + 2 | 0] = $0 >>> 16;
  HEAP8[$6 + 3 | 0] = $0 >>> 24;
  HEAP8[$6 + 4 | 0] = $8;
  HEAP8[$6 + 5 | 0] = $8 >>> 8;
  HEAP8[$6 + 6 | 0] = $8 >>> 16;
  HEAP8[$6 + 7 | 0] = $8 >>> 24;
  __stack_pointer = $7 - -64 | 0;
 }
 
 function _ZN13secp256k1_sys7KeyPair3new17h00df1d038dad8685E($0) {
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  memset($1, 96);
  memcpy($0, $1, 96);
  __stack_pointer = $1 + 96 | 0;
 }
 
 function rustsecp256k1_v0_8_1_default_illegal_callback_fn($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 64 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  _ZN4core5slice3raw14from_raw_parts17h272fd0f4fedaeff3E($2 + 8 | 0, $0, _ZN13secp256k1_sys6strlen17ha2d99f17160497bcE($0));
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 72 >> 2] = $1;
  HEAP32[$2 + 76 >> 2] = $0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 >> 2] = $1;
  $0 = HEAP32[$2 >> 2];
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $0;
  _ZN4core3fmt10ArgumentV111new_display17h286b8028a3b2f57bE($2 + 16 | 0, $2 + 24 | 0);
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 60 >> 2] = $0;
  $0 = $2 + 32 | 0;
  _ZN4core3fmt9Arguments6new_v117h6a5baf10cf6c9acbE($0, 656220, $2 + 56 | 0);
  _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($0, 656228);
  wasm2js_trap();
 }
 
 function _ZN13secp256k1_sys6strlen17ha2d99f17160497bcE($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 16 >> 2] = 0;
  while (1) {
   if (!HEAPU8[HEAP32[$1 + 12 >> 2]]) {
    __stack_pointer = $1 + 32 | 0;
    return HEAP32[$1 + 16 >> 2];
   }
   $0 = HEAP32[$1 + 16 >> 2] + 1 | 0;
   if ($0) {
    HEAP32[$1 + 16 >> 2] = $0;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 + 20 >> 2] = $0;
    HEAP32[$1 + 24 >> 2] = 1;
    HEAP32[$1 + 28 >> 2] = $0 + 1;
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 28 >> 2];
    continue;
   }
   break;
  };
  _ZN4core9panicking5panic17h2f041bf6aa990dfdE(656336, 28, 656320);
  wasm2js_trap();
 }
 
 function rustsecp256k1_v0_8_1_default_error_callback_fn($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 64 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  _ZN4core5slice3raw14from_raw_parts17h272fd0f4fedaeff3E($2 + 8 | 0, $0, _ZN13secp256k1_sys6strlen17ha2d99f17160497bcE($0));
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 72 >> 2] = $1;
  HEAP32[$2 + 76 >> 2] = $0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 >> 2] = $1;
  $0 = HEAP32[$2 >> 2];
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $0;
  _ZN4core3fmt10ArgumentV111new_display17h286b8028a3b2f57bE($2 + 16 | 0, $2 + 24 | 0);
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 60 >> 2] = $0;
  $0 = $2 + 32 | 0;
  _ZN4core3fmt9Arguments6new_v117h6a5baf10cf6c9acbE($0, 656296, $2 + 56 | 0);
  _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($0, 656304);
  wasm2js_trap();
 }
 
 function _ZN4core9panicking13assert_failed17h4c4b4e4096835e81E($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $1;
  HEAP32[$5 + 16 >> 2] = $2;
  HEAP8[$5 + 23 | 0] = $0;
  $1 = $3 + 16 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $1 = $5 + 24 | 0;
  $6 = $1 + 16 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $2 = $3 + 8 | 0;
  $7 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $6 = $1 + 8 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $2;
  $2 = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 24 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 28 >> 2] = $2;
  _ZN4core9panicking19assert_failed_inner17h2aa5e8e7fe201c6eE($0, $5 + 12 | 0, 656380, $5 + 16 | 0, 656380, $1, $4);
  wasm2js_trap();
 }
 
 function _ZN4core5slice3raw14from_raw_parts17h272fd0f4fedaeff3E($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 24 >> 2] = $2;
  HEAP32[$3 + 28 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $2;
  $1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = HEAP32[$3 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 >> 2] = $1;
 }
 
 function _ZN4core3ptr28drop_in_place$LT$$RF$i32$GT$17hf450025c00523291E($0) {
  $0 = $0 | 0;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 }
 
 function _ZN13secp256k1_sys8recovery20RecoverableSignature3new17h9e7869ccddcd38e7E($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  $2 = $1 + 15 | 0;
  memset($2, 65);
  memcpy($0, $2, 65);
  __stack_pointer = $1 + 80 | 0;
 }
 
 function _ZN42_$LT$$RF$T$u20$as$u20$core__fmt__Debug$GT$3fmt17hca523a2a619bfcbaE($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = $1;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!((HEAPU8[$1 + 24 | 0] & 16) >>> 4 | 0)) {
      if ((HEAPU8[$1 + 24 | 0] & 32) >>> 5 | 0) {
       break label$3
      }
      break label$4;
     }
     (wasm2js_i32$0 = $2, wasm2js_i32$1 = _ZN4core3fmt3num53_$LT$impl$u20$core__fmt__LowerHex$u20$for$u20$i32$GT$3fmt17h052b0c4abd00a848E($0, $1) & 1), HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
     break label$2;
    }
    $0 = HEAP32[$0 >> 2];
    $4 = ($0 | 0) >= 0;
    (wasm2js_i32$0 = $2, wasm2js_i32$1 = _ZN4core3fmt3num3imp7fmt_u6417h4efdfe2e2910c8baE($4 ? $0 : 0 - $0 | 0, $4 ? 0 : 0 - (($0 >> 31) + (($0 | 0) != 0) | 0) | 0, $4, $1) & 1), HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
    break label$2;
   }
   (wasm2js_i32$0 = $2, wasm2js_i32$1 = _ZN4core3fmt3num53_$LT$impl$u20$core__fmt__UpperHex$u20$for$u20$i32$GT$3fmt17h70e0e82254dfc07cE($0, $1) & 1), HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
  }
  __stack_pointer = $2 + 16 | 0;
  __stack_pointer = $3 + 16 | 0;
  return HEAP8[$2 + 7 | 0] & 1;
 }
 
 function _ZN42_$LT$$RF$T$u20$as$u20$core__fmt__Debug$GT$3fmt17he25d25258bb04061E($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = $1;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!((HEAPU8[$1 + 24 | 0] & 16) >>> 4 | 0)) {
      if ((HEAPU8[$1 + 24 | 0] & 32) >>> 5 | 0) {
       break label$3
      }
      break label$4;
     }
     (wasm2js_i32$0 = $2, wasm2js_i32$1 = _ZN4core3fmt3num53_$LT$impl$u20$core__fmt__LowerHex$u20$for$u20$i32$GT$3fmt17h052b0c4abd00a848E($0, $1) & 1), HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
     break label$2;
    }
    (wasm2js_i32$0 = $2, wasm2js_i32$1 = _ZN4core3fmt3num3imp52_$LT$impl$u20$core__fmt__Display$u20$for$u20$u32$GT$3fmt17h92423c436fb8eb6cE($0, $1) & 1), HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
    break label$2;
   }
   (wasm2js_i32$0 = $2, wasm2js_i32$1 = _ZN4core3fmt3num53_$LT$impl$u20$core__fmt__UpperHex$u20$for$u20$i32$GT$3fmt17h70e0e82254dfc07cE($0, $1) & 1), HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
  }
  __stack_pointer = $2 + 16 | 0;
  __stack_pointer = $3 + 16 | 0;
  return HEAP8[$2 + 7 | 0] & 1;
 }
 
 function _ZN44_$LT$$RF$T$u20$as$u20$core__fmt__Display$GT$3fmt17h3b17872c4203a65fE($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
  $0 = _ZN4core3fmt9Formatter3pad17hc8670a09b26e6217E($1, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 & 1;
 }
 
 function _ZN4core3fmt10ArgumentV111new_display17h286b8028a3b2f57bE($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = 5;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = 5;
  $1 = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = $1;
 }
 
 function _ZN4core3fmt9Arguments6new_v117h6a5baf10cf6c9acbE($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 48 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = 1;
  HEAP32[$3 + 56 >> 2] = $2;
  HEAP32[$3 + 60 >> 2] = 1;
  HEAP8[$3 + 15 | 0] = 0;
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   HEAP32[$3 + 40 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 12 >> 2] = 1;
   $1 = HEAP32[$3 + 44 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = $2;
   HEAP32[$0 + 20 >> 2] = 1;
   __stack_pointer = $3 - -64 | 0;
   return;
  }
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 40 >> 2] = 656408;
  HEAP32[$0 + 44 >> 2] = 1;
  HEAP32[$0 + 32 >> 2] = 0;
  $1 = $3 + 16 | 0;
  HEAP32[$1 + 8 >> 2] = 656408;
  HEAP32[$1 + 12 >> 2] = 1;
  $2 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 16 >> 2] = 656524;
  HEAP32[$1 + 20 >> 2] = 0;
  __stack_pointer = $0 + 48 | 0;
  _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($1, 656492);
  wasm2js_trap();
 }
 
 function rustsecp256k1_v0_8_1_callback_call($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[$0 >> 2]](HEAP32[$2 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_context_preallocated_size($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = 192;
  label$1 : {
   if ((HEAP32[$1 + 8 >> 2] & 255) != 1) {
    rustsecp256k1_v0_8_1_callback_call(690028, 690036);
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ecmult_gen_blind($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 384 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 380 >> 2] = $0;
  HEAP32[$4 + 376 >> 2] = $1;
  label$1 : {
   if (!HEAP32[$4 + 376 >> 2]) {
    rustsecp256k1_v0_8_1_gej_set_ge(HEAP32[$4 + 380 >> 2] + 40 | 0, 691152);
    $1 = HEAP32[$4 + 380 >> 2] + 40 | 0;
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$4 + 380 >> 2] + 40;
    HEAP32[$0 + 8 >> 2] = $1;
    HEAP32[HEAP32[$0 + 12 >> 2] + 120 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] + 120 >> 2];
    $1 = HEAP32[$0 + 8 >> 2];
    $3 = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 12 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $3 = $1 + 32 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 32 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $3 = $1 + 24 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $3 = $1 + 16 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $1 = $1 + 8 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $1 = HEAP32[$0 + 8 >> 2] + 40 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 12 >> 2] + 40 | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $3 = $1 + 32 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 32 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $3 = $1 + 24 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $3 = $1 + 16 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $1 = $1 + 8 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $1 = HEAP32[$0 + 8 >> 2] + 80 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 12 >> 2] + 80 | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $3 = $1 + 32 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 32 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $3 = $1 + 24 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $3 = $1 + 16 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $1 = $1 + 8 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    rustsecp256k1_v0_8_1_fe_normalize_weak(HEAP32[$0 + 12 >> 2] + 40 | 0);
    rustsecp256k1_v0_8_1_fe_negate(HEAP32[$0 + 12 >> 2] + 40 | 0, HEAP32[$0 + 12 >> 2] + 40 | 0, 1);
    __stack_pointer = $0 + 16 | 0;
    rustsecp256k1_v0_8_1_scalar_set_int(HEAP32[$4 + 380 >> 2] + 8 | 0, 1);
    break label$1;
   }
   rustsecp256k1_v0_8_1_scalar_get_b32($4, HEAP32[$4 + 380 >> 2] + 8 | 0);
   $1 = HEAP32[$4 + 376 >> 2];
   $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $0 = $4 + 32 | 0;
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP8[$0 + 4 | 0] = $3;
   HEAP8[$0 + 5 | 0] = $3 >>> 8;
   HEAP8[$0 + 6 | 0] = $3 >>> 16;
   HEAP8[$0 + 7 | 0] = $3 >>> 24;
   $2 = $1 + 24 | 0;
   $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   $5 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $2 = $0 + 24 | 0;
   HEAP8[$2 | 0] = $3;
   HEAP8[$2 + 1 | 0] = $3 >>> 8;
   HEAP8[$2 + 2 | 0] = $3 >>> 16;
   HEAP8[$2 + 3 | 0] = $3 >>> 24;
   HEAP8[$2 + 4 | 0] = $5;
   HEAP8[$2 + 5 | 0] = $5 >>> 8;
   HEAP8[$2 + 6 | 0] = $5 >>> 16;
   HEAP8[$2 + 7 | 0] = $5 >>> 24;
   $2 = $1 + 16 | 0;
   $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   $5 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $2 = $0 + 16 | 0;
   HEAP8[$2 | 0] = $3;
   HEAP8[$2 + 1 | 0] = $3 >>> 8;
   HEAP8[$2 + 2 | 0] = $3 >>> 16;
   HEAP8[$2 + 3 | 0] = $3 >>> 24;
   HEAP8[$2 + 4 | 0] = $5;
   HEAP8[$2 + 5 | 0] = $5 >>> 8;
   HEAP8[$2 + 6 | 0] = $5 >>> 16;
   HEAP8[$2 + 7 | 0] = $5 >>> 24;
   $1 = $1 + 8 | 0;
   $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $1 = $0 + 8 | 0;
   HEAP8[$1 | 0] = $2;
   HEAP8[$1 + 1 | 0] = $2 >>> 8;
   HEAP8[$1 + 2 | 0] = $2 >>> 16;
   HEAP8[$1 + 3 | 0] = $2 >>> 24;
   HEAP8[$1 + 4 | 0] = $3;
   HEAP8[$1 + 5 | 0] = $3 >>> 8;
   HEAP8[$1 + 6 | 0] = $3 >>> 16;
   HEAP8[$1 + 7 | 0] = $3 >>> 24;
   $2 = $4 + 72 | 0;
   rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_initialize($2, $4, 64);
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $1 = $4 + 56 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = $4 + 48 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = $4 + 40 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $4 + 24 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $4 + 16 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $4 + 8 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $1 = $4 + 144 | 0;
   rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_generate($2, $1);
   $0 = $4 + 176 | 0;
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = ((rustsecp256k1_v0_8_1_fe_set_b32($0, $1) | 0) != 0 ^ -1) & 1), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = rustsecp256k1_v0_8_1_fe_is_zero($0) | HEAP32[$4 + 68 >> 2]), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
   rustsecp256k1_v0_8_1_fe_cmov($0, 691240, HEAP32[$4 + 68 >> 2]);
   rustsecp256k1_v0_8_1_gej_rescale(HEAP32[$4 + 380 >> 2] + 40 | 0, $0);
   rustsecp256k1_v0_8_1_fe_clear($0);
   rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_generate($2, $1);
   $0 = $4 + 344 | 0;
   rustsecp256k1_v0_8_1_scalar_set_b32($0, $1, 0);
   rustsecp256k1_v0_8_1_scalar_cmov($0, 690552, rustsecp256k1_v0_8_1_scalar_is_zero($0));
   rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_finalize($2);
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $2 = $1 + 24 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   $2 = $1 + 16 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   $1 = $1 + 8 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $2 = $4 + 216 | 0;
   rustsecp256k1_v0_8_1_ecmult_gen(HEAP32[$4 + 380 >> 2], $2, $0);
   rustsecp256k1_v0_8_1_scalar_negate($0, $0);
   $3 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$4 + 380 >> 2] + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $3 = $0 + 24 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $6 = $1 + 24 | 0;
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $3 = $0 + 16 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $6 = $1 + 16 | 0;
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $3 = $0 + 8 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $1 = $1 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 4 >> 2] = $5;
   memcpy(HEAP32[$4 + 380 >> 2] + 40 | 0, $2, 128);
   rustsecp256k1_v0_8_1_scalar_clear($0);
   rustsecp256k1_v0_8_1_gej_clear($2);
  }
  __stack_pointer = $4 + 384 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_clear($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_clear($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2] = 0;
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2]);
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2] + 40 | 0);
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2] + 80 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_pubkey_save($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $8 = __stack_pointer - 80 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 76 >> 2] = $0;
  HEAP32[$8 + 72 >> 2] = $1;
  $2 = HEAP32[$8 + 72 >> 2];
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  $0 = $8 + 8 | 0;
  HEAP32[$1 + 92 >> 2] = $0;
  HEAP32[$1 + 88 >> 2] = $2;
  $3 = HEAP32[$1 + 88 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $1 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $4 = $3 + 32 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $2 + 32 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $3 + 24 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $2 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $3 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $2 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $3 = $3 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $2 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  rustsecp256k1_v0_8_1_fe_normalize($2);
  $4 = HEAP32[$1 + 88 >> 2] + 40 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $5 = $4 + 32 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $7 = $3 + 32 | 0;
  HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $5 = $4 + 24 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $7 = $3 + 24 | 0;
  HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $5 = $4 + 16 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $7 = $3 + 16 | 0;
  HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $4 = $4 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $3 + 8 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  rustsecp256k1_v0_8_1_fe_normalize($3);
  rustsecp256k1_v0_8_1_fe_to_storage(HEAP32[$1 + 92 >> 2], $2);
  rustsecp256k1_v0_8_1_fe_to_storage(HEAP32[$1 + 92 >> 2] + 32 | 0, $3);
  __stack_pointer = $1 + 96 | 0;
  $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  $1 = HEAP32[$8 + 76 >> 2];
  $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  HEAP8[$1 | 0] = $3;
  HEAP8[$1 + 1 | 0] = $3 >>> 8;
  HEAP8[$1 + 2 | 0] = $3 >>> 16;
  HEAP8[$1 + 3 | 0] = $3 >>> 24;
  HEAP8[$1 + 4 | 0] = $2;
  HEAP8[$1 + 5 | 0] = $2 >>> 8;
  HEAP8[$1 + 6 | 0] = $2 >>> 16;
  HEAP8[$1 + 7 | 0] = $2 >>> 24;
  $2 = $0 + 56 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $4 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $1 + 56 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $2 = $0 + 48 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $4 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $1 + 48 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $2 = $0 + 40 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $4 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $1 + 40 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $2 = $0 + 32 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $4 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $1 + 32 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $2 = $0 + 24 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $4 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $1 + 24 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $2 = $0 + 16 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $4 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $1 + 16 | 0;
  HEAP8[$2 | 0] = $3;
  HEAP8[$2 + 1 | 0] = $3 >>> 8;
  HEAP8[$2 + 2 | 0] = $3 >>> 16;
  HEAP8[$2 + 3 | 0] = $3 >>> 24;
  HEAP8[$2 + 4 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $4 >>> 8;
  HEAP8[$2 + 6 | 0] = $4 >>> 16;
  HEAP8[$2 + 7 | 0] = $4 >>> 24;
  $0 = $0 + 8 | 0;
  $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  $0 = $1 + 8 | 0;
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
  HEAP8[$0 + 4 | 0] = $3;
  HEAP8[$0 + 5 | 0] = $3 >>> 8;
  HEAP8[$0 + 6 | 0] = $3 >>> 16;
  HEAP8[$0 + 7 | 0] = $3 >>> 24;
  __stack_pointer = $8 + 80 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ge_clear($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 80 >> 2] = 0;
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2]);
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2] + 40 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_set_b32($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  $5 = HEAP32[$3 + 8 >> 2];
  $0 = $5;
  $2 = HEAPU8[$0 + 31 | 0];
  $1 = HEAPU8[$0 + 30 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $2 = HEAPU8[$5 + 29 | 0];
  $1 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[$5 + 28 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $0 = HEAPU8[$5 + 27 | 0] | ($0 | $4);
  $2 = $1;
  $1 = HEAPU8[$5 + 26 | 0] << 8 | $0;
  $0 = HEAPU8[$5 + 25 | 0] & 15;
  $5 = HEAP32[$3 + 12 >> 2];
  HEAP32[$5 >> 2] = $2;
  HEAP32[$5 + 4 >> 2] = $0 << 16 | $1;
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAPU8[$0 + 25 | 0] >>> 4 | 0;
  $2 = $1;
  $4 = $1 >>> 31 | 0;
  $1 = HEAPU8[$0 + 24 | 0];
  $0 = $1 >>> 28 | 0;
  $2 = $1 << 4 | $2;
  $4 = $0 | $4;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 23 | 0];
  $1 = $0 >>> 20 | 0;
  $2 = $0 << 12 | $2;
  $4 = $1 | $4;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 22 | 0];
  $0 = $1 >>> 12 | 0;
  $2 = $1 << 20 | $2;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 21 | 0];
  $0 = $0 | $4 | $1 >>> 4;
  $2 = $2 | $1 << 28;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 20 | 0] << 4 | $0;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 19 | 0] << 12;
  $5 = HEAP32[$3 + 12 >> 2];
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $0 | $1;
  $0 = HEAP32[$3 + 8 >> 2];
  $2 = HEAPU8[$0 + 18 | 0];
  $1 = HEAPU8[$0 + 17 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 16 | 0];
  $1 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 15 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 14 | 0] | ($0 | $4);
  $2 = $1;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 13 | 0] << 8 | $0;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 12 | 0] & 15;
  $5 = HEAP32[$3 + 12 >> 2];
  HEAP32[$5 + 16 >> 2] = $2;
  HEAP32[$5 + 20 >> 2] = $0 << 16 | $1;
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAPU8[$0 + 12 | 0] >>> 4 | 0;
  $2 = $1;
  $4 = $1 >>> 31 | 0;
  $1 = HEAPU8[$0 + 11 | 0];
  $0 = $1 >>> 28 | 0;
  $2 = $1 << 4 | $2;
  $4 = $0 | $4;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 10 | 0];
  $1 = $0 >>> 20 | 0;
  $2 = $0 << 12 | $2;
  $4 = $1 | $4;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 9 | 0];
  $0 = $1 >>> 12 | 0;
  $2 = $1 << 20 | $2;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 8 | 0];
  $0 = $0 | $4 | $1 >>> 4;
  $2 = $2 | $1 << 28;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 7 | 0] << 4 | $0;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 6 | 0] << 12;
  $5 = HEAP32[$3 + 12 >> 2];
  HEAP32[$5 + 24 >> 2] = $2;
  HEAP32[$5 + 28 >> 2] = $0 | $1;
  $0 = HEAP32[$3 + 8 >> 2];
  $2 = HEAPU8[$0 + 5 | 0];
  $1 = HEAPU8[$0 + 4 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 3 | 0];
  $1 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 2 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $2 = $0 | $4;
  $4 = $1;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 1 | 0] | $2;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2]] << 8;
  $5 = HEAP32[$3 + 12 >> 2];
  HEAP32[$5 + 32 >> 2] = $4;
  HEAP32[$5 + 36 >> 2] = $0 | $1;
  $0 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$3 + 12 >> 2];
  $6 = HEAP32[$2 + 32 >> 2] == -1 & HEAP32[$2 + 36 >> 2] == 65535;
  $5 = HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 12 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  if ((HEAP32[$5 + 8 >> 2] & (HEAP32[$2 + 24 >> 2] & HEAP32[$4 + 16 >> 2])) == -1) {
   $2 = (HEAP32[$5 + 12 >> 2] & (HEAP32[$2 + 28 >> 2] & HEAP32[$4 + 20 >> 2])) == 1048575
  } else {
   $2 = 0
  }
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 4 >> 2] = ($6 & $2 & (($0 | 0) == 1048574 & $1 >>> 0 >= 4294966319 | $0 >>> 0 > 1048574) ^ -1) & 1;
  return HEAP32[$3 + 4 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ge_set_xo_var($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $6 = __stack_pointer - 96 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 88 >> 2] = $0;
  HEAP32[$6 + 84 >> 2] = $1;
  HEAP32[$6 + 80 >> 2] = $2;
  $0 = HEAP32[$6 + 84 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$6 + 88 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $0 = $6 + 40 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($0, HEAP32[$6 + 84 >> 2]);
  rustsecp256k1_v0_8_1_fe_mul($6, HEAP32[$6 + 84 >> 2], $0);
  HEAP32[HEAP32[$6 + 88 >> 2] + 80 >> 2] = 0;
  rustsecp256k1_v0_8_1_fe_add($6, 690928);
  $0 = __stack_pointer - 496 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 492 >> 2] = HEAP32[$6 + 88 >> 2] + 40;
  HEAP32[$0 + 488 >> 2] = $6;
  $2 = $0 + 448 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($2, HEAP32[$0 + 488 >> 2]);
  rustsecp256k1_v0_8_1_fe_mul($2, $2, HEAP32[$0 + 488 >> 2]);
  $1 = $0 + 408 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($1, $2);
  rustsecp256k1_v0_8_1_fe_mul($1, $1, HEAP32[$0 + 488 >> 2]);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 368 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 3) {
    $1 = $0 + 368 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 368 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 408 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 328 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 3) {
    $1 = $0 + 328 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 328 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 408 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 288 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 2) {
    $1 = $0 + 288 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 288 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 448 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 248 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 11) {
    $1 = $0 + 248 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 248 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 288 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 208 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 22) {
    $1 = $0 + 208 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 208 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 248 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 168 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 44) {
    $1 = $0 + 168 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 168 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 208 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 128 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 88) {
    $1 = $0 + 128 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 128 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 168 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 88 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 44) {
    $1 = $0 + 88 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 88 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 208 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 3) {
    $1 = $0 + 48 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 48 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 408 | 0);
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 23) {
    $1 = $0 + 8 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = $0 + 8 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 248 | 0);
  HEAP32[$0 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 4 >> 2] < 6) {
    $1 = $0 + 8 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($1, $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $2 = $0 + 8 | 0;
  rustsecp256k1_v0_8_1_fe_mul($2, $2, $0 + 448 | 0);
  rustsecp256k1_v0_8_1_fe_sqr($2, $2);
  rustsecp256k1_v0_8_1_fe_sqr(HEAP32[$0 + 492 >> 2], $2);
  rustsecp256k1_v0_8_1_fe_sqr($2, HEAP32[$0 + 492 >> 2]);
  $3 = HEAP32[$0 + 488 >> 2];
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 44 >> 2] = $2;
  HEAP32[$1 + 40 >> 2] = $3;
  rustsecp256k1_v0_8_1_fe_negate($1, HEAP32[$1 + 44 >> 2], 1);
  rustsecp256k1_v0_8_1_fe_add($1, HEAP32[$1 + 40 >> 2]);
  $2 = rustsecp256k1_v0_8_1_fe_normalizes_to_zero($1);
  __stack_pointer = $1 + 48 | 0;
  __stack_pointer = $0 + 496 | 0;
  label$1 : {
   if (!$2) {
    HEAP32[$6 + 92 >> 2] = 0;
    break label$1;
   }
   rustsecp256k1_v0_8_1_fe_normalize_var(HEAP32[$6 + 88 >> 2] + 40 | 0);
   $0 = __stack_pointer - 16 | 0;
   HEAP32[$0 + 12 >> 2] = HEAP32[$6 + 88 >> 2] + 40;
   if (HEAP32[$6 + 80 >> 2] != (HEAP32[HEAP32[$0 + 12 >> 2] >> 2] & 1)) {
    $0 = HEAP32[$6 + 88 >> 2] + 40 | 0;
    rustsecp256k1_v0_8_1_fe_negate($0, $0, 1);
   }
   HEAP32[$6 + 92 >> 2] = 1;
  }
  __stack_pointer = $6 + 96 | 0;
  return HEAP32[$6 + 92 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ge_set_xy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[HEAP32[$4 + 12 >> 2] + 80 >> 2] = 0;
  $0 = HEAP32[$4 + 8 >> 2];
  $2 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$4 + 12 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $2;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $2;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $2;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  $0 = HEAP32[$4 + 4 >> 2];
  $2 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$4 + 12 >> 2] + 40 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3;
  $2 = $0 + 32 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 32 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $0 + 24 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $0 + 16 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_fe_clear($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  while (1) {
   if (!(HEAP32[$1 + 8 >> 2] >= 5)) {
    $0 = HEAP32[$1 + 12 >> 2] + (HEAP32[$1 + 8 >> 2] << 3) | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
 }
 
 function rustsecp256k1_v0_8_1_pubkey_load($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 72 >> 2] = $0;
  HEAP32[$4 + 68 >> 2] = $1;
  HEAP32[$4 + 64 >> 2] = $2;
  $1 = HEAP32[$4 + 64 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  HEAP8[$4 | 0] = $0;
  HEAP8[$4 + 1 | 0] = $0 >>> 8;
  HEAP8[$4 + 2 | 0] = $0 >>> 16;
  HEAP8[$4 + 3 | 0] = $0 >>> 24;
  HEAP8[$4 + 4 | 0] = $2;
  HEAP8[$4 + 5 | 0] = $2 >>> 8;
  HEAP8[$4 + 6 | 0] = $2 >>> 16;
  HEAP8[$4 + 7 | 0] = $2 >>> 24;
  $2 = $1 + 56 | 0;
  $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $4 + 56 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $2 = $1 + 48 | 0;
  $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $4 + 48 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $2 = $1 + 40 | 0;
  $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $4 + 40 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $2 = $1 + 32 | 0;
  $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $4 + 32 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $2 = $1 + 24 | 0;
  $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $4 + 24 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $2 = $1 + 16 | 0;
  $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $2 = $4 + 16 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $4 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $2;
  HEAP8[$1 + 5 | 0] = $2 >>> 8;
  HEAP8[$1 + 6 | 0] = $2 >>> 16;
  HEAP8[$1 + 7 | 0] = $2 >>> 24;
  rustsecp256k1_v0_8_1_ge_from_storage(HEAP32[$4 + 68 >> 2], $4);
  label$1 : {
   if (rustsecp256k1_v0_8_1_fe_is_zero(HEAP32[$4 + 68 >> 2])) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$4 + 72 >> 2] + 168 | 0, 690968);
    HEAP32[$4 + 76 >> 2] = 0;
    break label$1;
   }
   HEAP32[$4 + 76 >> 2] = 1;
  }
  __stack_pointer = $4 + 80 | 0;
  return HEAP32[$4 + 76 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ge_from_storage($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  rustsecp256k1_v0_8_1_fe_from_storage(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  rustsecp256k1_v0_8_1_fe_from_storage(HEAP32[$2 + 12 >> 2] + 40 | 0, HEAP32[$2 + 8 >> 2] + 32 | 0);
  HEAP32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_is_zero($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[$1 + 8 >> 2];
  return !(HEAP32[$0 >> 2] | HEAP32[$0 + 8 >> 2] | HEAP32[$0 + 16 >> 2] | HEAP32[$0 + 24 >> 2] | HEAP32[$0 + 32 >> 2] | (HEAP32[$0 + 36 >> 2] | (HEAP32[$0 + 28 >> 2] | (HEAP32[$0 + 20 >> 2] | (HEAP32[$0 + 4 >> 2] | HEAP32[$0 + 12 >> 2])))));
 }
 
 function rustsecp256k1_v0_8_1_fe_normalize_var($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer + -64 | 0;
  HEAP32[$1 + 60 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  HEAP32[$1 >> 2] = HEAP32[$1 + 20 >> 2] >>> 16;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0 & 65535;
  $2 = __wasm_i64_mul(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], 977, 1);
  $0 = i64toi32_i32$HIGH_BITS + HEAP32[$1 + 52 >> 2] | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 48 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 52 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 44 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 36 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 24 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 36 >> 2] & HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 32 >> 2] & HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 28 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 16 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 28 >> 2] & HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 24 >> 2] & HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 16 >> 2] == -1 & ($0 | 0) == 65535 & (HEAP32[$1 + 8 >> 2] == -1 & HEAP32[$1 + 12 >> 2] == 1048575) & (($2 | 0) == 1048574 & HEAPU32[$1 + 48 >> 2] >= 4294966319 | $2 >>> 0 > 1048574);
  HEAP32[$1 >> 2] = $0 >>> 16 | $2;
  HEAP32[$1 + 4 >> 2] = $2 >>> 31;
  if (HEAP32[$1 >> 2] | HEAP32[$1 + 4 >> 2]) {
   $0 = HEAP32[$1 + 52 >> 2] + 1 | 0;
   $2 = HEAP32[$1 + 48 >> 2] + 977 | 0;
   $0 = $2 >>> 0 < 977 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 48 >> 2] = $2;
   HEAP32[$1 + 52 >> 2] = $0;
   $0 = HEAP32[$1 + 44 >> 2];
   $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 40 >> 2] = $2;
   HEAP32[$1 + 44 >> 2] = $0;
   $0 = HEAP32[$1 + 52 >> 2];
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 52 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 36 >> 2];
   $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 32 >> 2] = $2;
   HEAP32[$1 + 36 >> 2] = $0;
   $0 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 44 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 28 >> 2];
   $2 = HEAP32[$1 + 36 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 24 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 24 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 36 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$1 + 36 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 20 >> 2];
   $2 = HEAP32[$1 + 28 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 16 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $0 & 65535;
  }
  $0 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 36 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_fe_get_b32($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2]] = HEAP32[$0 + 36 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAP32[$0 + 36 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = (HEAP32[$0 + 36 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = (HEAP32[$0 + 36 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 4 | 0] = (HEAP32[$0 + 36 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 5 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] + 32 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 6 | 0] = HEAP32[$0 + 28 >> 2] >>> 12;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 7 | 0] = HEAP32[$0 + 28 >> 2] >>> 4;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 8 | 0] = (HEAP32[$0 + 28 >> 2] & 268435455) << 4 | $1 >>> 28;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 9 | 0] = (HEAP32[$0 + 28 >> 2] & 1048575) << 12 | $1 >>> 20;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 10 | 0] = (HEAP32[$0 + 28 >> 2] & 4095) << 20 | $1 >>> 12;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 11 | 0] = (HEAP32[$0 + 28 >> 2] & 15) << 28 | $1 >>> 4;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = HEAP32[$0 + 20 >> 2] >>> 16 & 15 | (HEAP32[HEAP32[$2 + 8 >> 2] + 24 >> 2] & 15) << 4;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 13 | 0] = HEAP32[$0 + 20 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 14 | 0] = HEAP32[$0 + 20 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 15 | 0] = (HEAP32[$0 + 20 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 16 | 0] = (HEAP32[$0 + 20 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 17 | 0] = (HEAP32[$0 + 20 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 18 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 19 | 0] = HEAP32[$0 + 12 >> 2] >>> 12;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 20 | 0] = HEAP32[$0 + 12 >> 2] >>> 4;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 21 | 0] = (HEAP32[$0 + 12 >> 2] & 268435455) << 4 | $1 >>> 28;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 22 | 0] = (HEAP32[$0 + 12 >> 2] & 1048575) << 12 | $1 >>> 20;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 23 | 0] = (HEAP32[$0 + 12 >> 2] & 4095) << 20 | $1 >>> 12;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 24 | 0] = (HEAP32[$0 + 12 >> 2] & 15) << 28 | $1 >>> 4;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 25 | 0] = HEAP32[$0 + 4 >> 2] >>> 16 & 15 | (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] & 15) << 4;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 26 | 0] = HEAP32[$0 + 4 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 27 | 0] = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 28 | 0] = (HEAP32[$0 + 4 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 29 | 0] = (HEAP32[$0 + 4 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 30 | 0] = (HEAP32[$0 + 4 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 31 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 }
 
 function rustsecp256k1_v0_8_1_memcmp_var($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 + 4 >> 2] = 0;
  label$1 : {
   while (1) {
    if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 16 >> 2]) {
     $0 = HEAP32[$3 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAPU8[$0 + HEAP32[$3 + 12 >> 2] | 0] - HEAPU8[HEAP32[$3 + 8 >> 2] + $0 | 0];
     if (HEAP32[$3 >> 2]) {
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 >> 2];
      break label$1;
     } else {
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      continue;
     }
    }
    break;
   };
   HEAP32[$3 + 28 >> 2] = 0;
  }
  return HEAP32[$3 + 28 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ecdsa_signature_save($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 8 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$4 + 12 >> 2];
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $5 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $5;
  HEAP8[$3 + 5 | 0] = $5 >>> 8;
  HEAP8[$3 + 6 | 0] = $5 >>> 16;
  HEAP8[$3 + 7 | 0] = $5 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $5 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $5;
  HEAP8[$3 + 5 | 0] = $5 >>> 8;
  HEAP8[$3 + 6 | 0] = $5 >>> 16;
  HEAP8[$3 + 7 | 0] = $5 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  $1 = HEAP32[$4 + 4 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$4 + 12 >> 2] + 32 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
 }
 
 function rustsecp256k1_v0_8_1_scalar_set_b32($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $5 = HEAP32[$3 + 8 >> 2];
  $0 = $5;
  $2 = HEAPU8[$0 + 31 | 0];
  $1 = HEAPU8[$0 + 30 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $1 = $0;
  $2 = HEAPU8[$5 + 29 | 0];
  $0 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[$5 + 28 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $2 = HEAPU8[$5 + 27 | 0] | ($0 | $4) | HEAPU8[$5 + 26 | 0] << 8 | HEAPU8[$5 + 25 | 0] << 16;
  $0 = HEAPU8[$5 + 24 | 0] << 24;
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 8 >> 2];
  $2 = HEAPU8[$0 + 23 | 0];
  $1 = HEAPU8[$0 + 22 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $1 = $0;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 21 | 0];
  $0 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 20 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 19 | 0] | ($0 | $4) | HEAPU8[HEAP32[$3 + 8 >> 2] + 18 | 0] << 8 | HEAPU8[HEAP32[$3 + 8 >> 2] + 17 | 0] << 16;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 16 | 0] << 24;
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 8 >> 2];
  $2 = HEAPU8[$0 + 15 | 0];
  $1 = HEAPU8[$0 + 14 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $1 = $0;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 13 | 0];
  $0 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 12 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 11 | 0] | ($0 | $4) | HEAPU8[HEAP32[$3 + 8 >> 2] + 10 | 0] << 8 | HEAPU8[HEAP32[$3 + 8 >> 2] + 9 | 0] << 16;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2] + 8 | 0] << 24;
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 16 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 8 >> 2];
  $2 = HEAPU8[$0 + 7 | 0];
  $1 = HEAPU8[$0 + 6 | 0];
  $0 = $1 >>> 24 | 0;
  $4 = $1 << 8 | $2;
  $1 = $0;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 5 | 0];
  $0 = $2 >>> 16 | 0;
  $2 = $2 << 16 | $4;
  $4 = $0 | $1;
  $1 = HEAPU8[HEAP32[$3 + 8 >> 2] + 4 | 0];
  $0 = $1 >>> 8 | 0;
  $1 = $1 << 24 | $2;
  $2 = HEAPU8[HEAP32[$3 + 8 >> 2] + 3 | 0] | ($0 | $4) | HEAPU8[HEAP32[$3 + 8 >> 2] + 2 | 0] << 8 | HEAPU8[HEAP32[$3 + 8 >> 2] + 1 | 0] << 16;
  $0 = HEAPU8[HEAP32[$3 + 8 >> 2]] << 24;
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0 | $2;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_reduce(HEAP32[$3 + 12 >> 2], rustsecp256k1_v0_8_1_scalar_check_overflow(HEAP32[$3 + 12 >> 2]))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if (HEAP32[$3 + 4 >> 2]) {
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2]
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_check_overflow($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | (($0 | 0) == -1 & ($2 | 0) != -1 | ($0 | 0) != -1);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | (($0 | 0) == -1 & $2 >>> 0 < 4294967294 | ($0 | 0) != -1);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | (HEAP32[$1 + 4 >> 2] ^ -1) & ($2 & HEAP32[$0 + 20 >> 2]) == -1;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | (($0 | 0) == -1162945306 & $2 >>> 0 < 2940772411 | $0 >>> 0 < 3132021990);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | (($0 | 0) == -1162945306 & $2 >>> 0 > 2940772411 | $0 >>> 0 > 3132021990) & (HEAP32[$1 + 4 >> 2] ^ -1);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | (($0 | 0) == -1076732276 & $2 >>> 0 >= 3493216577 | $0 >>> 0 > 3218235020) & (HEAP32[$1 + 4 >> 2] ^ -1);
  return HEAP32[$1 + 8 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_scalar_reduce($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  $0 = HEAP32[$2 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_from_u64($2, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, __wasm_i64_mul(HEAP32[$2 + 24 >> 2], 0, 801750719, 1076732275), i64toi32_i32$HIGH_BITS);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $0 = HEAP32[$2 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, __wasm_i64_mul(HEAP32[$2 + 24 >> 2], 0, 1354194884, 1162945305), i64toi32_i32$HIGH_BITS);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $0 = HEAP32[$2 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$2 + 24 >> 2], 0);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $0 = HEAP32[$2 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 24 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ecdsa_signature_load($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $1 = HEAP32[$4 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$4 + 8 >> 2];
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $5 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $5;
  HEAP8[$3 + 5 | 0] = $5 >>> 8;
  HEAP8[$3 + 6 | 0] = $5 >>> 16;
  HEAP8[$3 + 7 | 0] = $5 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $5 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $5;
  HEAP8[$3 + 5 | 0] = $5 >>> 8;
  HEAP8[$3 + 6 | 0] = $5 >>> 16;
  HEAP8[$3 + 7 | 0] = $5 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  $1 = HEAP32[$4 >> 2] + 32 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$4 + 4 >> 2];
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
 }
 
 function rustsecp256k1_v0_8_1_scalar_get_b32($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2]] = HEAP32[$0 + 28 >> 2] >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAP32[$0 + 28 >> 2] >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = HEAP32[$0 + 28 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = HEAP32[$0 + 28 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 4 | 0] = (HEAP32[$0 + 28 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 5 | 0] = (HEAP32[$0 + 28 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 6 | 0] = (HEAP32[$0 + 28 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 7 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] + 24 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 8 | 0] = HEAP32[$0 + 20 >> 2] >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 9 | 0] = HEAP32[$0 + 20 >> 2] >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 10 | 0] = HEAP32[$0 + 20 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 11 | 0] = HEAP32[$0 + 20 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = (HEAP32[$0 + 20 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 13 | 0] = (HEAP32[$0 + 20 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 14 | 0] = (HEAP32[$0 + 20 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 15 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 16 | 0] = HEAP32[$0 + 12 >> 2] >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 17 | 0] = HEAP32[$0 + 12 >> 2] >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 18 | 0] = HEAP32[$0 + 12 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 19 | 0] = HEAP32[$0 + 12 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 20 | 0] = (HEAP32[$0 + 12 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 21 | 0] = (HEAP32[$0 + 12 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 22 | 0] = (HEAP32[$0 + 12 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 23 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 24 | 0] = HEAP32[$0 + 4 >> 2] >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 25 | 0] = HEAP32[$0 + 4 >> 2] >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 26 | 0] = HEAP32[$0 + 4 >> 2] >>> 8;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 27 | 0] = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 28 | 0] = (HEAP32[$0 + 4 >> 2] & 16777215) << 8 | $1 >>> 24;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 29 | 0] = (HEAP32[$0 + 4 >> 2] & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 30 | 0] = (HEAP32[$0 + 4 >> 2] & 255) << 24 | $1 >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 31 | 0] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 }
 
 function rustsecp256k1_v0_8_1_scalar_is_high($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | (($0 | 0) == 2147483647 & ($2 | 0) != -1 | $0 >>> 0 < 2147483647);
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | (HEAP32[$1 + 4 >> 2] ^ -1) & HEAPU32[HEAP32[$1 + 12 >> 2] + 28 >> 2] > 2147483647;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | (($0 | 0) == -1 & ($2 | 0) != -1 | ($0 | 0) != -1) & (HEAP32[$1 + 8 >> 2] ^ -1);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | (($0 | 0) == 1566010995 & $2 >>> 0 < 1470386205 | $0 >>> 0 < 1566010995) & (HEAP32[$1 + 8 >> 2] ^ -1);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | (($0 | 0) == 1566010995 & $2 >>> 0 > 1470386205 | $0 >>> 0 > 1566010995) & (HEAP32[$1 + 4 >> 2] ^ -1);
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | (($0 | 0) == -538366138 & $2 >>> 0 > 1746608288 | $0 >>> 0 > 3756601158) & (HEAP32[$1 + 4 >> 2] ^ -1);
  return HEAP32[$1 + 8 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_scalar_negate($0, $1) {
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  $0 = !rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$2 + 24 >> 2]);
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = __wasm_i64_mul($0, $0 >>> 31 | 0, -1, -1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_from_u64($2, HEAP32[$0 >> 2] ^ -1, HEAP32[$0 + 4 >> 2] ^ -1);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, -801750718, -1076732276);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 + 16 >> 2] & HEAP32[$0 >> 2];
  HEAP32[$3 + 4 >> 2] = $1 & i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $0 = HEAP32[$2 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 8 >> 2] ^ -1, HEAP32[$0 + 12 >> 2] ^ -1);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, -1354194885, -1162945306);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 16 >> 2] & HEAP32[$0 >> 2];
  HEAP32[$3 + 12 >> 2] = $1 & i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $0 = HEAP32[$2 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 16 >> 2] ^ -1, HEAP32[$0 + 20 >> 2] ^ -1);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, -2, -1);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 16 >> 2] & HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = $1 & i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $0 = HEAP32[$2 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 24 >> 2] ^ -1, HEAP32[$0 + 28 >> 2] ^ -1);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, -1, -1);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$2 + 16 >> 2] & HEAP32[$0 >> 2];
  HEAP32[$3 + 28 >> 2] = $1 & i64toi32_i32$HIGH_BITS;
  __stack_pointer = $2 + 32 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_is_zero($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return !(HEAP32[$0 >> 2] | HEAP32[$0 + 8 >> 2] | HEAP32[$0 + 16 >> 2] | HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 28 >> 2] | (HEAP32[$0 + 20 >> 2] | (HEAP32[$0 + 4 >> 2] | HEAP32[$0 + 12 >> 2]))));
 }
 
 function rustsecp256k1_v0_8_1_u128_from_u64($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$3 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  $2 = HEAP32[$3 + 12 >> 2];
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_u128_accum_u64($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $4 = HEAP32[$3 + 12 >> 2];
  $6 = $4 + 8 | 0;
  $2 = HEAP32[$6 + 4 >> 2];
  $0 = HEAP32[$4 >> 2];
  $7 = $0;
  $5 = HEAP32[$3 >> 2];
  $1 = $0 + $5 | 0;
  $0 = HEAP32[$3 + 4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $0 = $0 + $3 | 0;
  $0 = $1 >>> 0 < $5 >>> 0 ? $0 + 1 | 0 : $0;
  $3 = ($0 | 0) == ($3 | 0) & $1 >>> 0 < $7 >>> 0 | $0 >>> 0 < $3 >>> 0;
  $5 = $3 + HEAP32[$6 >> 2] | 0;
  HEAP32[$4 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $0;
  HEAP32[$6 >> 2] = $5;
  HEAP32[$6 + 4 >> 2] = $3 >>> 0 > $5 >>> 0 ? $2 + 1 | 0 : $2;
 }
 
 function rustsecp256k1_v0_8_1_u128_rshift($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  $6 = HEAP32[$5 + 28 >> 2];
  $11 = $6 + 8 | 0;
  $7 = $5 + 8 | 0;
  $8 = HEAP32[$6 >> 2];
  $2 = HEAP32[$6 + 4 >> 2];
  $1 = HEAP32[$11 >> 2];
  $0 = HEAP32[$11 + 4 >> 2];
  $3 = HEAP32[$5 + 24 >> 2];
  label$1 : {
   if (!($3 & 64)) {
    if (!$3) {
     break label$1
    }
    $9 = 0 - $3 & 63;
    $4 = $9 & 31;
    $12 = $3 & 63;
    $10 = $12 & 31;
    if ($9 >>> 0 >= 32) {
     $3 = $1 << $4;
     $9 = 0;
    } else {
     $3 = (1 << $4) - 1 & $1 >>> 32 - $4 | $0 << $4;
     $9 = $1 << $4;
    }
    if ($12 >>> 0 >= 32) {
     $4 = 0;
     $2 = $2 >>> $10 | 0;
    } else {
     $4 = $2 >>> $10 | 0;
     $2 = ((1 << $10) - 1 & $2) << 32 - $10 | $8 >>> $10;
    }
    $8 = $9 | $2;
    $2 = $3 | $4;
    $4 = $12 & 31;
    if ($12 >>> 0 >= 32) {
     $3 = 0;
     $1 = $0 >>> $4 | 0;
    } else {
     $3 = $0 >>> $4 | 0;
     $1 = ((1 << $4) - 1 & $0) << 32 - $4 | $1 >>> $4;
    }
    $0 = $3;
    break label$1;
   }
   $3 = $3 & 63;
   $2 = $3 & 31;
   if ($3 >>> 0 >= 32) {
    $8 = $0 >>> $2 | 0;
    $2 = 0;
   } else {
    $8 = ((1 << $2) - 1 & $0) << 32 - $2 | $1 >>> $2;
    $2 = $0 >>> $2 | 0;
   }
   $1 = 0;
   $0 = 0;
  }
  HEAP32[$7 >> 2] = $8;
  HEAP32[$7 + 4 >> 2] = $2;
  HEAP32[$7 + 8 >> 2] = $1;
  HEAP32[$7 + 12 >> 2] = $0;
  $0 = HEAP32[$5 + 8 >> 2];
  $1 = HEAP32[$5 + 12 >> 2];
  $2 = $7 + 8 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$11 + 4 >> 2] = $3;
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  __stack_pointer = $5 + 32 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_inverse_var($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  rustsecp256k1_v0_8_1_scalar_to_signed62($2, HEAP32[$2 + 40 >> 2]);
  rustsecp256k1_v0_8_1_modinv64_var($2, 691096);
  rustsecp256k1_v0_8_1_scalar_from_signed62(HEAP32[$2 + 44 >> 2], $2);
  __stack_pointer = $2 + 48 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_mul($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 76 >> 2] = $0;
  HEAP32[$4 + 72 >> 2] = $1;
  HEAP32[$4 + 68 >> 2] = $2;
  rustsecp256k1_v0_8_1_scalar_mul_512($4, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 68 >> 2]);
  $0 = __stack_pointer - 736 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 732 >> 2] = HEAP32[$4 + 76 >> 2];
  HEAP32[$0 + 728 >> 2] = $4;
  $1 = HEAP32[$0 + 728 >> 2];
  $2 = HEAP32[$1 + 36 >> 2];
  HEAP32[$0 + 664 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 668 >> 2] = $2;
  $1 = HEAP32[$0 + 728 >> 2];
  $2 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 + 656 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$0 + 660 >> 2] = $2;
  $1 = HEAP32[$0 + 728 >> 2];
  $2 = HEAP32[$1 + 52 >> 2];
  HEAP32[$0 + 648 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$0 + 652 >> 2] = $2;
  $1 = HEAP32[$0 + 728 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$0 + 640 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$0 + 644 >> 2] = $2;
  $1 = HEAP32[$0 + 728 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 692 >> 2] = $2;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $1 = $0 + 512 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 664 >> 2], HEAP32[$0 + 668 >> 2], 801750719, 1076732275);
  $3 = __stack_pointer - 16 | 0;
  $2 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 528 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 532 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 536 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 540 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 540 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 536 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 540 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 536 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 528 >> 2] | 0;
  $3 = HEAP32[$0 + 532 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 528 >> 2] = $2;
  HEAP32[$0 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 532 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 528 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 632 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 636 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  $2 = HEAP32[$0 + 728 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  $1 = $3 + HEAP32[$0 + 688 >> 2] | 0;
  $2 = HEAP32[$2 + 12 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $1;
  HEAP32[$0 + 692 >> 2] = $1 >>> 0 < $3 >>> 0 ? $2 + 1 | 0 : $2;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 728 >> 2];
  $3 = HEAP32[$2 + 12 >> 2];
  $1 = ($1 | 0) == ($3 | 0) & HEAPU32[$2 + 8 >> 2] > HEAPU32[$0 + 688 >> 2] | $1 >>> 0 < $3 >>> 0;
  $2 = $1 + HEAP32[$0 + 680 >> 2] | 0;
  $3 = HEAP32[$0 + 684 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 680 >> 2] = $2;
  HEAP32[$0 + 684 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 480 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 656 >> 2], HEAP32[$0 + 660 >> 2], 801750719, 1076732275);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 496 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 500 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 504 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 508 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 508 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 504 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 508 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 504 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 496 >> 2] | 0;
  $3 = HEAP32[$0 + 500 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 496 >> 2] = $2;
  HEAP32[$0 + 500 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 500 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 496 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 500 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 496 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 448 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 664 >> 2], HEAP32[$0 + 668 >> 2], 1354194884, 1162945305);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 464 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 468 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 472 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 476 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 476 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 472 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 476 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 472 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 464 >> 2] | 0;
  $3 = HEAP32[$0 + 468 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 464 >> 2] = $2;
  HEAP32[$0 + 468 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 468 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 464 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 468 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 464 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 624 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 628 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $2 = HEAP32[$0 + 728 >> 2];
  $3 = HEAP32[$2 + 16 >> 2];
  $1 = $3 + HEAP32[$0 + 688 >> 2] | 0;
  $2 = HEAP32[$2 + 20 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $1;
  HEAP32[$0 + 692 >> 2] = $1 >>> 0 < $3 >>> 0 ? $2 + 1 | 0 : $2;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 728 >> 2];
  $3 = HEAP32[$2 + 20 >> 2];
  HEAP32[$0 + 444 >> 2] = ($1 | 0) == ($3 | 0) & HEAPU32[$2 + 16 >> 2] > HEAPU32[$0 + 688 >> 2] | $1 >>> 0 < $3 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 444 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 444 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 400 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 648 >> 2], HEAP32[$0 + 652 >> 2], 801750719, 1076732275);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 424 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 428 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 432 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 436 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 436 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 432 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 436 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 432 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 424 >> 2] | 0;
  $3 = HEAP32[$0 + 428 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 424 >> 2] = $2;
  HEAP32[$0 + 428 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 428 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 424 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 428 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 424 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 368 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 656 >> 2], HEAP32[$0 + 660 >> 2], 1354194884, 1162945305);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 384 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 388 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 392 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 396 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 396 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 392 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 396 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 392 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 384 >> 2] | 0;
  $3 = HEAP32[$0 + 388 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 384 >> 2] = $2;
  HEAP32[$0 + 388 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 388 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 384 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 388 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 384 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 668 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 664 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 668 >> 2];
  HEAP32[$0 + 364 >> 2] = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 664 >> 2] | $1 >>> 0 < $2 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 364 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 364 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 616 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 620 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $2 = HEAP32[$0 + 728 >> 2];
  $3 = HEAP32[$2 + 24 >> 2];
  $1 = $3 + HEAP32[$0 + 688 >> 2] | 0;
  $2 = HEAP32[$2 + 28 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $1;
  HEAP32[$0 + 692 >> 2] = $1 >>> 0 < $3 >>> 0 ? $2 + 1 | 0 : $2;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 728 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 360 >> 2] = ($1 | 0) == ($3 | 0) & HEAPU32[$2 + 24 >> 2] > HEAPU32[$0 + 688 >> 2] | $1 >>> 0 < $3 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 360 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 360 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 320 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 640 >> 2], HEAP32[$0 + 644 >> 2], 801750719, 1076732275);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 344 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 348 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 352 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 356 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 356 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 352 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 356 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 352 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 344 >> 2] | 0;
  $3 = HEAP32[$0 + 348 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 344 >> 2] = $2;
  HEAP32[$0 + 348 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 348 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 344 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 348 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 344 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 288 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 648 >> 2], HEAP32[$0 + 652 >> 2], 1354194884, 1162945305);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 304 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 308 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 312 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 316 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 316 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 312 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 316 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 312 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 304 >> 2] | 0;
  $3 = HEAP32[$0 + 308 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 304 >> 2] = $2;
  HEAP32[$0 + 308 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 308 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 304 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 308 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 304 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 660 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 656 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 660 >> 2];
  HEAP32[$0 + 284 >> 2] = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 656 >> 2] | $1 >>> 0 < $2 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 284 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 284 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 612 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $1 = $0 + 240 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 640 >> 2], HEAP32[$0 + 644 >> 2], 1354194884, 1162945305);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 268 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 272 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 276 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 276 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 272 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 276 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 272 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 264 >> 2] | 0;
  $3 = HEAP32[$0 + 268 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 264 >> 2] = $2;
  HEAP32[$0 + 268 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 268 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 264 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 268 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 264 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 652 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 648 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 652 >> 2];
  HEAP32[$0 + 236 >> 2] = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 648 >> 2] | $1 >>> 0 < $2 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 236 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 236 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 604 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $1 = HEAP32[$0 + 644 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 640 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 644 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 640 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 680 >> 2] | 0;
  $3 = HEAP32[$0 + 684 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 680 >> 2] = $2;
  HEAP32[$0 + 684 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 596 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 688 >> 2];
  $1 = HEAP32[$0 + 636 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 632 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $1 = $0 + 192 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 600 >> 2], HEAP32[$0 + 604 >> 2], 801750719, 1076732275);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 216 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 220 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 224 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 228 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 228 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 224 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 228 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 224 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 216 >> 2] | 0;
  $3 = HEAP32[$0 + 220 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 216 >> 2] = $2;
  HEAP32[$0 + 220 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 220 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 216 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 576 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 580 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  $1 = HEAP32[$0 + 628 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 624 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 628 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 624 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 680 >> 2] | 0;
  $3 = HEAP32[$0 + 684 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 680 >> 2] = $2;
  HEAP32[$0 + 684 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 160 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 592 >> 2], HEAP32[$0 + 596 >> 2], 801750719, 1076732275);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 176 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 180 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 184 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 188 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 188 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 184 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 188 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 184 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 176 >> 2] | 0;
  $3 = HEAP32[$0 + 180 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 176 >> 2] = $2;
  HEAP32[$0 + 180 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 180 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 176 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 180 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 176 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 128 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 600 >> 2], HEAP32[$0 + 604 >> 2], 1354194884, 1162945305);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 144 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 148 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 152 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 156 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 156 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 152 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 156 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 152 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 144 >> 2] | 0;
  $3 = HEAP32[$0 + 148 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 144 >> 2] = $2;
  HEAP32[$0 + 148 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 148 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 144 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 148 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 144 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 568 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 572 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $1 = HEAP32[$0 + 620 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 616 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 620 >> 2];
  HEAP32[$0 + 124 >> 2] = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 616 >> 2] | $1 >>> 0 < $2 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 124 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 124 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 80 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 588 >> 2], 0, 801750719, 1076732275);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 104 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 108 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 112 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 116 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 116 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 112 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 116 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 112 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 104 >> 2] | 0;
  $3 = HEAP32[$0 + 108 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 104 >> 2] = $2;
  HEAP32[$0 + 108 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 104 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 108 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 104 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $0 + 48 | 0;
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 592 >> 2], HEAP32[$0 + 596 >> 2], 1354194884, 1162945305);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 68 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 76 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 76 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 72 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 76 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 72 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 64 >> 2] | 0;
  $3 = HEAP32[$0 + 68 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 64 >> 2] = $2;
  HEAP32[$0 + 68 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 68 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 64 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 68 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 680 >> 2] < HEAPU32[$0 + 64 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 600 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 604 >> 2];
  HEAP32[$0 + 44 >> 2] = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 600 >> 2] | $1 >>> 0 < $2 >>> 0;
  $1 = HEAP32[$0 + 684 >> 2];
  $2 = HEAP32[$0 + 44 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = !HEAP32[$0 + 684 >> 2] & HEAPU32[$0 + 44 >> 2] > HEAPU32[$0 + 680 >> 2];
  $2 = $1 + HEAP32[$0 + 672 >> 2] | 0;
  $3 = HEAP32[$0 + 676 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 672 >> 2] = $2;
  HEAP32[$0 + 676 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 560 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 564 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  $1 = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 608 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 612 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 608 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 680 >> 2] | 0;
  $3 = HEAP32[$0 + 684 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 680 >> 2] = $2;
  HEAP32[$0 + 684 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  rustsecp256k1_v0_8_1_u128_mul($0, HEAP32[$0 + 588 >> 2], 0, 1354194884, 1162945305);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 36 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 32 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 36 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 32 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 24 >> 2] | 0;
  $3 = HEAP32[$0 + 28 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 684 >> 2] | 0;
  $2 = HEAP32[$0 + 24 >> 2];
  $3 = $2 + HEAP32[$0 + 680 >> 2] | 0;
  HEAP32[$0 + 680 >> 2] = $3;
  HEAP32[$0 + 684 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 692 >> 2] | 0;
  $2 = HEAP32[$0 + 592 >> 2];
  $3 = $2 + HEAP32[$0 + 688 >> 2] | 0;
  HEAP32[$0 + 688 >> 2] = $3;
  HEAP32[$0 + 692 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$0 + 692 >> 2];
  $2 = HEAP32[$0 + 596 >> 2];
  $1 = ($1 | 0) == ($2 | 0) & HEAPU32[$0 + 688 >> 2] < HEAPU32[$0 + 592 >> 2] | $1 >>> 0 < $2 >>> 0;
  $2 = $1 + HEAP32[$0 + 680 >> 2] | 0;
  $3 = HEAP32[$0 + 684 >> 2] + ($1 >>> 31 | 0) | 0;
  HEAP32[$0 + 680 >> 2] = $2;
  HEAP32[$0 + 684 >> 2] = $1 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = HEAP32[$0 + 692 >> 2];
  HEAP32[$0 + 552 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$0 + 556 >> 2] = $1;
  $1 = HEAP32[$0 + 684 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 688 >> 2];
  $1 = $0 + 704 | 0;
  rustsecp256k1_v0_8_1_u128_from_u64($1, HEAP32[$0 + 576 >> 2], HEAP32[$0 + 580 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_mul($1, 801750719, 1076732275, HEAP32[$0 + 548 >> 2], 0);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $3 = HEAP32[$0 + 732 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($1, 64);
  rustsecp256k1_v0_8_1_u128_accum_u64($1, HEAP32[$0 + 568 >> 2], HEAP32[$0 + 572 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_mul($1, 1354194884, 1162945305, HEAP32[$0 + 548 >> 2], 0);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $3 = HEAP32[$0 + 732 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($1, 64);
  rustsecp256k1_v0_8_1_u128_accum_u64($1, HEAP32[$0 + 560 >> 2], HEAP32[$0 + 564 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_u64($1, HEAP32[$0 + 548 >> 2], 0);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $3 = HEAP32[$0 + 732 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($1, 64);
  rustsecp256k1_v0_8_1_u128_accum_u64($1, HEAP32[$0 + 552 >> 2], HEAP32[$0 + 556 >> 2]);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $3 = HEAP32[$0 + 732 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 696 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 700 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$0 + 732 >> 2];
  rustsecp256k1_v0_8_1_scalar_reduce($1, HEAP32[$0 + 696 >> 2] + rustsecp256k1_v0_8_1_scalar_check_overflow($1) | 0);
  __stack_pointer = $0 + 736 | 0;
  __stack_pointer = $4 + 80 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_set_ge($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $0;
  HEAP32[$5 + 8 >> 2] = $1;
  HEAP32[HEAP32[$5 + 12 >> 2] + 120 >> 2] = HEAP32[HEAP32[$5 + 8 >> 2] + 80 >> 2];
  $0 = HEAP32[$5 + 8 >> 2];
  $2 = HEAP32[$0 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 12 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $4;
  $2 = $0 + 32 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 32 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $0 + 24 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $0 + 16 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  $0 = HEAP32[$5 + 8 >> 2] + 40 | 0;
  $2 = HEAP32[$0 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 12 >> 2] + 40 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $4;
  $2 = $0 + 32 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 32 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $0 + 24 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $0 + 16 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$5 + 12 >> 2] + 80 | 0, 1);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ecmult($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 2096 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 2092 >> 2] = $0;
  HEAP32[$7 + 2088 >> 2] = $1;
  HEAP32[$7 + 2084 >> 2] = $2;
  HEAP32[$7 + 2080 >> 2] = $3;
  HEAP32[$7 >> 2] = $7 + 1760;
  HEAP32[$7 + 4 >> 2] = $7 + 1056;
  HEAP32[$7 + 8 >> 2] = $7 + 16;
  $1 = HEAP32[$7 + 2092 >> 2];
  $2 = HEAP32[$7 + 2088 >> 2];
  $3 = HEAP32[$7 + 2084 >> 2];
  $4 = HEAP32[$7 + 2080 >> 2];
  $0 = __stack_pointer - 1488 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 1484 >> 2] = $7;
  HEAP32[$0 + 1480 >> 2] = $1;
  HEAP32[$0 + 1476 >> 2] = 1;
  HEAP32[$0 + 1472 >> 2] = $2;
  HEAP32[$0 + 1468 >> 2] = $3;
  HEAP32[$0 + 1464 >> 2] = $4;
  HEAP32[$0 + 748 >> 2] = 0;
  HEAP32[$0 + 220 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  rustsecp256k1_v0_8_1_fe_set_int($0 + 1336 | 0, 1);
  HEAP32[$0 + 208 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 + 208 >> 2] < HEAPU32[$0 + 1476 >> 2]) {
    label$3 : {
     if (rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$0 + 1468 >> 2] + (HEAP32[$0 + 208 >> 2] << 5) | 0)) {
      break label$3
     }
     $1 = __stack_pointer - 16 | 0;
     HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 1472 >> 2] + (HEAP32[$0 + 208 >> 2] << 7);
     if (HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2]) {
      break label$3
     }
     $2 = HEAP32[$0 + 1468 >> 2] + (HEAP32[$0 + 208 >> 2] << 5) | 0;
     $1 = __stack_pointer - 80 | 0;
     __stack_pointer = $1;
     $3 = $0 + 40 | 0;
     HEAP32[$1 + 76 >> 2] = $3;
     $4 = $0 + 8 | 0;
     HEAP32[$1 + 72 >> 2] = $4;
     HEAP32[$1 + 68 >> 2] = $2;
     $2 = $1 + 32 | 0;
     rustsecp256k1_v0_8_1_scalar_mul_shift_var($2, HEAP32[$1 + 68 >> 2], 691456);
     rustsecp256k1_v0_8_1_scalar_mul_shift_var($1, HEAP32[$1 + 68 >> 2], 691488);
     rustsecp256k1_v0_8_1_scalar_mul($2, $2, 691392);
     rustsecp256k1_v0_8_1_scalar_mul($1, $1, 691424);
     rustsecp256k1_v0_8_1_scalar_add(HEAP32[$1 + 72 >> 2], $2, $1);
     rustsecp256k1_v0_8_1_scalar_mul(HEAP32[$1 + 76 >> 2], HEAP32[$1 + 72 >> 2], 691520);
     rustsecp256k1_v0_8_1_scalar_negate(HEAP32[$1 + 76 >> 2], HEAP32[$1 + 76 >> 2]);
     rustsecp256k1_v0_8_1_scalar_add(HEAP32[$1 + 76 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 68 >> 2]);
     __stack_pointer = $1 + 80 | 0;
     $1 = rustsecp256k1_v0_8_1_ecmult_wnaf(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0, $3, 5);
     HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 1032 >> 2] = $1;
     $1 = rustsecp256k1_v0_8_1_ecmult_wnaf((HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 516 | 0, $4, 5);
     HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 1036 >> 2] = $1;
     if (HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 1032 >> 2] > HEAP32[$0 + 212 >> 2]) {
      HEAP32[$0 + 212 >> 2] = HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 1032 >> 2]
     }
     if (HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 1036 >> 2] > HEAP32[$0 + 212 >> 2]) {
      HEAP32[$0 + 212 >> 2] = HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 1040) | 0) + 1036 >> 2]
     }
     memcpy($0 + 72 | 0, HEAP32[$0 + 1472 >> 2] + (HEAP32[$0 + 208 >> 2] << 7) | 0, 128);
     if (HEAP32[$0 + 204 >> 2]) {
      rustsecp256k1_v0_8_1_gej_rescale($0 + 72 | 0, $0 + 1336 | 0)
     }
     $1 = HEAP32[$0 + 1484 >> 2];
     $2 = HEAP32[$0 + 204 >> 2] << 3;
     $3 = HEAP32[$1 + 4 >> 2] + Math_imul($2, 88) | 0;
     $2 = HEAP32[$1 >> 2] + Math_imul($2, 40) | 0;
     $1 = __stack_pointer - 384 | 0;
     __stack_pointer = $1;
     HEAP32[$1 + 380 >> 2] = 8;
     HEAP32[$1 + 376 >> 2] = $3;
     HEAP32[$1 + 372 >> 2] = $2;
     HEAP32[$1 + 368 >> 2] = $0 + 1336;
     HEAP32[$1 + 364 >> 2] = $0 + 72;
     $2 = $1 + 232 | 0;
     rustsecp256k1_v0_8_1_gej_double_var($2, HEAP32[$1 + 364 >> 2], 0);
     rustsecp256k1_v0_8_1_ge_set_xy($1 + 16 | 0, $2, $2 + 40 | 0);
     $2 = $2 + 80 | 0;
     rustsecp256k1_v0_8_1_ge_set_gej_zinv(HEAP32[$1 + 376 >> 2], HEAP32[$1 + 364 >> 2], $2);
     $4 = $1 + 104 | 0;
     rustsecp256k1_v0_8_1_gej_set_ge($4, HEAP32[$1 + 376 >> 2]);
     $3 = HEAP32[$1 + 364 >> 2] + 80 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $4 + 80 | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $5 = $3 + 32 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $8 = $4 + 32 | 0;
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $6;
     $5 = $3 + 24 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $6;
     $5 = $3 + 16 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $6;
     $3 = $3 + 8 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = HEAP32[$1 + 372 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     $4 = $2 + 32 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = $3 + 32 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $4 = $2 + 24 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = $3 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $4 = $2 + 16 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = $3 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $2 = $2 + 8 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $3 + 8 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     HEAP32[$1 + 12 >> 2] = 1;
     while (1) {
      if (HEAP32[$1 + 12 >> 2] < HEAP32[$1 + 380 >> 2]) {
       $2 = $1 + 104 | 0;
       rustsecp256k1_v0_8_1_gej_add_ge_var($2, $2, $1 + 16 | 0, HEAP32[$1 + 372 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 40) | 0);
       rustsecp256k1_v0_8_1_ge_set_xy(HEAP32[$1 + 376 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 88) | 0, $2, $2 + 40 | 0);
       HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
       continue;
      }
      break;
     };
     rustsecp256k1_v0_8_1_fe_mul(HEAP32[$1 + 368 >> 2], $1 + 184 | 0, $1 + 312 | 0);
     __stack_pointer = $1 + 384 | 0;
     if (HEAP32[$0 + 204 >> 2]) {
      $1 = HEAP32[HEAP32[$0 + 1484 >> 2] >> 2] + Math_imul(HEAP32[$0 + 204 >> 2], 320) | 0;
      rustsecp256k1_v0_8_1_fe_mul($1, $1, (HEAP32[$0 + 1472 >> 2] + (HEAP32[$0 + 208 >> 2] << 7) | 0) + 80 | 0);
     }
     HEAP32[$0 + 204 >> 2] = HEAP32[$0 + 204 >> 2] + 1;
    }
    HEAP32[$0 + 208 >> 2] = HEAP32[$0 + 208 >> 2] + 1;
    continue;
   }
   break;
  };
  $1 = HEAP32[$0 + 1484 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = HEAP32[$1 >> 2];
  $1 = __stack_pointer - 192 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 188 >> 2] = HEAP32[$0 + 204 >> 2] << 3;
  HEAP32[$1 + 184 >> 2] = $2;
  HEAP32[$1 + 180 >> 2] = $3;
  HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 188 >> 2] - 1;
  if (HEAP32[$1 + 188 >> 2]) {
   rustsecp256k1_v0_8_1_fe_normalize_weak((HEAP32[$1 + 184 >> 2] + Math_imul(HEAP32[$1 + 176 >> 2], 88) | 0) + 40 | 0);
   $2 = HEAP32[$1 + 180 >> 2] + Math_imul(HEAP32[$1 + 176 >> 2], 40) | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $1 + 136 | 0;
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $4 = $2 + 32 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $3 + 32 | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $4 = $2 + 24 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $3 + 24 | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $4 = $2 + 16 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $3 + 16 | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $2 + 8 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $3 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   while (1) {
    if (HEAP32[$1 + 176 >> 2]) {
     if (HEAP32[$1 + 176 >> 2] != (HEAP32[$1 + 188 >> 2] - 1 | 0)) {
      $2 = $1 + 136 | 0;
      rustsecp256k1_v0_8_1_fe_mul($2, $2, HEAP32[$1 + 180 >> 2] + Math_imul(HEAP32[$1 + 176 >> 2], 40) | 0);
     }
     HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 176 >> 2] - 1;
     $3 = HEAP32[$1 + 184 >> 2] + Math_imul(HEAP32[$1 + 176 >> 2], 88) | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $1 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $4 = $3 + 32 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = $2 + 32 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $4 = $3 + 24 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = $2 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $4 = $3 + 16 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = $2 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $5;
     $3 = $3 + 8 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 8 | 0;
     HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = (HEAP32[$1 + 184 >> 2] + Math_imul(HEAP32[$1 + 176 >> 2], 88) | 0) + 40 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 40 | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $5 = $3 + 32 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $8 = $4 + 32 | 0;
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $6;
     $5 = $3 + 24 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $6;
     $5 = $3 + 16 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $6;
     $3 = $3 + 8 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     HEAP32[$1 + 128 >> 2] = 0;
     rustsecp256k1_v0_8_1_ge_set_gej_zinv(HEAP32[$1 + 184 >> 2] + Math_imul(HEAP32[$1 + 176 >> 2], 88) | 0, $2, $1 + 136 | 0);
     continue;
    }
    break;
   };
  }
  __stack_pointer = $1 + 192 | 0;
  HEAP32[$0 + 208 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 + 208 >> 2] < HEAPU32[$0 + 204 >> 2]) {
    HEAP32[$0 + 216 >> 2] = 0;
    while (1) {
     if (HEAP32[$0 + 216 >> 2] < 8) {
      $1 = HEAP32[$0 + 1484 >> 2];
      $2 = HEAP32[$0 + 216 >> 2] + (HEAP32[$0 + 208 >> 2] << 3) | 0;
      rustsecp256k1_v0_8_1_fe_mul(HEAP32[$1 >> 2] + Math_imul($2, 40) | 0, HEAP32[$1 + 4 >> 2] + Math_imul($2, 88) | 0, 691552);
      HEAP32[$0 + 216 >> 2] = HEAP32[$0 + 216 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$0 + 208 >> 2] = HEAP32[$0 + 208 >> 2] + 1;
    continue;
   }
   break;
  };
  if (HEAP32[$0 + 1464 >> 2]) {
   $2 = HEAP32[$0 + 1464 >> 2];
   $1 = __stack_pointer - 16 | 0;
   $3 = $0 + 1304 | 0;
   HEAP32[$1 + 12 >> 2] = $3;
   $4 = $0 + 1272 | 0;
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 4 >> 2] = $2;
   $2 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = HEAP32[$1 + 12 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$2 + 12 >> 2];
   $6 = HEAP32[$1 + 12 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$6 + 12 >> 2] = $5;
   $2 = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   $2 = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 28 >> 2] = 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$2 + 20 >> 2];
   $6 = HEAP32[$1 + 8 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$2 + 28 >> 2];
   $6 = HEAP32[$1 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 24 >> 2];
   HEAP32[$6 + 12 >> 2] = $5;
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   $1 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 28 >> 2] = 0;
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ecmult_wnaf($0 + 752 | 0, $3, 4)), HEAP32[wasm2js_i32$0 + 748 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ecmult_wnaf($0 + 224 | 0, $4, 4)), HEAP32[wasm2js_i32$0 + 220 >> 2] = wasm2js_i32$1;
   if (HEAP32[$0 + 748 >> 2] > HEAP32[$0 + 212 >> 2]) {
    HEAP32[$0 + 212 >> 2] = HEAP32[$0 + 748 >> 2]
   }
   if (HEAP32[$0 + 220 >> 2] > HEAP32[$0 + 212 >> 2]) {
    HEAP32[$0 + 212 >> 2] = HEAP32[$0 + 220 >> 2]
   }
  }
  rustsecp256k1_v0_8_1_gej_set_infinity(HEAP32[$0 + 1480 >> 2]);
  HEAP32[$0 + 216 >> 2] = HEAP32[$0 + 212 >> 2] - 1;
  while (1) {
   if (HEAP32[$0 + 216 >> 2] >= 0) {
    $1 = HEAP32[$0 + 1480 >> 2];
    rustsecp256k1_v0_8_1_gej_double_var($1, $1, 0);
    HEAP32[$0 + 208 >> 2] = 0;
    while (1) {
     if (HEAPU32[$0 + 208 >> 2] < HEAPU32[$0 + 204 >> 2]) {
      label$21 : {
       if (HEAP32[$0 + 216 >> 2] >= HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 208 >> 2], 1040) | 0) + 1032 >> 2]) {
        break label$21
       }
       $1 = HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 208 >> 2], 1040) | 0) + (HEAP32[$0 + 216 >> 2] << 2) >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       if (!$1) {
        break label$21
       }
       $2 = HEAP32[HEAP32[$0 + 1484 >> 2] + 4 >> 2] + Math_imul(HEAP32[$0 + 208 >> 2], 704) | 0;
       $3 = HEAP32[$0 + 4 >> 2];
       $1 = __stack_pointer - 16 | 0;
       __stack_pointer = $1;
       $4 = $0 + 1376 | 0;
       HEAP32[$1 + 12 >> 2] = $4;
       HEAP32[$1 + 8 >> 2] = $2;
       HEAP32[$1 + 4 >> 2] = $3;
       HEAP32[$1 >> 2] = 5;
       label$1 : {
        if (HEAP32[$1 + 4 >> 2] > 0) {
         memcpy(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2] + Math_imul((HEAP32[$1 + 4 >> 2] - 1 | 0) / 2 | 0, 88) | 0, 88);
         break label$1;
        }
        memcpy(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2] + Math_imul((-1 - HEAP32[$1 + 4 >> 2] | 0) / 2 | 0, 88) | 0, 88);
        $2 = HEAP32[$1 + 12 >> 2] + 40 | 0;
        rustsecp256k1_v0_8_1_fe_negate($2, $2, 1);
       }
       __stack_pointer = $1 + 16 | 0;
       $1 = HEAP32[$0 + 1480 >> 2];
       rustsecp256k1_v0_8_1_gej_add_ge_var($1, $1, $4, 0);
      }
      label$22 : {
       if (HEAP32[$0 + 216 >> 2] >= HEAP32[(HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 208 >> 2], 1040) | 0) + 1036 >> 2]) {
        break label$22
       }
       $1 = HEAP32[((HEAP32[HEAP32[$0 + 1484 >> 2] + 8 >> 2] + Math_imul(HEAP32[$0 + 208 >> 2], 1040) | 0) + 516 | 0) + (HEAP32[$0 + 216 >> 2] << 2) >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       if (!$1) {
        break label$22
       }
       $1 = HEAP32[$0 + 1484 >> 2];
       $2 = HEAP32[$0 + 208 >> 2] << 3;
       $3 = HEAP32[$1 + 4 >> 2] + Math_imul($2, 88) | 0;
       $2 = HEAP32[$1 >> 2] + Math_imul($2, 40) | 0;
       $4 = HEAP32[$0 + 4 >> 2];
       $1 = __stack_pointer - 32 | 0;
       __stack_pointer = $1;
       $5 = $0 + 1376 | 0;
       HEAP32[$1 + 28 >> 2] = $5;
       HEAP32[$1 + 24 >> 2] = $3;
       HEAP32[$1 + 20 >> 2] = $2;
       HEAP32[$1 + 16 >> 2] = $4;
       HEAP32[$1 + 12 >> 2] = 5;
       label$10 : {
        if (HEAP32[$1 + 16 >> 2] > 0) {
         $2 = (HEAP32[$1 + 16 >> 2] - 1 | 0) / 2 | 0;
         rustsecp256k1_v0_8_1_ge_set_xy(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 20 >> 2] + Math_imul($2, 40) | 0, (HEAP32[$1 + 24 >> 2] + Math_imul($2, 88) | 0) + 40 | 0);
         break label$10;
        }
        $2 = (-1 - HEAP32[$1 + 16 >> 2] | 0) / 2 | 0;
        rustsecp256k1_v0_8_1_ge_set_xy(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 20 >> 2] + Math_imul($2, 40) | 0, (HEAP32[$1 + 24 >> 2] + Math_imul($2, 88) | 0) + 40 | 0);
        $2 = HEAP32[$1 + 28 >> 2] + 40 | 0;
        rustsecp256k1_v0_8_1_fe_negate($2, $2, 1);
       }
       __stack_pointer = $1 + 32 | 0;
       $1 = HEAP32[$0 + 1480 >> 2];
       rustsecp256k1_v0_8_1_gej_add_ge_var($1, $1, $5, 0);
      }
      HEAP32[$0 + 208 >> 2] = HEAP32[$0 + 208 >> 2] + 1;
      continue;
     }
     break;
    };
    label$23 : {
     if (HEAP32[$0 + 216 >> 2] >= HEAP32[$0 + 748 >> 2]) {
      break label$23
     }
     $1 = HEAP32[($0 + 752 | 0) + (HEAP32[$0 + 216 >> 2] << 2) >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     if (!$1) {
      break label$23
     }
     $1 = $0 + 1376 | 0;
     rustsecp256k1_v0_8_1_ecmult_table_get_ge_storage($1, 689296, HEAP32[$0 + 4 >> 2]);
     $2 = HEAP32[$0 + 1480 >> 2];
     rustsecp256k1_v0_8_1_gej_add_zinv_var($2, $2, $1, $0 + 1336 | 0);
    }
    label$24 : {
     if (HEAP32[$0 + 216 >> 2] >= HEAP32[$0 + 220 >> 2]) {
      break label$24
     }
     $1 = HEAP32[($0 + 224 | 0) + (HEAP32[$0 + 216 >> 2] << 2) >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     if (!$1) {
      break label$24
     }
     $1 = $0 + 1376 | 0;
     rustsecp256k1_v0_8_1_ecmult_table_get_ge_storage($1, 689552, HEAP32[$0 + 4 >> 2]);
     $2 = HEAP32[$0 + 1480 >> 2];
     rustsecp256k1_v0_8_1_gej_add_zinv_var($2, $2, $1, $0 + 1336 | 0);
    }
    HEAP32[$0 + 216 >> 2] = HEAP32[$0 + 216 >> 2] - 1;
    continue;
   }
   break;
  };
  if (!HEAP32[HEAP32[$0 + 1480 >> 2] + 120 >> 2]) {
   $1 = HEAP32[$0 + 1480 >> 2] + 80 | 0;
   rustsecp256k1_v0_8_1_fe_mul($1, $1, $0 + 1336 | 0);
  }
  __stack_pointer = $0 + 1488 | 0;
  __stack_pointer = $7 + 2096 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_eq_x_var($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 92 >> 2] = $0;
  HEAP32[$4 + 88 >> 2] = $1;
  $6 = $4 + 48 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($6, HEAP32[$4 + 88 >> 2] + 80 | 0);
  rustsecp256k1_v0_8_1_fe_mul($6, $6, HEAP32[$4 + 92 >> 2]);
  $0 = HEAP32[$4 + 88 >> 2];
  $2 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $4 + 8 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $2;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $2;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $2;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $3 = $1 + 8 | 0;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = $0;
  rustsecp256k1_v0_8_1_fe_normalize_weak($1);
  $0 = rustsecp256k1_v0_8_1_fe_equal_var($6, $1);
  __stack_pointer = $4 + 96 | 0;
  return $0;
 }
 
 function rustsecp256k1_v0_8_1_fe_cmp_var($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = 691016;
  HEAP32[$1 >> 2] = 4;
  label$1 : {
   while (1) {
    if (HEAP32[$1 >> 2] >= 0) {
     $0 = HEAP32[$1 >> 2] << 3;
     $2 = $0 + HEAP32[$1 + 8 >> 2] | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     $0 = HEAP32[$1 + 4 >> 2] + $0 | 0;
     $4 = HEAP32[$0 + 4 >> 2];
     if (($3 | 0) == ($4 | 0) & HEAPU32[$2 >> 2] > HEAPU32[$0 >> 2] | $3 >>> 0 > $4 >>> 0) {
      HEAP32[$1 + 12 >> 2] = 1;
      break label$1;
     }
     $0 = HEAP32[$1 >> 2] << 3;
     $2 = $0 + HEAP32[$1 + 8 >> 2] | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     $0 = HEAP32[$1 + 4 >> 2] + $0 | 0;
     $4 = HEAP32[$0 + 4 >> 2];
     if (($3 | 0) == ($4 | 0) & HEAPU32[$2 >> 2] < HEAPU32[$0 >> 2] | $3 >>> 0 < $4 >>> 0) {
      HEAP32[$1 + 12 >> 2] = -1;
      break label$1;
     } else {
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] - 1;
      continue;
     }
    }
    break;
   };
   HEAP32[$1 + 12 >> 2] = 0;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_fe_add($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $1 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$1 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $3 = $4 + HEAP32[$0 >> 2] | 0;
  $1 = HEAP32[$1 + 4 >> 2] + HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $3 = $4 + HEAP32[$0 + 8 >> 2] | 0;
  $1 = HEAP32[$1 + 12 >> 2] + HEAP32[$0 + 12 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$1 + 16 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $3 = $4 + HEAP32[$0 + 16 >> 2] | 0;
  $1 = HEAP32[$1 + 20 >> 2] + HEAP32[$0 + 20 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 20 >> 2] = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$1 + 24 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $3 = $4 + HEAP32[$0 + 24 >> 2] | 0;
  $1 = HEAP32[$1 + 28 >> 2] + HEAP32[$0 + 28 >> 2] | 0;
  HEAP32[$0 + 24 >> 2] = $3;
  HEAP32[$0 + 28 >> 2] = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  $1 = HEAP32[$2 + 8 >> 2];
  $3 = HEAP32[$1 + 32 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $2 = $3 + HEAP32[$0 + 32 >> 2] | 0;
  $1 = HEAP32[$1 + 36 >> 2] + HEAP32[$0 + 36 >> 2] | 0;
  HEAP32[$0 + 32 >> 2] = $2;
  HEAP32[$0 + 36 >> 2] = $2 >>> 0 < $3 >>> 0 ? $1 + 1 | 0 : $1;
 }
 
 function nonce_function_rfc6979($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 288 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 284 >> 2] = $0;
  HEAP32[$6 + 280 >> 2] = $1;
  HEAP32[$6 + 276 >> 2] = $2;
  HEAP32[$6 + 272 >> 2] = $3;
  HEAP32[$6 + 268 >> 2] = $4;
  HEAP32[$6 + 264 >> 2] = $5;
  HEAP32[$6 + 140 >> 2] = 0;
  $0 = $6 + 32 | 0;
  rustsecp256k1_v0_8_1_scalar_set_b32($0, HEAP32[$6 + 280 >> 2], 0);
  rustsecp256k1_v0_8_1_scalar_get_b32($6, $0);
  $0 = $6 + 144 | 0;
  $1 = $6 + 140 | 0;
  buffer_append($0, $1, HEAP32[$6 + 276 >> 2], 32);
  buffer_append($0, $1, $6, 32);
  if (HEAP32[$6 + 268 >> 2]) {
   buffer_append($6 + 144 | 0, $6 + 140 | 0, HEAP32[$6 + 268 >> 2], 32)
  }
  if (HEAP32[$6 + 272 >> 2]) {
   buffer_append($6 + 144 | 0, $6 + 140 | 0, HEAP32[$6 + 272 >> 2], 16)
  }
  $0 = $6 + 144 | 0;
  rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_initialize($6 + 72 | 0, $0, HEAP32[$6 + 140 >> 2]);
  memset($0, 112);
  HEAP32[$6 + 68 >> 2] = 0;
  while (1) {
   if (!(HEAPU32[$6 + 68 >> 2] > HEAPU32[$6 + 264 >> 2])) {
    rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_generate($6 + 72 | 0, HEAP32[$6 + 284 >> 2]);
    HEAP32[$6 + 68 >> 2] = HEAP32[$6 + 68 >> 2] + 1;
    continue;
   }
   break;
  };
  rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_finalize($6 + 72 | 0);
  __stack_pointer = $6 + 288 | 0;
  return 1;
 }
 
 function buffer_append($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  memcpy(HEAP32[$4 + 12 >> 2] + HEAP32[HEAP32[$4 + 8 >> 2] >> 2] | 0, HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  $0 = HEAP32[$4 + 8 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + HEAP32[$4 >> 2];
  __stack_pointer = $4 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_initialize($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 224 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 220 >> 2] = $0;
  HEAP32[$3 + 216 >> 2] = $1;
  HEAP32[$3 + 212 >> 2] = $2;
  $0 = HEAP32[$3 + 220 >> 2];
  HEAP32[$0 >> 2] = 16843009;
  HEAP32[$0 + 4 >> 2] = 16843009;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 16843009;
  HEAP32[$1 + 4 >> 2] = 16843009;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 16843009;
  HEAP32[$1 + 4 >> 2] = 16843009;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 16843009;
  HEAP32[$0 + 4 >> 2] = 16843009;
  $0 = HEAP32[$3 + 220 >> 2] + 32 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  rustsecp256k1_v0_8_1_hmac_sha256_initialize($3, HEAP32[$3 + 220 >> 2] + 32 | 0);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, HEAP32[$3 + 220 >> 2], 32);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, 691144, 1);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, HEAP32[$3 + 216 >> 2], HEAP32[$3 + 212 >> 2]);
  rustsecp256k1_v0_8_1_hmac_sha256_finalize($3, HEAP32[$3 + 220 >> 2] + 32 | 0);
  rustsecp256k1_v0_8_1_hmac_sha256_initialize($3, HEAP32[$3 + 220 >> 2] + 32 | 0);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, HEAP32[$3 + 220 >> 2], 32);
  rustsecp256k1_v0_8_1_hmac_sha256_finalize($3, HEAP32[$3 + 220 >> 2]);
  rustsecp256k1_v0_8_1_hmac_sha256_initialize($3, HEAP32[$3 + 220 >> 2] + 32 | 0);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, HEAP32[$3 + 220 >> 2], 32);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, 691145, 1);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, HEAP32[$3 + 216 >> 2], HEAP32[$3 + 212 >> 2]);
  rustsecp256k1_v0_8_1_hmac_sha256_finalize($3, HEAP32[$3 + 220 >> 2] + 32 | 0);
  rustsecp256k1_v0_8_1_hmac_sha256_initialize($3, HEAP32[$3 + 220 >> 2] + 32 | 0);
  rustsecp256k1_v0_8_1_hmac_sha256_write($3, HEAP32[$3 + 220 >> 2], 32);
  rustsecp256k1_v0_8_1_hmac_sha256_finalize($3, HEAP32[$3 + 220 >> 2]);
  HEAP32[HEAP32[$3 + 220 >> 2] + 64 >> 2] = 0;
  __stack_pointer = $3 + 224 | 0;
 }
 
 function rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_generate($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 448 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 444 >> 2] = $0;
  HEAP32[$2 + 440 >> 2] = $1;
  HEAP32[$2 + 436 >> 2] = 32;
  if (HEAP32[HEAP32[$2 + 444 >> 2] + 64 >> 2]) {
   $0 = $2 + 224 | 0;
   rustsecp256k1_v0_8_1_hmac_sha256_initialize($0, HEAP32[$2 + 444 >> 2] + 32 | 0);
   rustsecp256k1_v0_8_1_hmac_sha256_write($0, HEAP32[$2 + 444 >> 2], 32);
   rustsecp256k1_v0_8_1_hmac_sha256_write($0, 691146, 1);
   rustsecp256k1_v0_8_1_hmac_sha256_finalize($0, HEAP32[$2 + 444 >> 2] + 32 | 0);
   rustsecp256k1_v0_8_1_hmac_sha256_initialize($0, HEAP32[$2 + 444 >> 2] + 32 | 0);
   rustsecp256k1_v0_8_1_hmac_sha256_write($0, HEAP32[$2 + 444 >> 2], 32);
   rustsecp256k1_v0_8_1_hmac_sha256_finalize($0, HEAP32[$2 + 444 >> 2]);
  }
  while (1) {
   if (HEAP32[$2 + 436 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 436 >> 2];
    $0 = $2 + 16 | 0;
    rustsecp256k1_v0_8_1_hmac_sha256_initialize($0, HEAP32[$2 + 444 >> 2] + 32 | 0);
    rustsecp256k1_v0_8_1_hmac_sha256_write($0, HEAP32[$2 + 444 >> 2], 32);
    rustsecp256k1_v0_8_1_hmac_sha256_finalize($0, HEAP32[$2 + 444 >> 2]);
    if (HEAP32[$2 + 12 >> 2] > 32) {
     HEAP32[$2 + 12 >> 2] = 32
    }
    memcpy(HEAP32[$2 + 440 >> 2], HEAP32[$2 + 444 >> 2], HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 440 >> 2] = HEAP32[$2 + 440 >> 2] + HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 436 >> 2] = HEAP32[$2 + 436 >> 2] - HEAP32[$2 + 12 >> 2];
    continue;
   }
   break;
  };
  HEAP32[HEAP32[$2 + 444 >> 2] + 64 >> 2] = 1;
  __stack_pointer = $2 + 448 | 0;
 }
 
 function rustsecp256k1_v0_8_1_rfc6979_hmac_sha256_finalize($0) {
  var $1 = 0, $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$2 + 12 >> 2] + 32 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[HEAP32[$2 + 12 >> 2] + 64 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_ecdsa_sign_inner($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 192 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 188 >> 2] = $0;
  HEAP32[$8 + 184 >> 2] = $1;
  HEAP32[$8 + 180 >> 2] = $2;
  HEAP32[$8 + 176 >> 2] = $3;
  HEAP32[$8 + 172 >> 2] = $4;
  HEAP32[$8 + 168 >> 2] = $5;
  HEAP32[$8 + 164 >> 2] = $6;
  HEAP32[$8 + 160 >> 2] = $7;
  HEAP32[$8 + 60 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 0;
  $0 = HEAP32[$8 + 184 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = HEAP32[$8 + 180 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  if (HEAP32[$8 + 176 >> 2]) {
   HEAP32[HEAP32[$8 + 176 >> 2] >> 2] = 0
  }
  if (!HEAP32[$8 + 164 >> 2]) {
   HEAP32[$8 + 164 >> 2] = 6
  }
  $0 = $8 + 128 | 0;
  (wasm2js_i32$0 = $8, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_set_b32_seckey($0, HEAP32[$8 + 168 >> 2])), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
  rustsecp256k1_v0_8_1_scalar_cmov($0, 690552, (HEAP32[$8 + 56 >> 2] != 0 ^ -1) & 1);
  rustsecp256k1_v0_8_1_scalar_set_b32($8 - -64 | 0, HEAP32[$8 + 172 >> 2], 0);
  while (1) {
   label$3 : {
    (wasm2js_i32$0 = $8, wasm2js_i32$1 = (FUNCTION_TABLE[HEAP32[$8 + 164 >> 2]]($8 + 16 | 0, HEAP32[$8 + 172 >> 2], HEAP32[$8 + 168 >> 2], 0, HEAP32[$8 + 160 >> 2], HEAP32[$8 + 12 >> 2]) | 0) != 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
    if (!HEAP32[$8 + 60 >> 2]) {
     break label$3
    }
    (wasm2js_i32$0 = $8, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_set_b32_seckey($8 + 96 | 0, $8 + 16 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    $0 = __stack_pointer - 16 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$8 + 188 >> 2];
    HEAP32[$0 + 8 >> 2] = $8 + 8;
    HEAP32[$0 + 4 >> 2] = 4;
    if (HEAP32[$8 + 8 >> 2]) {
     $0 = HEAP32[$8 + 184 >> 2];
     $2 = HEAP32[$8 + 180 >> 2];
     $3 = HEAP32[$8 + 176 >> 2];
     $1 = __stack_pointer - 320 | 0;
     __stack_pointer = $1;
     HEAP32[$1 + 316 >> 2] = HEAP32[$8 + 188 >> 2];
     HEAP32[$1 + 312 >> 2] = $0;
     HEAP32[$1 + 308 >> 2] = $2;
     HEAP32[$1 + 304 >> 2] = $8 + 128;
     HEAP32[$1 + 300 >> 2] = $8 - -64;
     HEAP32[$1 + 296 >> 2] = $8 + 96;
     HEAP32[$1 + 292 >> 2] = $3;
     HEAP32[$1 + 4 >> 2] = 0;
     $2 = $1 + 128 | 0;
     rustsecp256k1_v0_8_1_ecmult_gen(HEAP32[$1 + 316 >> 2], $2, HEAP32[$1 + 296 >> 2]);
     $0 = $1 + 40 | 0;
     rustsecp256k1_v0_8_1_ge_set_gej($0, $2);
     rustsecp256k1_v0_8_1_fe_normalize($0);
     rustsecp256k1_v0_8_1_fe_normalize($0 + 40 | 0);
     $2 = $1 + 256 | 0;
     rustsecp256k1_v0_8_1_fe_get_b32($2, $0);
     rustsecp256k1_v0_8_1_scalar_set_b32(HEAP32[$1 + 312 >> 2], $2, $1 + 4 | 0);
     if (HEAP32[$1 + 292 >> 2]) {
      $0 = HEAP32[$1 + 4 >> 2] << 1;
      $2 = __stack_pointer - 16 | 0;
      HEAP32[$2 + 12 >> 2] = $1 + 80;
      HEAP32[HEAP32[$1 + 292 >> 2] >> 2] = $0 | HEAP32[HEAP32[$2 + 12 >> 2] >> 2] & 1;
     }
     $2 = $1 + 8 | 0;
     rustsecp256k1_v0_8_1_scalar_mul($2, HEAP32[$1 + 312 >> 2], HEAP32[$1 + 304 >> 2]);
     rustsecp256k1_v0_8_1_scalar_add($2, $2, HEAP32[$1 + 300 >> 2]);
     $3 = HEAP32[$1 + 296 >> 2];
     $0 = __stack_pointer - 48 | 0;
     __stack_pointer = $0;
     HEAP32[$0 + 44 >> 2] = HEAP32[$1 + 308 >> 2];
     HEAP32[$0 + 40 >> 2] = $3;
     rustsecp256k1_v0_8_1_scalar_to_signed62($0, HEAP32[$0 + 40 >> 2]);
     rustsecp256k1_v0_8_1_modinv64($0, 691096);
     rustsecp256k1_v0_8_1_scalar_from_signed62(HEAP32[$0 + 44 >> 2], $0);
     __stack_pointer = $0 + 48 | 0;
     $0 = HEAP32[$1 + 308 >> 2];
     rustsecp256k1_v0_8_1_scalar_mul($0, $0, $2);
     rustsecp256k1_v0_8_1_scalar_clear($2);
     rustsecp256k1_v0_8_1_gej_clear($1 + 128 | 0);
     rustsecp256k1_v0_8_1_ge_clear($1 + 40 | 0);
     (wasm2js_i32$0 = $1, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_is_high(HEAP32[$1 + 308 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $2 = HEAP32[$1 >> 2];
     $0 = __stack_pointer - 48 | 0;
     __stack_pointer = $0;
     HEAP32[$0 + 44 >> 2] = HEAP32[$1 + 308 >> 2];
     HEAP32[$0 + 40 >> 2] = $2;
     $2 = ((HEAP32[$0 + 40 >> 2] != 0 ^ -1) & 1) - 1 | 0;
     HEAP32[$0 + 32 >> 2] = $2;
     HEAP32[$0 + 36 >> 2] = $2 >> 31;
     $2 = ((rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$0 + 44 >> 2]) | 0) != 0) - 1 | 0;
     HEAP32[$0 + 24 >> 2] = $2;
     HEAP32[$0 + 28 >> 2] = $2 >> 31;
     $2 = HEAP32[$0 + 44 >> 2];
     rustsecp256k1_v0_8_1_u128_from_u64($0, HEAP32[$2 >> 2] ^ HEAP32[$0 + 32 >> 2], HEAP32[$2 + 4 >> 2] ^ HEAP32[$0 + 36 >> 2]);
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$0 + 32 >> 2] & -801750718, HEAP32[$0 + 36 >> 2] & -1076732276);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $0;
     $2 = HEAP32[$2 + 12 >> 2];
     i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = HEAP32[$0 + 44 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$0 + 24 >> 2] & HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $3 & i64toi32_i32$HIGH_BITS;
     rustsecp256k1_v0_8_1_u128_rshift($0, 64);
     $2 = HEAP32[$0 + 44 >> 2];
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$2 + 8 >> 2] ^ HEAP32[$0 + 32 >> 2], HEAP32[$2 + 12 >> 2] ^ HEAP32[$0 + 36 >> 2]);
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$0 + 32 >> 2] & -1354194885, HEAP32[$0 + 36 >> 2] & -1162945306);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $0;
     $2 = HEAP32[$2 + 12 >> 2];
     i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = HEAP32[$0 + 44 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 24 >> 2] & HEAP32[$2 >> 2];
     HEAP32[$4 + 12 >> 2] = $3 & i64toi32_i32$HIGH_BITS;
     rustsecp256k1_v0_8_1_u128_rshift($0, 64);
     $2 = HEAP32[$0 + 44 >> 2];
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$2 + 16 >> 2] ^ HEAP32[$0 + 32 >> 2], HEAP32[$2 + 20 >> 2] ^ HEAP32[$0 + 36 >> 2]);
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$0 + 32 >> 2] & -2, HEAP32[$0 + 36 >> 2]);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $0;
     $2 = HEAP32[$2 + 12 >> 2];
     i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = HEAP32[$0 + 44 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[$0 + 24 >> 2] & HEAP32[$2 >> 2];
     HEAP32[$4 + 20 >> 2] = $3 & i64toi32_i32$HIGH_BITS;
     rustsecp256k1_v0_8_1_u128_rshift($0, 64);
     $2 = HEAP32[$0 + 44 >> 2];
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$2 + 24 >> 2] ^ HEAP32[$0 + 32 >> 2], HEAP32[$2 + 28 >> 2] ^ HEAP32[$0 + 36 >> 2]);
     rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]);
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 12 >> 2] = $0;
     $2 = HEAP32[$2 + 12 >> 2];
     i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = HEAP32[$0 + 44 >> 2];
     HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 24 >> 2] & HEAP32[$2 >> 2];
     HEAP32[$4 + 28 >> 2] = $3 & i64toi32_i32$HIGH_BITS;
     __stack_pointer = $0 + 48 | 0;
     if (HEAP32[$1 + 292 >> 2]) {
      $0 = HEAP32[$1 + 292 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$1 >> 2];
     }
     $0 = (rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$1 + 312 >> 2]) | 0) != 0 ^ -1;
     $2 = ((rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$1 + 308 >> 2]) | 0) != 0 ^ -1) & 1;
     __stack_pointer = $1 + 320 | 0;
     HEAP32[$8 + 60 >> 2] = $0 & 1 & $2;
     $0 = __stack_pointer - 16 | 0;
     HEAP32[$0 + 12 >> 2] = HEAP32[$8 + 188 >> 2];
     HEAP32[$0 + 8 >> 2] = $8 + 60;
     HEAP32[$0 + 4 >> 2] = 4;
     if (HEAP32[$8 + 60 >> 2]) {
      break label$3
     }
    }
    HEAP32[$8 + 12 >> 2] = HEAP32[$8 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 60 >> 2] & HEAP32[$8 + 56 >> 2];
  $0 = $8 + 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  rustsecp256k1_v0_8_1_scalar_clear($8 - -64 | 0);
  rustsecp256k1_v0_8_1_scalar_clear($8 + 96 | 0);
  rustsecp256k1_v0_8_1_scalar_clear($8 + 128 | 0);
  rustsecp256k1_v0_8_1_scalar_cmov(HEAP32[$8 + 184 >> 2], 690440, (HEAP32[$8 + 60 >> 2] != 0 ^ -1) & 1);
  rustsecp256k1_v0_8_1_scalar_cmov(HEAP32[$8 + 180 >> 2], 690440, (HEAP32[$8 + 60 >> 2] != 0 ^ -1) & 1);
  if (HEAP32[$8 + 176 >> 2]) {
   HEAP32[$8 + 4 >> 2] = 0;
   $1 = (HEAP32[$8 + 60 >> 2] != 0 ^ -1) & 1;
   $0 = __stack_pointer - 32 | 0;
   HEAP32[$0 + 28 >> 2] = HEAP32[$8 + 176 >> 2];
   HEAP32[$0 + 24 >> 2] = $8 + 4;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 >> 2] = HEAP32[$0 + 20 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 >> 2] - 1;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 16 >> 2] ^ -1;
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] & HEAP32[$0 + 16 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] & HEAP32[$0 + 12 >> 2];
   HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = HEAP32[$0 + 8 >> 2] | HEAP32[$0 + 4 >> 2];
  }
  __stack_pointer = $8 + 192 | 0;
  return HEAP32[$8 + 60 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_scalar_set_b32_seckey($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  rustsecp256k1_v0_8_1_scalar_set_b32(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
  $0 = HEAP32[$2 + 4 >> 2] != 0 ^ -1;
  $1 = ((rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$2 + 12 >> 2]) | 0) != 0 ^ -1) & 1;
  __stack_pointer = $2 + 16 | 0;
  return $0 & 1 & $1;
 }
 
 function rustsecp256k1_v0_8_1_scalar_cmov($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$3 + 20 >> 2];
  $1 = $0 - 1 | 0;
  $0 = ($0 >> 31) - 1 | 0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = ($1 | 0) != -1 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2] ^ -1;
  HEAP32[$3 + 4 >> 2] = $0 ^ -1;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 >> 2] & HEAP32[$3 + 8 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] & HEAP32[$3 + 12 >> 2];
  $4 = HEAP32[$3 + 24 >> 2];
  $5 = HEAP32[$4 >> 2] & HEAP32[$3 >> 2];
  $4 = HEAP32[$4 + 4 >> 2] & HEAP32[$3 + 4 >> 2];
  HEAP32[$0 >> 2] = $1 | $5;
  HEAP32[$0 + 4 >> 2] = $2 | $4;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 8 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 8 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 12 >> 2] & HEAP32[$3 + 4 >> 2];
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$5 + 8 >> 2] = $1 | $4;
  HEAP32[$5 + 12 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 16 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 20 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 16 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 20 >> 2] & HEAP32[$3 + 4 >> 2];
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$5 + 16 >> 2] = $1 | $4;
  HEAP32[$5 + 20 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 24 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 28 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 24 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 28 >> 2] & HEAP32[$3 + 4 >> 2];
  $3 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 24 >> 2] = $1 | $4;
  HEAP32[$3 + 28 >> 2] = $0 | $2;
 }
 
 function rustsecp256k1_v0_8_1_ec_pubkey_create_helper($0, $1, $2, $3) {
  var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 156 >> 2] = $0;
  HEAP32[$4 + 152 >> 2] = $1;
  HEAP32[$4 + 148 >> 2] = $2;
  HEAP32[$4 + 144 >> 2] = $3;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_set_b32_seckey(HEAP32[$4 + 152 >> 2], HEAP32[$4 + 144 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  rustsecp256k1_v0_8_1_scalar_cmov(HEAP32[$4 + 152 >> 2], 690552, (HEAP32[$4 + 12 >> 2] != 0 ^ -1) & 1);
  $0 = $4 + 16 | 0;
  rustsecp256k1_v0_8_1_ecmult_gen(HEAP32[$4 + 156 >> 2], $0, HEAP32[$4 + 152 >> 2]);
  rustsecp256k1_v0_8_1_ge_set_gej(HEAP32[$4 + 148 >> 2], $0);
  __stack_pointer = $4 + 160 | 0;
  return HEAP32[$4 + 12 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_memczero($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 11 | 0] = 0 - (HEAP32[$3 + 12 >> 2] & 255);
  while (1) {
   if (HEAP32[$3 + 24 >> 2]) {
    $0 = HEAP32[$3 + 16 >> 2];
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (HEAPU8[$3 + 11 | 0] ^ -1);
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - 1;
    continue;
   }
   break;
  };
 }
 
 function rustsecp256k1_v0_8_1_ecmult_gen($0, $1, $2) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 224 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 220 >> 2] = $0;
  HEAP32[$3 + 216 >> 2] = $1;
  HEAP32[$3 + 212 >> 2] = $2;
  HEAP32[$3 + 208 >> 2] = 2;
  HEAP32[$3 + 204 >> 2] = 1 << HEAP32[$3 + 208 >> 2];
  HEAP32[$3 + 200 >> 2] = 256 / HEAP32[$3 + 208 >> 2];
  $0 = $3 + 48 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  memcpy(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 220 >> 2] + 40 | 0, 128);
  rustsecp256k1_v0_8_1_scalar_add($3 + 16 | 0, HEAP32[$3 + 212 >> 2], HEAP32[$3 + 220 >> 2] + 8 | 0);
  HEAP32[$3 + 192 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 200 >> 2]) {
    $0 = HEAP32[$3 + 208 >> 2];
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_get_bits($3 + 16 | 0, Math_imul($0, HEAP32[$3 + 12 >> 2]), $0)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
    HEAP32[$3 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 204 >> 2]) {
      $0 = HEAP32[$3 + 8 >> 2];
      $1 = ((HEAP32[$3 + 12 >> 2] << 8) + 656528 | 0) + ($0 << 6) | 0;
      $2 = HEAP32[$3 + 4 >> 2] == ($0 | 0);
      $0 = __stack_pointer - 16 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 12 >> 2] = $3 + 48;
      HEAP32[$0 + 8 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = $2;
      rustsecp256k1_v0_8_1_scalar_cmov(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
      rustsecp256k1_v0_8_1_scalar_cmov(HEAP32[$0 + 12 >> 2] + 32 | 0, HEAP32[$0 + 8 >> 2] + 32 | 0, HEAP32[$0 + 4 >> 2]);
      __stack_pointer = $0 + 16 | 0;
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
      continue;
     }
     break;
    };
    $0 = $3 + 112 | 0;
    rustsecp256k1_v0_8_1_ge_from_storage($0, $3 + 48 | 0);
    $1 = HEAP32[$3 + 216 >> 2];
    rustsecp256k1_v0_8_1_gej_add_ge($1, $1, $0);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$3 + 4 >> 2] = 0;
  rustsecp256k1_v0_8_1_ge_clear($3 + 112 | 0);
  rustsecp256k1_v0_8_1_scalar_clear($3 + 16 | 0);
  __stack_pointer = $3 + 224 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ge_set_gej($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 92 >> 2] = $0;
  HEAP32[$5 + 88 >> 2] = $1;
  HEAP32[HEAP32[$5 + 92 >> 2] + 80 >> 2] = HEAP32[HEAP32[$5 + 88 >> 2] + 120 >> 2];
  $0 = __stack_pointer - 96 | 0;
  __stack_pointer = $0;
  $1 = HEAP32[$5 + 88 >> 2] + 80 | 0;
  HEAP32[$0 + 92 >> 2] = $1;
  HEAP32[$0 + 88 >> 2] = $1;
  $2 = HEAP32[$0 + 88 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $4 = $2 + 32 | 0;
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 32 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $3;
  $4 = $2 + 24 | 0;
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $3;
  $4 = $2 + 16 | 0;
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $3;
  $2 = $2 + 8 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  rustsecp256k1_v0_8_1_fe_normalize($1);
  $2 = $0 + 8 | 0;
  rustsecp256k1_v0_8_1_fe_to_signed62($2, $1);
  rustsecp256k1_v0_8_1_modinv64($2, 691280);
  rustsecp256k1_v0_8_1_fe_from_signed62(HEAP32[$0 + 92 >> 2], $2);
  __stack_pointer = $0 + 96 | 0;
  $0 = $5 + 48 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($0, HEAP32[$5 + 88 >> 2] + 80 | 0);
  $1 = $5 + 8 | 0;
  rustsecp256k1_v0_8_1_fe_mul($1, HEAP32[$5 + 88 >> 2] + 80 | 0, $0);
  rustsecp256k1_v0_8_1_fe_mul(HEAP32[$5 + 88 >> 2], HEAP32[$5 + 88 >> 2], $0);
  $0 = HEAP32[$5 + 88 >> 2] + 40 | 0;
  rustsecp256k1_v0_8_1_fe_mul($0, $0, $1);
  rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$5 + 88 >> 2] + 80 | 0, 1);
  $0 = HEAP32[$5 + 88 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 92 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 32 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $0 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $0 + 16 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $0 = HEAP32[$5 + 88 >> 2] + 40 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 92 >> 2] + 40 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 32 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $0 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $0 + 16 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  __stack_pointer = $5 + 96 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ec_seckey_negate($0, $1) {
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = 0;
  label$1 : {
   if ((HEAP32[$2 + 52 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 56 >> 2] + 168 | 0, 690425);
    HEAP32[$2 + 60 >> 2] = 0;
    break label$1;
   }
   $0 = $2 + 16 | 0;
   (wasm2js_i32$0 = $2, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_set_b32_seckey($0, HEAP32[$2 + 52 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   rustsecp256k1_v0_8_1_scalar_cmov($0, 690440, (HEAP32[$2 + 12 >> 2] != 0 ^ -1) & 1);
   rustsecp256k1_v0_8_1_scalar_negate($0, $0);
   rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$2 + 52 >> 2], $0);
   rustsecp256k1_v0_8_1_scalar_clear($0);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_fe_normalize_weak($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer + -64 | 0;
  HEAP32[$1 + 60 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2] >>> 16;
  HEAP32[$1 + 12 >> 2] = 0;
  $0 = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0 & 65535;
  $2 = __wasm_i64_mul(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 977, 1);
  $0 = i64toi32_i32$HIGH_BITS + HEAP32[$1 + 52 >> 2] | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 48 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 52 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 44 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 36 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 24 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 28 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 16 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 36 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_fe_negate($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 4 >> 2] + 1 | 0;
  $0 = __wasm_i64_mul($0, $0 >> 31, -1954, 2097149);
  $2 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 >> 2] = $0 - $1;
  HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS - (($0 >>> 0 < $1 >>> 0) + $2 | 0);
  $0 = HEAP32[$3 + 4 >> 2] + 1 | 0;
  $0 = __wasm_i64_mul($0, $0 >> 31, -2, 2097151);
  $2 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  $2 = HEAP32[$2 + 12 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = $0 - $1;
  HEAP32[$4 + 12 >> 2] = i64toi32_i32$HIGH_BITS - (($0 >>> 0 < $1 >>> 0) + $2 | 0);
  $0 = HEAP32[$3 + 4 >> 2] + 1 | 0;
  $0 = __wasm_i64_mul($0, $0 >> 31, -2, 2097151);
  $2 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$2 + 16 >> 2];
  $2 = HEAP32[$2 + 20 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 16 >> 2] = $0 - $1;
  HEAP32[$4 + 20 >> 2] = i64toi32_i32$HIGH_BITS - (($0 >>> 0 < $1 >>> 0) + $2 | 0);
  $0 = HEAP32[$3 + 4 >> 2] + 1 | 0;
  $0 = __wasm_i64_mul($0, $0 >> 31, -2, 2097151);
  $2 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $2 = HEAP32[$2 + 28 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 24 >> 2] = $0 - $1;
  HEAP32[$4 + 28 >> 2] = i64toi32_i32$HIGH_BITS - (($0 >>> 0 < $1 >>> 0) + $2 | 0);
  $0 = HEAP32[$3 + 4 >> 2] + 1 | 0;
  $0 = __wasm_i64_mul($0, $0 >> 31, -2, 131071);
  $2 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$2 + 32 >> 2];
  $2 = HEAP32[$2 + 36 >> 2];
  $3 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 32 >> 2] = $0 - $1;
  HEAP32[$3 + 36 >> 2] = i64toi32_i32$HIGH_BITS - (($0 >>> 0 < $1 >>> 0) + $2 | 0);
 }
 
 function rustsecp256k1_v0_8_1_ec_seckey_tweak_add($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  HEAP32[$1 + 52 >> 2] = 692344;
  HEAP32[$1 + 48 >> 2] = 692505;
  HEAP32[$1 + 12 >> 2] = 0;
  label$1 : {
   if ((HEAP32[$1 + 52 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 56 >> 2] + 168 | 0, 690425);
    HEAP32[$1 + 60 >> 2] = 0;
    break label$1;
   }
   if ((HEAP32[$1 + 48 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$1 + 56 >> 2] + 168 | 0, 690472);
    HEAP32[$1 + 60 >> 2] = 0;
    break label$1;
   }
   $3 = $1 + 16 | 0;
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_set_b32_seckey($3, HEAP32[$1 + 52 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   $2 = HEAP32[$1 + 48 >> 2];
   $0 = __stack_pointer - 48 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 44 >> 2] = $3;
   HEAP32[$0 + 40 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   $5 = $0 + 8 | 0;
   rustsecp256k1_v0_8_1_scalar_set_b32($5, HEAP32[$0 + 40 >> 2], $0 + 4 | 0);
   $6 = (HEAP32[$0 + 4 >> 2] != 0 ^ -1) & 1;
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 44 >> 2];
   HEAP32[$2 + 8 >> 2] = $5;
   $4 = HEAP32[$2 + 12 >> 2];
   rustsecp256k1_v0_8_1_scalar_add($4, $4, HEAP32[$2 + 8 >> 2]);
   $4 = (rustsecp256k1_v0_8_1_scalar_is_zero(HEAP32[$2 + 12 >> 2]) | 0) != 0 ^ -1;
   __stack_pointer = $2 + 16 | 0;
   HEAP32[$0 >> 2] = $6 & ($4 & 1);
   rustsecp256k1_v0_8_1_scalar_clear($5);
   __stack_pointer = $0 + 48 | 0;
   HEAP32[$1 + 12 >> 2] = HEAP32[$0 >> 2] & HEAP32[$1 + 12 >> 2];
   rustsecp256k1_v0_8_1_scalar_cmov($3, 690440, (HEAP32[$1 + 12 >> 2] != 0 ^ -1) & 1);
   rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$1 + 52 >> 2], $3);
   rustsecp256k1_v0_8_1_scalar_clear($3);
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ec_pubkey_tweak_add_helper($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = 0;
  rustsecp256k1_v0_8_1_scalar_set_b32($2 + 8 | 0, HEAP32[$2 + 40 >> 2], $2 + 4 | 0);
  $0 = 0;
  if (!HEAP32[$2 + 4 >> 2]) {
   $0 = __stack_pointer - 176 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 168 >> 2] = HEAP32[$2 + 44 >> 2];
   HEAP32[$0 + 164 >> 2] = $2 + 8;
   $1 = $0 + 32 | 0;
   rustsecp256k1_v0_8_1_gej_set_ge($1, HEAP32[$0 + 168 >> 2]);
   rustsecp256k1_v0_8_1_scalar_set_int($0, 1);
   rustsecp256k1_v0_8_1_ecmult($1, $1, $0, HEAP32[$0 + 164 >> 2]);
   $3 = __stack_pointer - 16 | 0;
   HEAP32[$3 + 12 >> 2] = $1;
   label$1 : {
    if (HEAP32[HEAP32[$3 + 12 >> 2] + 120 >> 2]) {
     HEAP32[$0 + 172 >> 2] = 0;
     break label$1;
    }
    rustsecp256k1_v0_8_1_ge_set_gej(HEAP32[$0 + 168 >> 2], $0 + 32 | 0);
    HEAP32[$0 + 172 >> 2] = 1;
   }
   __stack_pointer = $0 + 176 | 0;
   $0 = HEAP32[$0 + 172 >> 2] != 0;
  }
  __stack_pointer = $2 + 48 | 0;
  return $0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_set_int($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_cmov($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$3 + 20 >> 2];
  $1 = $0 - 1 | 0;
  $0 = ($0 >> 31) - 1 | 0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = ($1 | 0) != -1 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2] ^ -1;
  HEAP32[$3 + 4 >> 2] = $0 ^ -1;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 >> 2] & HEAP32[$3 + 8 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] & HEAP32[$3 + 12 >> 2];
  $4 = HEAP32[$3 + 24 >> 2];
  $5 = HEAP32[$4 >> 2] & HEAP32[$3 >> 2];
  $4 = HEAP32[$4 + 4 >> 2] & HEAP32[$3 + 4 >> 2];
  HEAP32[$0 >> 2] = $1 | $5;
  HEAP32[$0 + 4 >> 2] = $2 | $4;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 8 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 8 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 12 >> 2] & HEAP32[$3 + 4 >> 2];
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$5 + 8 >> 2] = $1 | $4;
  HEAP32[$5 + 12 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 16 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 20 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 16 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 20 >> 2] & HEAP32[$3 + 4 >> 2];
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$5 + 16 >> 2] = $1 | $4;
  HEAP32[$5 + 20 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 24 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 28 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 24 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 28 >> 2] & HEAP32[$3 + 4 >> 2];
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$5 + 24 >> 2] = $1 | $4;
  HEAP32[$5 + 28 >> 2] = $0 | $2;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$0 + 32 >> 2] & HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$0 + 36 >> 2] & HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 24 >> 2];
  $4 = HEAP32[$2 + 32 >> 2] & HEAP32[$3 >> 2];
  $2 = HEAP32[$2 + 36 >> 2] & HEAP32[$3 + 4 >> 2];
  $3 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 32 >> 2] = $1 | $4;
  HEAP32[$3 + 36 >> 2] = $0 | $2;
 }
 
 function rustsecp256k1_v0_8_1_gej_rescale($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  rustsecp256k1_v0_8_1_fe_is_zero(HEAP32[$2 + 40 >> 2]);
  rustsecp256k1_v0_8_1_fe_sqr($2, HEAP32[$2 + 40 >> 2]);
  $0 = HEAP32[$2 + 44 >> 2];
  rustsecp256k1_v0_8_1_fe_mul($0, $0, $2);
  $0 = HEAP32[$2 + 44 >> 2] + 40 | 0;
  rustsecp256k1_v0_8_1_fe_mul($0, $0, $2);
  rustsecp256k1_v0_8_1_fe_mul(HEAP32[$2 + 44 >> 2] + 40 | 0, HEAP32[$2 + 44 >> 2] + 40 | 0, HEAP32[$2 + 40 >> 2]);
  $0 = HEAP32[$2 + 44 >> 2] + 80 | 0;
  rustsecp256k1_v0_8_1_fe_mul($0, $0, HEAP32[$2 + 40 >> 2]);
  __stack_pointer = $2 + 48 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_set_infinity($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2] = 1;
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2]);
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2] + 40 | 0);
  rustsecp256k1_v0_8_1_fe_clear(HEAP32[$1 + 12 >> 2] + 80 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_add_ge($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 544 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 540 >> 2] = $0;
  HEAP32[$6 + 536 >> 2] = $1;
  HEAP32[$6 + 532 >> 2] = $2;
  $3 = $6 + 488 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($3, HEAP32[$6 + 536 >> 2] + 80 | 0);
  $0 = HEAP32[$6 + 536 >> 2];
  $2 = HEAP32[$0 >> 2];
  $5 = HEAP32[$0 + 4 >> 2];
  $1 = $6 + 448 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $5;
  $2 = $0 + 32 | 0;
  $5 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $9 = $1 + 32 | 0;
  $7 = $9;
  HEAP32[$7 >> 2] = $5;
  HEAP32[$7 + 4 >> 2] = $2;
  $2 = $0 + 24 | 0;
  $5 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $10 = $1 + 24 | 0;
  $7 = $10;
  HEAP32[$7 >> 2] = $5;
  HEAP32[$7 + 4 >> 2] = $2;
  $2 = $0 + 16 | 0;
  $5 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $11 = $1 + 16 | 0;
  $7 = $11;
  HEAP32[$7 >> 2] = $5;
  HEAP32[$7 + 4 >> 2] = $2;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $12 = $1 + 8 | 0;
  $5 = $12;
  HEAP32[$5 >> 2] = $2;
  HEAP32[$5 + 4 >> 2] = $0;
  rustsecp256k1_v0_8_1_fe_normalize_weak($1);
  $8 = $6 + 408 | 0;
  rustsecp256k1_v0_8_1_fe_mul($8, HEAP32[$6 + 532 >> 2], $3);
  $2 = HEAP32[$6 + 536 >> 2] + 40 | 0;
  $5 = HEAP32[$2 >> 2];
  $7 = HEAP32[$2 + 4 >> 2];
  $0 = $6 + 368 | 0;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $7;
  $5 = $2 + 32 | 0;
  $7 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $4 = $0 + 32 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $5;
  $5 = $2 + 24 | 0;
  $7 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $4 = $0 + 24 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $5;
  $5 = $2 + 16 | 0;
  $7 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $4 = $0 + 16 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $5;
  $2 = $2 + 8 | 0;
  $5 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $7 = $0 + 8 | 0;
  HEAP32[$7 >> 2] = $5;
  HEAP32[$7 + 4 >> 2] = $2;
  rustsecp256k1_v0_8_1_fe_normalize_weak($0);
  $5 = $6 + 328 | 0;
  rustsecp256k1_v0_8_1_fe_mul($5, HEAP32[$6 + 532 >> 2] + 40 | 0, $3);
  rustsecp256k1_v0_8_1_fe_mul($5, $5, HEAP32[$6 + 536 >> 2] + 80 | 0);
  $7 = HEAP32[$1 + 4 >> 2];
  $2 = $6 + 288 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $3 = $9;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 32 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $10;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 24 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $11;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 16 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $12;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 8 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $3;
  rustsecp256k1_v0_8_1_fe_add($2, $8);
  $9 = HEAP32[$0 + 4 >> 2];
  $7 = $6 + 208 | 0;
  $3 = $7;
  HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 4 >> 2] = $9;
  $4 = $0 + 32 | 0;
  $9 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $10 = $3 + 32 | 0;
  HEAP32[$10 >> 2] = $9;
  HEAP32[$10 + 4 >> 2] = $4;
  $4 = $0 + 24 | 0;
  $9 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $10 = $3 + 24 | 0;
  HEAP32[$10 >> 2] = $9;
  HEAP32[$10 + 4 >> 2] = $4;
  $4 = $0 + 16 | 0;
  $9 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $10 = $3 + 16 | 0;
  HEAP32[$10 >> 2] = $9;
  HEAP32[$10 + 4 >> 2] = $4;
  $4 = $0 + 8 | 0;
  $9 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $3 = $3 + 8 | 0;
  HEAP32[$3 >> 2] = $9;
  HEAP32[$3 + 4 >> 2] = $4;
  rustsecp256k1_v0_8_1_fe_add($7, $5);
  $4 = $6 + 88 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($4, $2);
  $3 = $6 + 48 | 0;
  rustsecp256k1_v0_8_1_fe_negate($3, $8, 1);
  $5 = $6 + 248 | 0;
  rustsecp256k1_v0_8_1_fe_mul($5, $1, $3);
  rustsecp256k1_v0_8_1_fe_add($4, $5);
  (wasm2js_i32$0 = $6, wasm2js_i32$1 = rustsecp256k1_v0_8_1_fe_normalizes_to_zero($7) & rustsecp256k1_v0_8_1_fe_normalizes_to_zero($4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $8 = HEAP32[$0 + 4 >> 2];
  $5 = $6 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 + 4 >> 2] = $8;
  $8 = $0 + 32 | 0;
  $9 = HEAP32[$8 >> 2];
  $8 = HEAP32[$8 + 4 >> 2];
  $10 = $5 + 32 | 0;
  HEAP32[$10 >> 2] = $9;
  HEAP32[$10 + 4 >> 2] = $8;
  $8 = $0 + 24 | 0;
  $9 = HEAP32[$8 >> 2];
  $8 = HEAP32[$8 + 4 >> 2];
  $10 = $5 + 24 | 0;
  HEAP32[$10 >> 2] = $9;
  HEAP32[$10 + 4 >> 2] = $8;
  $8 = $0 + 16 | 0;
  $9 = HEAP32[$8 >> 2];
  $8 = HEAP32[$8 + 4 >> 2];
  $10 = $5 + 16 | 0;
  HEAP32[$10 >> 2] = $9;
  HEAP32[$10 + 4 >> 2] = $8;
  $0 = $0 + 8 | 0;
  $8 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $9 = $5 + 8 | 0;
  HEAP32[$9 >> 2] = $8;
  HEAP32[$9 + 4 >> 2] = $0;
  rustsecp256k1_v0_8_1_fe_mul_int($5, 2);
  rustsecp256k1_v0_8_1_fe_add($3, $1);
  rustsecp256k1_v0_8_1_fe_cmov($5, $4, (HEAP32[$6 >> 2] != 0 ^ -1) & 1);
  rustsecp256k1_v0_8_1_fe_cmov($3, $7, (HEAP32[$6 >> 2] != 0 ^ -1) & 1);
  $0 = $6 + 168 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($0, $3);
  $4 = $6 + 128 | 0;
  rustsecp256k1_v0_8_1_fe_negate($4, $2, 2);
  rustsecp256k1_v0_8_1_fe_mul($4, $4, $0);
  rustsecp256k1_v0_8_1_fe_sqr($0, $0);
  rustsecp256k1_v0_8_1_fe_cmov($0, $7, HEAP32[$6 >> 2]);
  rustsecp256k1_v0_8_1_fe_sqr($2, $5);
  rustsecp256k1_v0_8_1_fe_mul(HEAP32[$6 + 540 >> 2] + 80 | 0, HEAP32[$6 + 536 >> 2] + 80 | 0, $3);
  (wasm2js_i32$0 = $6, wasm2js_i32$1 = rustsecp256k1_v0_8_1_fe_normalizes_to_zero(HEAP32[$6 + 540 >> 2] + 80 | 0) & (HEAP32[HEAP32[$6 + 536 >> 2] + 120 >> 2] ^ -1)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  rustsecp256k1_v0_8_1_fe_add($2, $4);
  $3 = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$6 + 540 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $3 = $2 + 32 | 0;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $8 = $1 + 32 | 0;
  HEAP32[$8 >> 2] = $7;
  HEAP32[$8 + 4 >> 2] = $3;
  $3 = $2 + 24 | 0;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $8 = $1 + 24 | 0;
  HEAP32[$8 >> 2] = $7;
  HEAP32[$8 + 4 >> 2] = $3;
  $3 = $2 + 16 | 0;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $8 = $1 + 16 | 0;
  HEAP32[$8 >> 2] = $7;
  HEAP32[$8 + 4 >> 2] = $3;
  $3 = $2 + 8 | 0;
  $7 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$1 + 4 >> 2] = $3;
  rustsecp256k1_v0_8_1_fe_mul_int($2, 2);
  rustsecp256k1_v0_8_1_fe_add($2, $4);
  rustsecp256k1_v0_8_1_fe_mul($2, $2, $5);
  rustsecp256k1_v0_8_1_fe_add($2, $0);
  rustsecp256k1_v0_8_1_fe_negate(HEAP32[$6 + 540 >> 2] + 40 | 0, $2, 3);
  rustsecp256k1_v0_8_1_fe_half(HEAP32[$6 + 540 >> 2] + 40 | 0);
  rustsecp256k1_v0_8_1_fe_cmov(HEAP32[$6 + 540 >> 2], HEAP32[$6 + 532 >> 2], HEAP32[HEAP32[$6 + 536 >> 2] + 120 >> 2]);
  rustsecp256k1_v0_8_1_fe_cmov(HEAP32[$6 + 540 >> 2] + 40 | 0, HEAP32[$6 + 532 >> 2] + 40 | 0, HEAP32[HEAP32[$6 + 536 >> 2] + 120 >> 2]);
  rustsecp256k1_v0_8_1_fe_cmov(HEAP32[$6 + 540 >> 2] + 80 | 0, 691240, HEAP32[HEAP32[$6 + 536 >> 2] + 120 >> 2]);
  HEAP32[HEAP32[$6 + 540 >> 2] + 120 >> 2] = HEAP32[$6 + 4 >> 2];
  __stack_pointer = $6 + 544 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_sqr($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $0;
  HEAP32[$5 + 8 >> 2] = $1;
  $1 = HEAP32[$5 + 8 >> 2];
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 140 >> 2] = HEAP32[$5 + 12 >> 2];
  HEAP32[$0 + 136 >> 2] = $1;
  $1 = HEAP32[$0 + 136 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 88 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 92 >> 2] = $3;
  $1 = HEAP32[$0 + 136 >> 2];
  $3 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 84 >> 2] = $3;
  $1 = HEAP32[$0 + 136 >> 2];
  $3 = HEAP32[$1 + 20 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 76 >> 2] = $3;
  $1 = HEAP32[$0 + 136 >> 2];
  $3 = HEAP32[$1 + 28 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$0 + 68 >> 2] = $3;
  $1 = HEAP32[$0 + 136 >> 2];
  $3 = HEAP32[$1 + 36 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 60 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = -1;
  HEAP32[$0 + 20 >> 2] = 1048575;
  HEAP32[$0 + 8 >> 2] = 15632;
  HEAP32[$0 + 12 >> 2] = 16;
  $1 = $0 + 96 | 0;
  $3 = HEAP32[$0 + 88 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($1, $3 << 1, HEAP32[$0 + 92 >> 2] << 1 | $3 >>> 31, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
  $3 = HEAP32[$0 + 80 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, $3 << 1, HEAP32[$0 + 84 >> 2] << 1 | $3 >>> 31, HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2]);
  $3 = $0 + 112 | 0;
  $2 = HEAP32[$0 + 56 >> 2];
  $4 = HEAP32[$0 + 60 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($3, $2, $4, $2, $4);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $3;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, 15632, 16, HEAP32[$2 >> 2], i64toi32_i32$HIGH_BITS);
  rustsecp256k1_v0_8_1_u128_rshift($3, 64);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 52 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $2 = HEAP32[$0 + 56 >> 2];
  $4 = HEAP32[$0 + 60 >> 2] << 1 | $2 >>> 31;
  HEAP32[$0 + 56 >> 2] = $2 << 1;
  HEAP32[$0 + 60 >> 2] = $4;
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
  $2 = HEAP32[$0 + 80 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, $2 << 1, HEAP32[$0 + 84 >> 2] << 1 | $2 >>> 31, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
  $2 = HEAP32[$0 + 72 >> 2];
  $4 = HEAP32[$0 + 76 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, $2, $4, $2, $4);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $3;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, 64028672, 65536, HEAP32[$2 >> 2], i64toi32_i32$HIGH_BITS);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 44 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $2 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 32 >> 2] = $2 >> 16;
  HEAP32[$0 + 36 >> 2] = $2 >> 31;
  $2 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$0 + 44 >> 2] = $2 & 65535;
  $2 = HEAP32[$0 + 88 >> 2];
  $4 = HEAP32[$0 + 92 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($3, $2, $4, $2, $4);
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 80 >> 2], HEAP32[$0 + 84 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
  $2 = HEAP32[$0 + 72 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, $2 << 1, HEAP32[$0 + 76 >> 2] << 1 | $2 >>> 31, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $2 = HEAP32[$0 + 24 >> 2];
  $4 = HEAP32[$0 + 28 >> 2] << 4 | $2 >>> 28;
  $6 = HEAP32[$0 + 36 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 32 >> 2] | $2 << 4;
  HEAP32[$0 + 28 >> 2] = $4 | $6;
  rustsecp256k1_v0_8_1_u128_accum_mul($3, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], 977, 1);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $3;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($3, 52);
  $2 = HEAP32[$0 + 88 >> 2];
  $4 = HEAP32[$0 + 92 >> 2] << 1 | $2 >>> 31;
  HEAP32[$0 + 88 >> 2] = $2 << 1;
  HEAP32[$0 + 92 >> 2] = $4;
  rustsecp256k1_v0_8_1_u128_accum_mul($3, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2], HEAP32[$0 + 80 >> 2], HEAP32[$0 + 84 >> 2]);
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
  $2 = HEAP32[$0 + 64 >> 2];
  $4 = HEAP32[$0 + 68 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, $2, $4, $2, $4);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($3, HEAP32[$2 >> 2], i64toi32_i32$HIGH_BITS & 1048575, 15632, 16);
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $3;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 12 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($3, 52);
  rustsecp256k1_v0_8_1_u128_accum_mul($3, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2], HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2]);
  $2 = HEAP32[$0 + 80 >> 2];
  $4 = HEAP32[$0 + 84 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($3, $2, $4, $2, $4);
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($3, 15632, 16, HEAP32[$2 >> 2], i64toi32_i32$HIGH_BITS);
  rustsecp256k1_v0_8_1_u128_rshift($1, 64);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $3;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 20 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($3, 52);
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($3, 64028672, 65536, HEAP32[$1 >> 2], i64toi32_i32$HIGH_BITS);
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $3;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$0 + 140 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($3, 52);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $3;
  $3 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  $1 = i64toi32_i32$HIGH_BITS + HEAP32[$0 + 44 >> 2] | 0;
  $2 = HEAP32[$0 + 140 >> 2];
  $4 = HEAP32[$0 + 40 >> 2];
  $3 = $4 + HEAP32[$3 >> 2] | 0;
  HEAP32[$2 + 32 >> 2] = $3;
  HEAP32[$2 + 36 >> 2] = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  __stack_pointer = $0 + 144 | 0;
  __stack_pointer = $5 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_mul($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $0;
  HEAP32[$5 + 8 >> 2] = $1;
  HEAP32[$5 + 4 >> 2] = $2;
  $1 = HEAP32[$5 + 8 >> 2];
  $2 = HEAP32[$5 + 4 >> 2];
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 140 >> 2] = HEAP32[$5 + 12 >> 2];
  HEAP32[$0 + 136 >> 2] = $1;
  HEAP32[$0 + 132 >> 2] = $2;
  $1 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 60 >> 2] = $2;
  $1 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 52 >> 2] = $2;
  $1 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 44 >> 2] = $2;
  $1 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 28 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$0 + 36 >> 2] = $2;
  $1 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 36 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 28 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = -1;
  HEAP32[$0 + 20 >> 2] = 1048575;
  HEAP32[$0 + 8 >> 2] = 15632;
  HEAP32[$0 + 12 >> 2] = 16;
  $1 = $0 + 96 | 0;
  $2 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
  $2 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
  $2 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  $2 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
  $2 = $0 + 112 | 0;
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($2, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2]);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $2;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, 15632, 16, HEAP32[$3 >> 2], i64toi32_i32$HIGH_BITS);
  rustsecp256k1_v0_8_1_u128_rshift($2, 64);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 88 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 92 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $2;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, 64028672, 65536, HEAP32[$3 >> 2], i64toi32_i32$HIGH_BITS);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 84 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 84 >> 2] >>> 16;
  HEAP32[$0 + 76 >> 2] = 0;
  $3 = HEAP32[$0 + 84 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 80 >> 2];
  HEAP32[$0 + 84 >> 2] = $3 & 65535;
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($2, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 68 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $3 = HEAP32[$0 + 64 >> 2];
  $4 = HEAP32[$0 + 68 >> 2] << 4 | $3 >>> 28;
  $6 = HEAP32[$0 + 76 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 72 >> 2] | $3 << 4;
  HEAP32[$0 + 68 >> 2] = $4 | $6;
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], 977, 1);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $2;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($2, 52);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$3 >> 2], i64toi32_i32$HIGH_BITS & 1048575, 15632, 16);
  rustsecp256k1_v0_8_1_u128_rshift($1, 52);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $2;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 12 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($2, 52);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2]);
  $3 = HEAP32[$0 + 132 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($1, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, 15632, 16, HEAP32[$3 >> 2], i64toi32_i32$HIGH_BITS);
  rustsecp256k1_v0_8_1_u128_rshift($1, 64);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $2;
  $3 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 20 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($2, 52);
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  $1 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_mul($2, 64028672, 65536, HEAP32[$1 >> 2], i64toi32_i32$HIGH_BITS);
  rustsecp256k1_v0_8_1_u128_accum_u64($2, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $2;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $3 = HEAP32[$0 + 140 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1048575;
  rustsecp256k1_v0_8_1_u128_rshift($2, 52);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $2;
  $2 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $1 = i64toi32_i32$HIGH_BITS + HEAP32[$0 + 84 >> 2] | 0;
  $3 = HEAP32[$0 + 140 >> 2];
  $4 = HEAP32[$0 + 80 >> 2];
  $2 = $4 + HEAP32[$2 >> 2] | 0;
  HEAP32[$3 + 32 >> 2] = $2;
  HEAP32[$3 + 36 >> 2] = $2 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  __stack_pointer = $0 + 144 | 0;
  __stack_pointer = $5 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_normalizes_to_zero($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 80 | 0;
  HEAP32[$1 + 76 >> 2] = $0;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 64 >> 2] = $2;
  HEAP32[$1 + 68 >> 2] = $0;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 56 >> 2] = $2;
  HEAP32[$1 + 60 >> 2] = $0;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 36 >> 2] >>> 16;
  HEAP32[$1 + 12 >> 2] = 0;
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $0 & 65535;
  $2 = __wasm_i64_mul(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 977, 1);
  $0 = i64toi32_i32$HIGH_BITS + HEAP32[$1 + 68 >> 2] | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 64 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 64 >> 2] = $2;
  HEAP32[$1 + 68 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$1 + 68 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 56 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 56 >> 2] = $2;
  HEAP32[$1 + 60 >> 2] = $0;
  $0 = HEAP32[$1 + 68 >> 2];
  HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$1 + 68 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 68 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 68 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 64 >> 2] ^ 976;
  HEAP32[$1 + 20 >> 2] = $0 ^ 1;
  $0 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 60 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 48 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$1 + 60 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 60 >> 2] | HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2] | HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2] & HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 56 >> 2] & HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
  $0 = HEAP32[$1 + 44 >> 2];
  $3 = $2;
  $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 52 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 52 >> 2] | HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 48 >> 2] | HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 52 >> 2] & HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 48 >> 2] & HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 44 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 44 >> 2] | HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 40 >> 2] | HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2] & HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 40 >> 2] & HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2] | HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 32 >> 2] | HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2] & (HEAP32[$1 + 36 >> 2] ^ 983040);
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 32 >> 2] & HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  return !(HEAP32[$1 + 24 >> 2] | HEAP32[$1 + 28 >> 2]) | HEAP32[$1 + 16 >> 2] == -1 & HEAP32[$1 + 20 >> 2] == 1048575;
 }
 
 function rustsecp256k1_v0_8_1_fe_mul_int($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  $1 = __wasm_i64_mul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $1, $1 >> 31);
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  $1 = __wasm_i64_mul(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], $1, $1 >> 31);
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  $1 = __wasm_i64_mul(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $1, $1 >> 31);
  HEAP32[$0 + 16 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  $1 = __wasm_i64_mul(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], $1, $1 >> 31);
  HEAP32[$0 + 24 >> 2] = $1;
  HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  $1 = __wasm_i64_mul(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], $1, $1 >> 31);
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
 }
 
 function rustsecp256k1_v0_8_1_fe_half($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer + -64 | 0;
  HEAP32[$1 + 60 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 1;
  HEAP32[$1 + 12 >> 2] = 0;
  $0 = HEAP32[$1 + 48 >> 2] & HEAP32[$1 + 8 >> 2];
  $2 = 0 - $0 | 0;
  $0 = 0 - ((HEAP32[$1 + 52 >> 2] & HEAP32[$1 + 12 >> 2]) + (($0 | 0) != 0) | 0) | 0;
  $3 = $0 >>> 12 | 0;
  HEAP32[$1 >> 2] = ($0 & 4095) << 20 | $2 >>> 12;
  HEAP32[$1 + 4 >> 2] = $3;
  $0 = HEAP32[$1 + 52 >> 2] + (HEAP32[$1 + 4 >> 2] & 1048574) | 0;
  $3 = HEAP32[$1 >> 2] & -977;
  $2 = $3 + HEAP32[$1 + 48 >> 2] | 0;
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $2 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
  $3 = HEAP32[$1 + 4 >> 2] + HEAP32[$1 + 44 >> 2] | 0;
  $2 = HEAP32[$1 >> 2];
  $0 = $2 + HEAP32[$1 + 40 >> 2] | 0;
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[$1 + 44 >> 2] = $0 >>> 0 < $2 >>> 0 ? $3 + 1 | 0 : $3;
  $3 = HEAP32[$1 + 4 >> 2] + HEAP32[$1 + 36 >> 2] | 0;
  $2 = HEAP32[$1 >> 2];
  $0 = $2 + HEAP32[$1 + 32 >> 2] | 0;
  HEAP32[$1 + 32 >> 2] = $0;
  HEAP32[$1 + 36 >> 2] = $0 >>> 0 < $2 >>> 0 ? $3 + 1 | 0 : $3;
  $0 = HEAP32[$1 + 4 >> 2] + HEAP32[$1 + 28 >> 2] | 0;
  $3 = HEAP32[$1 >> 2];
  $2 = $3 + HEAP32[$1 + 24 >> 2] | 0;
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $2 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 + 20 >> 2] + ($2 >>> 4 | 0) | 0;
  $2 = ($2 & 15) << 28 | HEAP32[$1 >> 2] >>> 4;
  $3 = $2;
  $2 = HEAP32[$1 + 16 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $2 = HEAP32[$1 + 52 >> 2];
  $0 = $2 >>> 1 | 0;
  $2 = ($2 & 1) << 31 | HEAP32[$1 + 48 >> 2] >>> 1;
  $0 = ((HEAP32[$1 + 40 >> 2] & HEAP32[$1 + 8 >> 2]) << 19) + $0 | 0;
  $3 = 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $3 = HEAP32[$1 + 60 >> 2];
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = $0;
  $2 = HEAP32[$1 + 44 >> 2];
  $0 = $2 >>> 1 | 0;
  $2 = ($2 & 1) << 31 | HEAP32[$1 + 40 >> 2] >>> 1;
  $0 = ((HEAP32[$1 + 32 >> 2] & HEAP32[$1 + 8 >> 2]) << 19) + $0 | 0;
  $3 = 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $3 = HEAP32[$1 + 60 >> 2];
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 36 >> 2];
  $0 = $2 >>> 1 | 0;
  $2 = ($2 & 1) << 31 | HEAP32[$1 + 32 >> 2] >>> 1;
  $0 = ((HEAP32[$1 + 24 >> 2] & HEAP32[$1 + 8 >> 2]) << 19) + $0 | 0;
  $3 = 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $3 = HEAP32[$1 + 60 >> 2];
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 20 >> 2] = $0;
  $2 = HEAP32[$1 + 28 >> 2];
  $0 = $2 >>> 1 | 0;
  $2 = ($2 & 1) << 31 | HEAP32[$1 + 24 >> 2] >>> 1;
  $0 = ((HEAP32[$1 + 16 >> 2] & HEAP32[$1 + 8 >> 2]) << 19) + $0 | 0;
  $3 = 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $3 = HEAP32[$1 + 60 >> 2];
  HEAP32[$3 + 24 >> 2] = $2;
  HEAP32[$3 + 28 >> 2] = $0;
  $2 = HEAP32[$1 + 20 >> 2];
  $0 = $2 >>> 1 | 0;
  $2 = ($2 & 1) << 31 | HEAP32[$1 + 16 >> 2] >>> 1;
  $1 = HEAP32[$1 + 60 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_fe_set_int($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $1 >> 31;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_sha256_write($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + 96 >> 2] & 63;
  $4 = HEAP32[$3 + 20 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = $4 + HEAP32[$0 + 96 >> 2] | 0;
  $2 = HEAP32[$0 + 100 >> 2];
  HEAP32[$0 + 96 >> 2] = $1;
  HEAP32[$0 + 100 >> 2] = $1 >>> 0 < $4 >>> 0 ? $2 + 1 | 0 : $2;
  while (1) {
   if (HEAPU32[$3 + 20 >> 2] >= 64 - HEAP32[$3 + 16 >> 2] >>> 0) {
    HEAP32[$3 + 12 >> 2] = 64 - HEAP32[$3 + 16 >> 2];
    memcpy(HEAP32[$3 + 16 >> 2] + (HEAP32[$3 + 28 >> 2] + 32 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 12 >> 2];
    $1 = HEAP32[$3 + 28 >> 2] + 32 | 0;
    $0 = __stack_pointer - 624 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 620 >> 2] = HEAP32[$3 + 28 >> 2];
    HEAP32[$0 + 616 >> 2] = $1;
    HEAP32[$0 + 612 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 4 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 8 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 12 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 16 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 20 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 24 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[HEAP32[$0 + 620 >> 2] + 28 >> 2];
    $1 = HEAP32[$0 + 596 >> 2];
    $2 = HEAP32[$0 + 588 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + (($1 << 7 | $1 >>> 25) ^ (($1 << 26 | $1 >>> 6) ^ ($1 << 21 | $1 >>> 11))) | 0) + ($1 & ($2 ^ HEAP32[$0 + 592 >> 2]) ^ $2) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2]);
    HEAP32[$0 + 580 >> 2] = $2;
    HEAP32[$0 + 516 >> 2] = ($1 + 1116352408 | 0) + $2;
    $1 = HEAP32[$0 + 612 >> 2];
    $2 = HEAP32[$0 + 608 >> 2];
    HEAP32[$0 + 512 >> 2] = ($1 & $2 | HEAP32[$0 + 604 >> 2] & ($1 | $2)) + (($1 << 10 | $1 >>> 22) ^ (($1 << 30 | $1 >>> 2) ^ ($1 << 19 | $1 >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 516 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 516 >> 2] + HEAP32[$0 + 512 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 4 | 0);
    HEAP32[$0 + 576 >> 2] = $2;
    HEAP32[$0 + 508 >> 2] = ($1 + 1899447441 | 0) + $2;
    HEAP32[$0 + 504 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 508 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 508 >> 2] + HEAP32[$0 + 504 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 8 | 0);
    HEAP32[$0 + 572 >> 2] = $2;
    HEAP32[$0 + 500 >> 2] = ($1 - 1245643825 | 0) + $2;
    HEAP32[$0 + 496 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 500 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 500 >> 2] + HEAP32[$0 + 496 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 12 | 0);
    HEAP32[$0 + 568 >> 2] = $2;
    HEAP32[$0 + 492 >> 2] = ($1 - 373957723 | 0) + $2;
    HEAP32[$0 + 488 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 492 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 492 >> 2] + HEAP32[$0 + 488 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 16 | 0);
    HEAP32[$0 + 564 >> 2] = $2;
    HEAP32[$0 + 484 >> 2] = ($1 + 961987163 | 0) + $2;
    HEAP32[$0 + 480 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 484 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 484 >> 2] + HEAP32[$0 + 480 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 20 | 0);
    HEAP32[$0 + 560 >> 2] = $2;
    HEAP32[$0 + 476 >> 2] = ($1 + 1508970993 | 0) + $2;
    HEAP32[$0 + 472 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 476 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 476 >> 2] + HEAP32[$0 + 472 >> 2];
    $1 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 24 | 0);
    HEAP32[$0 + 556 >> 2] = $2;
    HEAP32[$0 + 468 >> 2] = ($1 - 1841331548 | 0) + $2;
    HEAP32[$0 + 464 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 468 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 468 >> 2] + HEAP32[$0 + 464 >> 2];
    $1 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 28 | 0);
    HEAP32[$0 + 552 >> 2] = $2;
    HEAP32[$0 + 460 >> 2] = ($1 - 1424204075 | 0) + $2;
    HEAP32[$0 + 456 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 460 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 460 >> 2] + HEAP32[$0 + 456 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 32 | 0);
    HEAP32[$0 + 548 >> 2] = $2;
    HEAP32[$0 + 452 >> 2] = ($1 - 670586216 | 0) + $2;
    HEAP32[$0 + 448 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 452 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 452 >> 2] + HEAP32[$0 + 448 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 36 | 0);
    HEAP32[$0 + 544 >> 2] = $2;
    HEAP32[$0 + 444 >> 2] = ($1 + 310598401 | 0) + $2;
    HEAP32[$0 + 440 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 444 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 444 >> 2] + HEAP32[$0 + 440 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 40 | 0);
    HEAP32[$0 + 540 >> 2] = $2;
    HEAP32[$0 + 436 >> 2] = ($1 + 607225278 | 0) + $2;
    HEAP32[$0 + 432 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 436 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 436 >> 2] + HEAP32[$0 + 432 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 44 | 0);
    HEAP32[$0 + 536 >> 2] = $2;
    HEAP32[$0 + 428 >> 2] = ($1 + 1426881987 | 0) + $2;
    HEAP32[$0 + 424 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 428 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 428 >> 2] + HEAP32[$0 + 424 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 48 | 0);
    HEAP32[$0 + 532 >> 2] = $2;
    HEAP32[$0 + 420 >> 2] = ($1 + 1925078388 | 0) + $2;
    HEAP32[$0 + 416 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 420 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 420 >> 2] + HEAP32[$0 + 416 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 52 | 0);
    HEAP32[$0 + 528 >> 2] = $2;
    HEAP32[$0 + 412 >> 2] = ($1 - 2132889090 | 0) + $2;
    HEAP32[$0 + 408 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 412 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 412 >> 2] + HEAP32[$0 + 408 >> 2];
    $1 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 56 | 0);
    HEAP32[$0 + 524 >> 2] = $2;
    HEAP32[$0 + 404 >> 2] = ($1 - 1680079193 | 0) + $2;
    HEAP32[$0 + 400 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 404 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 404 >> 2] + HEAP32[$0 + 400 >> 2];
    $1 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $2 = rustsecp256k1_v0_8_1_read_be32(HEAP32[$0 + 616 >> 2] + 60 | 0);
    HEAP32[$0 + 520 >> 2] = $2;
    HEAP32[$0 + 396 >> 2] = ($1 - 1046744716 | 0) + $2;
    HEAP32[$0 + 392 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 396 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 396 >> 2] + HEAP32[$0 + 392 >> 2];
    $2 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $1 = HEAP32[$0 + 524 >> 2];
    $4 = HEAP32[$0 + 544 >> 2] + (($1 << 15 | $1 >>> 17) ^ ($1 << 13 | $1 >>> 19) ^ $1 >>> 10) | 0;
    $1 = HEAP32[$0 + 576 >> 2];
    $1 = HEAP32[$0 + 580 >> 2] + ($4 + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 580 >> 2] = $1;
    HEAP32[$0 + 388 >> 2] = ($2 - 459576895 | 0) + $1;
    HEAP32[$0 + 384 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 388 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 388 >> 2] + HEAP32[$0 + 384 >> 2];
    $2 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $1 = HEAP32[$0 + 520 >> 2];
    $4 = HEAP32[$0 + 540 >> 2] + (($1 << 15 | $1 >>> 17) ^ ($1 << 13 | $1 >>> 19) ^ $1 >>> 10) | 0;
    $1 = HEAP32[$0 + 572 >> 2];
    $1 = HEAP32[$0 + 576 >> 2] + ($4 + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 576 >> 2] = $1;
    HEAP32[$0 + 380 >> 2] = ($2 - 272742522 | 0) + $1;
    HEAP32[$0 + 376 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 380 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 380 >> 2] + HEAP32[$0 + 376 >> 2];
    $2 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $1 = HEAP32[$0 + 568 >> 2];
    $1 = HEAP32[$0 + 572 >> 2] + ((HEAP32[$0 + 536 >> 2] + ((HEAP32[$0 + 580 >> 2] << 15 | HEAP32[$0 + 580 >> 2] >>> 17) ^ (HEAP32[$0 + 580 >> 2] << 13 | HEAP32[$0 + 580 >> 2] >>> 19) ^ HEAP32[$0 + 580 >> 2] >>> 10) | 0) + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 572 >> 2] = $1;
    HEAP32[$0 + 372 >> 2] = ($2 + 264347078 | 0) + $1;
    HEAP32[$0 + 368 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 372 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 372 >> 2] + HEAP32[$0 + 368 >> 2];
    $2 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $1 = HEAP32[$0 + 564 >> 2];
    $1 = HEAP32[$0 + 568 >> 2] + ((HEAP32[$0 + 532 >> 2] + ((HEAP32[$0 + 576 >> 2] << 15 | HEAP32[$0 + 576 >> 2] >>> 17) ^ (HEAP32[$0 + 576 >> 2] << 13 | HEAP32[$0 + 576 >> 2] >>> 19) ^ HEAP32[$0 + 576 >> 2] >>> 10) | 0) + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 568 >> 2] = $1;
    HEAP32[$0 + 364 >> 2] = ($2 + 604807628 | 0) + $1;
    HEAP32[$0 + 360 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 364 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 364 >> 2] + HEAP32[$0 + 360 >> 2];
    $2 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $1 = HEAP32[$0 + 560 >> 2];
    $1 = HEAP32[$0 + 564 >> 2] + ((HEAP32[$0 + 528 >> 2] + ((HEAP32[$0 + 572 >> 2] << 15 | HEAP32[$0 + 572 >> 2] >>> 17) ^ (HEAP32[$0 + 572 >> 2] << 13 | HEAP32[$0 + 572 >> 2] >>> 19) ^ HEAP32[$0 + 572 >> 2] >>> 10) | 0) + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 564 >> 2] = $1;
    HEAP32[$0 + 356 >> 2] = ($2 + 770255983 | 0) + $1;
    HEAP32[$0 + 352 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 356 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 356 >> 2] + HEAP32[$0 + 352 >> 2];
    $2 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $1 = HEAP32[$0 + 556 >> 2];
    $1 = HEAP32[$0 + 560 >> 2] + ((HEAP32[$0 + 524 >> 2] + ((HEAP32[$0 + 568 >> 2] << 15 | HEAP32[$0 + 568 >> 2] >>> 17) ^ (HEAP32[$0 + 568 >> 2] << 13 | HEAP32[$0 + 568 >> 2] >>> 19) ^ HEAP32[$0 + 568 >> 2] >>> 10) | 0) + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 560 >> 2] = $1;
    HEAP32[$0 + 348 >> 2] = ($2 + 1249150122 | 0) + $1;
    HEAP32[$0 + 344 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 348 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 348 >> 2] + HEAP32[$0 + 344 >> 2];
    $2 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $1 = HEAP32[$0 + 552 >> 2];
    $1 = HEAP32[$0 + 556 >> 2] + ((HEAP32[$0 + 520 >> 2] + ((HEAP32[$0 + 564 >> 2] << 15 | HEAP32[$0 + 564 >> 2] >>> 17) ^ (HEAP32[$0 + 564 >> 2] << 13 | HEAP32[$0 + 564 >> 2] >>> 19) ^ HEAP32[$0 + 564 >> 2] >>> 10) | 0) + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 556 >> 2] = $1;
    HEAP32[$0 + 340 >> 2] = ($2 + 1555081692 | 0) + $1;
    HEAP32[$0 + 336 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 340 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 340 >> 2] + HEAP32[$0 + 336 >> 2];
    $2 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $1 = HEAP32[$0 + 548 >> 2];
    $1 = HEAP32[$0 + 552 >> 2] + ((HEAP32[$0 + 580 >> 2] + ((HEAP32[$0 + 560 >> 2] << 15 | HEAP32[$0 + 560 >> 2] >>> 17) ^ (HEAP32[$0 + 560 >> 2] << 13 | HEAP32[$0 + 560 >> 2] >>> 19) ^ HEAP32[$0 + 560 >> 2] >>> 10) | 0) + (($1 << 25 | $1 >>> 7) ^ ($1 << 14 | $1 >>> 18) ^ $1 >>> 3) | 0) | 0;
    HEAP32[$0 + 552 >> 2] = $1;
    HEAP32[$0 + 332 >> 2] = ($2 + 1996064986 | 0) + $1;
    HEAP32[$0 + 328 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 332 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 332 >> 2] + HEAP32[$0 + 328 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $2 = HEAP32[$0 + 548 >> 2] + ((HEAP32[$0 + 576 >> 2] + ((HEAP32[$0 + 556 >> 2] << 15 | HEAP32[$0 + 556 >> 2] >>> 17) ^ (HEAP32[$0 + 556 >> 2] << 13 | HEAP32[$0 + 556 >> 2] >>> 19) ^ HEAP32[$0 + 556 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 544 >> 2] << 25 | HEAP32[$0 + 544 >> 2] >>> 7) ^ (HEAP32[$0 + 544 >> 2] << 14 | HEAP32[$0 + 544 >> 2] >>> 18) ^ HEAP32[$0 + 544 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 548 >> 2] = $2;
    HEAP32[$0 + 324 >> 2] = ($1 - 1740746414 | 0) + $2;
    HEAP32[$0 + 320 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 324 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 324 >> 2] + HEAP32[$0 + 320 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = HEAP32[$0 + 544 >> 2] + ((HEAP32[$0 + 572 >> 2] + ((HEAP32[$0 + 552 >> 2] << 15 | HEAP32[$0 + 552 >> 2] >>> 17) ^ (HEAP32[$0 + 552 >> 2] << 13 | HEAP32[$0 + 552 >> 2] >>> 19) ^ HEAP32[$0 + 552 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 540 >> 2] << 25 | HEAP32[$0 + 540 >> 2] >>> 7) ^ (HEAP32[$0 + 540 >> 2] << 14 | HEAP32[$0 + 540 >> 2] >>> 18) ^ HEAP32[$0 + 540 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 544 >> 2] = $2;
    HEAP32[$0 + 316 >> 2] = ($1 - 1473132947 | 0) + $2;
    HEAP32[$0 + 312 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 316 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 316 >> 2] + HEAP32[$0 + 312 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = HEAP32[$0 + 540 >> 2] + ((HEAP32[$0 + 568 >> 2] + ((HEAP32[$0 + 548 >> 2] << 15 | HEAP32[$0 + 548 >> 2] >>> 17) ^ (HEAP32[$0 + 548 >> 2] << 13 | HEAP32[$0 + 548 >> 2] >>> 19) ^ HEAP32[$0 + 548 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 536 >> 2] << 25 | HEAP32[$0 + 536 >> 2] >>> 7) ^ (HEAP32[$0 + 536 >> 2] << 14 | HEAP32[$0 + 536 >> 2] >>> 18) ^ HEAP32[$0 + 536 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 540 >> 2] = $2;
    HEAP32[$0 + 308 >> 2] = ($1 - 1341970488 | 0) + $2;
    HEAP32[$0 + 304 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 308 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 308 >> 2] + HEAP32[$0 + 304 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = HEAP32[$0 + 536 >> 2] + ((HEAP32[$0 + 564 >> 2] + ((HEAP32[$0 + 544 >> 2] << 15 | HEAP32[$0 + 544 >> 2] >>> 17) ^ (HEAP32[$0 + 544 >> 2] << 13 | HEAP32[$0 + 544 >> 2] >>> 19) ^ HEAP32[$0 + 544 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 532 >> 2] << 25 | HEAP32[$0 + 532 >> 2] >>> 7) ^ (HEAP32[$0 + 532 >> 2] << 14 | HEAP32[$0 + 532 >> 2] >>> 18) ^ HEAP32[$0 + 532 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 536 >> 2] = $2;
    HEAP32[$0 + 300 >> 2] = ($1 - 1084653625 | 0) + $2;
    HEAP32[$0 + 296 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 300 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 300 >> 2] + HEAP32[$0 + 296 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = HEAP32[$0 + 532 >> 2] + ((HEAP32[$0 + 560 >> 2] + ((HEAP32[$0 + 540 >> 2] << 15 | HEAP32[$0 + 540 >> 2] >>> 17) ^ (HEAP32[$0 + 540 >> 2] << 13 | HEAP32[$0 + 540 >> 2] >>> 19) ^ HEAP32[$0 + 540 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 528 >> 2] << 25 | HEAP32[$0 + 528 >> 2] >>> 7) ^ (HEAP32[$0 + 528 >> 2] << 14 | HEAP32[$0 + 528 >> 2] >>> 18) ^ HEAP32[$0 + 528 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 532 >> 2] = $2;
    HEAP32[$0 + 292 >> 2] = ($1 - 958395405 | 0) + $2;
    HEAP32[$0 + 288 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 292 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 292 >> 2] + HEAP32[$0 + 288 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = HEAP32[$0 + 528 >> 2] + ((HEAP32[$0 + 556 >> 2] + ((HEAP32[$0 + 536 >> 2] << 15 | HEAP32[$0 + 536 >> 2] >>> 17) ^ (HEAP32[$0 + 536 >> 2] << 13 | HEAP32[$0 + 536 >> 2] >>> 19) ^ HEAP32[$0 + 536 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 524 >> 2] << 25 | HEAP32[$0 + 524 >> 2] >>> 7) ^ (HEAP32[$0 + 524 >> 2] << 14 | HEAP32[$0 + 524 >> 2] >>> 18) ^ HEAP32[$0 + 524 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 528 >> 2] = $2;
    HEAP32[$0 + 284 >> 2] = ($1 - 710438585 | 0) + $2;
    HEAP32[$0 + 280 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 284 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 284 >> 2] + HEAP32[$0 + 280 >> 2];
    $1 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $2 = HEAP32[$0 + 524 >> 2] + ((HEAP32[$0 + 552 >> 2] + ((HEAP32[$0 + 532 >> 2] << 15 | HEAP32[$0 + 532 >> 2] >>> 17) ^ (HEAP32[$0 + 532 >> 2] << 13 | HEAP32[$0 + 532 >> 2] >>> 19) ^ HEAP32[$0 + 532 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 520 >> 2] << 25 | HEAP32[$0 + 520 >> 2] >>> 7) ^ (HEAP32[$0 + 520 >> 2] << 14 | HEAP32[$0 + 520 >> 2] >>> 18) ^ HEAP32[$0 + 520 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 524 >> 2] = $2;
    HEAP32[$0 + 276 >> 2] = ($1 + 113926993 | 0) + $2;
    HEAP32[$0 + 272 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 276 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 276 >> 2] + HEAP32[$0 + 272 >> 2];
    $1 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $2 = HEAP32[$0 + 520 >> 2] + ((HEAP32[$0 + 548 >> 2] + ((HEAP32[$0 + 528 >> 2] << 15 | HEAP32[$0 + 528 >> 2] >>> 17) ^ (HEAP32[$0 + 528 >> 2] << 13 | HEAP32[$0 + 528 >> 2] >>> 19) ^ HEAP32[$0 + 528 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 580 >> 2] << 25 | HEAP32[$0 + 580 >> 2] >>> 7) ^ (HEAP32[$0 + 580 >> 2] << 14 | HEAP32[$0 + 580 >> 2] >>> 18) ^ HEAP32[$0 + 580 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 520 >> 2] = $2;
    HEAP32[$0 + 268 >> 2] = ($1 + 338241895 | 0) + $2;
    HEAP32[$0 + 264 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 268 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 268 >> 2] + HEAP32[$0 + 264 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $2 = HEAP32[$0 + 580 >> 2] + ((HEAP32[$0 + 544 >> 2] + ((HEAP32[$0 + 524 >> 2] << 15 | HEAP32[$0 + 524 >> 2] >>> 17) ^ (HEAP32[$0 + 524 >> 2] << 13 | HEAP32[$0 + 524 >> 2] >>> 19) ^ HEAP32[$0 + 524 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 576 >> 2] << 25 | HEAP32[$0 + 576 >> 2] >>> 7) ^ (HEAP32[$0 + 576 >> 2] << 14 | HEAP32[$0 + 576 >> 2] >>> 18) ^ HEAP32[$0 + 576 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 580 >> 2] = $2;
    HEAP32[$0 + 260 >> 2] = ($1 + 666307205 | 0) + $2;
    HEAP32[$0 + 256 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 260 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 260 >> 2] + HEAP32[$0 + 256 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = HEAP32[$0 + 576 >> 2] + ((HEAP32[$0 + 540 >> 2] + ((HEAP32[$0 + 520 >> 2] << 15 | HEAP32[$0 + 520 >> 2] >>> 17) ^ (HEAP32[$0 + 520 >> 2] << 13 | HEAP32[$0 + 520 >> 2] >>> 19) ^ HEAP32[$0 + 520 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 572 >> 2] << 25 | HEAP32[$0 + 572 >> 2] >>> 7) ^ (HEAP32[$0 + 572 >> 2] << 14 | HEAP32[$0 + 572 >> 2] >>> 18) ^ HEAP32[$0 + 572 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 576 >> 2] = $2;
    HEAP32[$0 + 252 >> 2] = ($1 + 773529912 | 0) + $2;
    HEAP32[$0 + 248 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 252 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 252 >> 2] + HEAP32[$0 + 248 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = HEAP32[$0 + 572 >> 2] + ((HEAP32[$0 + 536 >> 2] + ((HEAP32[$0 + 580 >> 2] << 15 | HEAP32[$0 + 580 >> 2] >>> 17) ^ (HEAP32[$0 + 580 >> 2] << 13 | HEAP32[$0 + 580 >> 2] >>> 19) ^ HEAP32[$0 + 580 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 568 >> 2] << 25 | HEAP32[$0 + 568 >> 2] >>> 7) ^ (HEAP32[$0 + 568 >> 2] << 14 | HEAP32[$0 + 568 >> 2] >>> 18) ^ HEAP32[$0 + 568 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 572 >> 2] = $2;
    HEAP32[$0 + 244 >> 2] = ($1 + 1294757372 | 0) + $2;
    HEAP32[$0 + 240 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 244 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 244 >> 2] + HEAP32[$0 + 240 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = HEAP32[$0 + 568 >> 2] + ((HEAP32[$0 + 532 >> 2] + ((HEAP32[$0 + 576 >> 2] << 15 | HEAP32[$0 + 576 >> 2] >>> 17) ^ (HEAP32[$0 + 576 >> 2] << 13 | HEAP32[$0 + 576 >> 2] >>> 19) ^ HEAP32[$0 + 576 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 564 >> 2] << 25 | HEAP32[$0 + 564 >> 2] >>> 7) ^ (HEAP32[$0 + 564 >> 2] << 14 | HEAP32[$0 + 564 >> 2] >>> 18) ^ HEAP32[$0 + 564 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 568 >> 2] = $2;
    HEAP32[$0 + 236 >> 2] = ($1 + 1396182291 | 0) + $2;
    HEAP32[$0 + 232 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 236 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 236 >> 2] + HEAP32[$0 + 232 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = HEAP32[$0 + 564 >> 2] + ((HEAP32[$0 + 528 >> 2] + ((HEAP32[$0 + 572 >> 2] << 15 | HEAP32[$0 + 572 >> 2] >>> 17) ^ (HEAP32[$0 + 572 >> 2] << 13 | HEAP32[$0 + 572 >> 2] >>> 19) ^ HEAP32[$0 + 572 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 560 >> 2] << 25 | HEAP32[$0 + 560 >> 2] >>> 7) ^ (HEAP32[$0 + 560 >> 2] << 14 | HEAP32[$0 + 560 >> 2] >>> 18) ^ HEAP32[$0 + 560 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 564 >> 2] = $2;
    HEAP32[$0 + 228 >> 2] = ($1 + 1695183700 | 0) + $2;
    HEAP32[$0 + 224 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 228 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 228 >> 2] + HEAP32[$0 + 224 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = HEAP32[$0 + 560 >> 2] + ((HEAP32[$0 + 524 >> 2] + ((HEAP32[$0 + 568 >> 2] << 15 | HEAP32[$0 + 568 >> 2] >>> 17) ^ (HEAP32[$0 + 568 >> 2] << 13 | HEAP32[$0 + 568 >> 2] >>> 19) ^ HEAP32[$0 + 568 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 556 >> 2] << 25 | HEAP32[$0 + 556 >> 2] >>> 7) ^ (HEAP32[$0 + 556 >> 2] << 14 | HEAP32[$0 + 556 >> 2] >>> 18) ^ HEAP32[$0 + 556 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 560 >> 2] = $2;
    HEAP32[$0 + 220 >> 2] = ($1 + 1986661051 | 0) + $2;
    HEAP32[$0 + 216 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 220 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 220 >> 2] + HEAP32[$0 + 216 >> 2];
    $1 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $2 = HEAP32[$0 + 556 >> 2] + ((HEAP32[$0 + 520 >> 2] + ((HEAP32[$0 + 564 >> 2] << 15 | HEAP32[$0 + 564 >> 2] >>> 17) ^ (HEAP32[$0 + 564 >> 2] << 13 | HEAP32[$0 + 564 >> 2] >>> 19) ^ HEAP32[$0 + 564 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 552 >> 2] << 25 | HEAP32[$0 + 552 >> 2] >>> 7) ^ (HEAP32[$0 + 552 >> 2] << 14 | HEAP32[$0 + 552 >> 2] >>> 18) ^ HEAP32[$0 + 552 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 556 >> 2] = $2;
    HEAP32[$0 + 212 >> 2] = ($1 - 2117940946 | 0) + $2;
    HEAP32[$0 + 208 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 212 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 212 >> 2] + HEAP32[$0 + 208 >> 2];
    $1 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $2 = HEAP32[$0 + 552 >> 2] + ((HEAP32[$0 + 580 >> 2] + ((HEAP32[$0 + 560 >> 2] << 15 | HEAP32[$0 + 560 >> 2] >>> 17) ^ (HEAP32[$0 + 560 >> 2] << 13 | HEAP32[$0 + 560 >> 2] >>> 19) ^ HEAP32[$0 + 560 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 548 >> 2] << 25 | HEAP32[$0 + 548 >> 2] >>> 7) ^ (HEAP32[$0 + 548 >> 2] << 14 | HEAP32[$0 + 548 >> 2] >>> 18) ^ HEAP32[$0 + 548 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 552 >> 2] = $2;
    HEAP32[$0 + 204 >> 2] = ($1 - 1838011259 | 0) + $2;
    HEAP32[$0 + 200 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 204 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 204 >> 2] + HEAP32[$0 + 200 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $2 = HEAP32[$0 + 548 >> 2] + ((HEAP32[$0 + 576 >> 2] + ((HEAP32[$0 + 556 >> 2] << 15 | HEAP32[$0 + 556 >> 2] >>> 17) ^ (HEAP32[$0 + 556 >> 2] << 13 | HEAP32[$0 + 556 >> 2] >>> 19) ^ HEAP32[$0 + 556 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 544 >> 2] << 25 | HEAP32[$0 + 544 >> 2] >>> 7) ^ (HEAP32[$0 + 544 >> 2] << 14 | HEAP32[$0 + 544 >> 2] >>> 18) ^ HEAP32[$0 + 544 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 548 >> 2] = $2;
    HEAP32[$0 + 196 >> 2] = ($1 - 1564481375 | 0) + $2;
    HEAP32[$0 + 192 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 196 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 196 >> 2] + HEAP32[$0 + 192 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = HEAP32[$0 + 544 >> 2] + ((HEAP32[$0 + 572 >> 2] + ((HEAP32[$0 + 552 >> 2] << 15 | HEAP32[$0 + 552 >> 2] >>> 17) ^ (HEAP32[$0 + 552 >> 2] << 13 | HEAP32[$0 + 552 >> 2] >>> 19) ^ HEAP32[$0 + 552 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 540 >> 2] << 25 | HEAP32[$0 + 540 >> 2] >>> 7) ^ (HEAP32[$0 + 540 >> 2] << 14 | HEAP32[$0 + 540 >> 2] >>> 18) ^ HEAP32[$0 + 540 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 544 >> 2] = $2;
    HEAP32[$0 + 188 >> 2] = ($1 - 1474664885 | 0) + $2;
    HEAP32[$0 + 184 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 188 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 188 >> 2] + HEAP32[$0 + 184 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = HEAP32[$0 + 540 >> 2] + ((HEAP32[$0 + 568 >> 2] + ((HEAP32[$0 + 548 >> 2] << 15 | HEAP32[$0 + 548 >> 2] >>> 17) ^ (HEAP32[$0 + 548 >> 2] << 13 | HEAP32[$0 + 548 >> 2] >>> 19) ^ HEAP32[$0 + 548 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 536 >> 2] << 25 | HEAP32[$0 + 536 >> 2] >>> 7) ^ (HEAP32[$0 + 536 >> 2] << 14 | HEAP32[$0 + 536 >> 2] >>> 18) ^ HEAP32[$0 + 536 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 540 >> 2] = $2;
    HEAP32[$0 + 180 >> 2] = ($1 - 1035236496 | 0) + $2;
    HEAP32[$0 + 176 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 180 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 180 >> 2] + HEAP32[$0 + 176 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = HEAP32[$0 + 536 >> 2] + ((HEAP32[$0 + 564 >> 2] + ((HEAP32[$0 + 544 >> 2] << 15 | HEAP32[$0 + 544 >> 2] >>> 17) ^ (HEAP32[$0 + 544 >> 2] << 13 | HEAP32[$0 + 544 >> 2] >>> 19) ^ HEAP32[$0 + 544 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 532 >> 2] << 25 | HEAP32[$0 + 532 >> 2] >>> 7) ^ (HEAP32[$0 + 532 >> 2] << 14 | HEAP32[$0 + 532 >> 2] >>> 18) ^ HEAP32[$0 + 532 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 536 >> 2] = $2;
    HEAP32[$0 + 172 >> 2] = ($1 - 949202525 | 0) + $2;
    HEAP32[$0 + 168 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 172 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 172 >> 2] + HEAP32[$0 + 168 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = HEAP32[$0 + 532 >> 2] + ((HEAP32[$0 + 560 >> 2] + ((HEAP32[$0 + 540 >> 2] << 15 | HEAP32[$0 + 540 >> 2] >>> 17) ^ (HEAP32[$0 + 540 >> 2] << 13 | HEAP32[$0 + 540 >> 2] >>> 19) ^ HEAP32[$0 + 540 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 528 >> 2] << 25 | HEAP32[$0 + 528 >> 2] >>> 7) ^ (HEAP32[$0 + 528 >> 2] << 14 | HEAP32[$0 + 528 >> 2] >>> 18) ^ HEAP32[$0 + 528 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 532 >> 2] = $2;
    HEAP32[$0 + 164 >> 2] = ($1 - 778901479 | 0) + $2;
    HEAP32[$0 + 160 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 164 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 164 >> 2] + HEAP32[$0 + 160 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = HEAP32[$0 + 528 >> 2] + ((HEAP32[$0 + 556 >> 2] + ((HEAP32[$0 + 536 >> 2] << 15 | HEAP32[$0 + 536 >> 2] >>> 17) ^ (HEAP32[$0 + 536 >> 2] << 13 | HEAP32[$0 + 536 >> 2] >>> 19) ^ HEAP32[$0 + 536 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 524 >> 2] << 25 | HEAP32[$0 + 524 >> 2] >>> 7) ^ (HEAP32[$0 + 524 >> 2] << 14 | HEAP32[$0 + 524 >> 2] >>> 18) ^ HEAP32[$0 + 524 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 528 >> 2] = $2;
    HEAP32[$0 + 156 >> 2] = ($1 - 694614492 | 0) + $2;
    HEAP32[$0 + 152 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 156 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 156 >> 2] + HEAP32[$0 + 152 >> 2];
    $1 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $2 = HEAP32[$0 + 524 >> 2] + ((HEAP32[$0 + 552 >> 2] + ((HEAP32[$0 + 532 >> 2] << 15 | HEAP32[$0 + 532 >> 2] >>> 17) ^ (HEAP32[$0 + 532 >> 2] << 13 | HEAP32[$0 + 532 >> 2] >>> 19) ^ HEAP32[$0 + 532 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 520 >> 2] << 25 | HEAP32[$0 + 520 >> 2] >>> 7) ^ (HEAP32[$0 + 520 >> 2] << 14 | HEAP32[$0 + 520 >> 2] >>> 18) ^ HEAP32[$0 + 520 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 524 >> 2] = $2;
    HEAP32[$0 + 148 >> 2] = ($1 - 200395387 | 0) + $2;
    HEAP32[$0 + 144 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 148 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 148 >> 2] + HEAP32[$0 + 144 >> 2];
    $1 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $2 = HEAP32[$0 + 520 >> 2] + ((HEAP32[$0 + 548 >> 2] + ((HEAP32[$0 + 528 >> 2] << 15 | HEAP32[$0 + 528 >> 2] >>> 17) ^ (HEAP32[$0 + 528 >> 2] << 13 | HEAP32[$0 + 528 >> 2] >>> 19) ^ HEAP32[$0 + 528 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 580 >> 2] << 25 | HEAP32[$0 + 580 >> 2] >>> 7) ^ (HEAP32[$0 + 580 >> 2] << 14 | HEAP32[$0 + 580 >> 2] >>> 18) ^ HEAP32[$0 + 580 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 520 >> 2] = $2;
    HEAP32[$0 + 140 >> 2] = ($1 + 275423344 | 0) + $2;
    HEAP32[$0 + 136 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 140 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 140 >> 2] + HEAP32[$0 + 136 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $2 = HEAP32[$0 + 580 >> 2] + ((HEAP32[$0 + 544 >> 2] + ((HEAP32[$0 + 524 >> 2] << 15 | HEAP32[$0 + 524 >> 2] >>> 17) ^ (HEAP32[$0 + 524 >> 2] << 13 | HEAP32[$0 + 524 >> 2] >>> 19) ^ HEAP32[$0 + 524 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 576 >> 2] << 25 | HEAP32[$0 + 576 >> 2] >>> 7) ^ (HEAP32[$0 + 576 >> 2] << 14 | HEAP32[$0 + 576 >> 2] >>> 18) ^ HEAP32[$0 + 576 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 580 >> 2] = $2;
    HEAP32[$0 + 132 >> 2] = ($1 + 430227734 | 0) + $2;
    HEAP32[$0 + 128 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 132 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 132 >> 2] + HEAP32[$0 + 128 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = HEAP32[$0 + 576 >> 2] + ((HEAP32[$0 + 540 >> 2] + ((HEAP32[$0 + 520 >> 2] << 15 | HEAP32[$0 + 520 >> 2] >>> 17) ^ (HEAP32[$0 + 520 >> 2] << 13 | HEAP32[$0 + 520 >> 2] >>> 19) ^ HEAP32[$0 + 520 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 572 >> 2] << 25 | HEAP32[$0 + 572 >> 2] >>> 7) ^ (HEAP32[$0 + 572 >> 2] << 14 | HEAP32[$0 + 572 >> 2] >>> 18) ^ HEAP32[$0 + 572 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 576 >> 2] = $2;
    HEAP32[$0 + 124 >> 2] = ($1 + 506948616 | 0) + $2;
    HEAP32[$0 + 120 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 124 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 124 >> 2] + HEAP32[$0 + 120 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = HEAP32[$0 + 572 >> 2] + ((HEAP32[$0 + 536 >> 2] + ((HEAP32[$0 + 580 >> 2] << 15 | HEAP32[$0 + 580 >> 2] >>> 17) ^ (HEAP32[$0 + 580 >> 2] << 13 | HEAP32[$0 + 580 >> 2] >>> 19) ^ HEAP32[$0 + 580 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 568 >> 2] << 25 | HEAP32[$0 + 568 >> 2] >>> 7) ^ (HEAP32[$0 + 568 >> 2] << 14 | HEAP32[$0 + 568 >> 2] >>> 18) ^ HEAP32[$0 + 568 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 572 >> 2] = $2;
    HEAP32[$0 + 116 >> 2] = ($1 + 659060556 | 0) + $2;
    HEAP32[$0 + 112 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 116 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 116 >> 2] + HEAP32[$0 + 112 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = HEAP32[$0 + 568 >> 2] + ((HEAP32[$0 + 532 >> 2] + ((HEAP32[$0 + 576 >> 2] << 15 | HEAP32[$0 + 576 >> 2] >>> 17) ^ (HEAP32[$0 + 576 >> 2] << 13 | HEAP32[$0 + 576 >> 2] >>> 19) ^ HEAP32[$0 + 576 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 564 >> 2] << 25 | HEAP32[$0 + 564 >> 2] >>> 7) ^ (HEAP32[$0 + 564 >> 2] << 14 | HEAP32[$0 + 564 >> 2] >>> 18) ^ HEAP32[$0 + 564 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 568 >> 2] = $2;
    HEAP32[$0 + 108 >> 2] = ($1 + 883997877 | 0) + $2;
    HEAP32[$0 + 104 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 108 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 104 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = HEAP32[$0 + 564 >> 2] + ((HEAP32[$0 + 528 >> 2] + ((HEAP32[$0 + 572 >> 2] << 15 | HEAP32[$0 + 572 >> 2] >>> 17) ^ (HEAP32[$0 + 572 >> 2] << 13 | HEAP32[$0 + 572 >> 2] >>> 19) ^ HEAP32[$0 + 572 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 560 >> 2] << 25 | HEAP32[$0 + 560 >> 2] >>> 7) ^ (HEAP32[$0 + 560 >> 2] << 14 | HEAP32[$0 + 560 >> 2] >>> 18) ^ HEAP32[$0 + 560 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 564 >> 2] = $2;
    HEAP32[$0 + 100 >> 2] = ($1 + 958139571 | 0) + $2;
    HEAP32[$0 + 96 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 100 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 100 >> 2] + HEAP32[$0 + 96 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = HEAP32[$0 + 560 >> 2] + ((HEAP32[$0 + 524 >> 2] + ((HEAP32[$0 + 568 >> 2] << 15 | HEAP32[$0 + 568 >> 2] >>> 17) ^ (HEAP32[$0 + 568 >> 2] << 13 | HEAP32[$0 + 568 >> 2] >>> 19) ^ HEAP32[$0 + 568 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 556 >> 2] << 25 | HEAP32[$0 + 556 >> 2] >>> 7) ^ (HEAP32[$0 + 556 >> 2] << 14 | HEAP32[$0 + 556 >> 2] >>> 18) ^ HEAP32[$0 + 556 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 560 >> 2] = $2;
    HEAP32[$0 + 92 >> 2] = ($1 + 1322822218 | 0) + $2;
    HEAP32[$0 + 88 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 92 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 92 >> 2] + HEAP32[$0 + 88 >> 2];
    $1 = (HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0;
    $2 = HEAP32[$0 + 556 >> 2] + ((HEAP32[$0 + 520 >> 2] + ((HEAP32[$0 + 564 >> 2] << 15 | HEAP32[$0 + 564 >> 2] >>> 17) ^ (HEAP32[$0 + 564 >> 2] << 13 | HEAP32[$0 + 564 >> 2] >>> 19) ^ HEAP32[$0 + 564 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 552 >> 2] << 25 | HEAP32[$0 + 552 >> 2] >>> 7) ^ (HEAP32[$0 + 552 >> 2] << 14 | HEAP32[$0 + 552 >> 2] >>> 18) ^ HEAP32[$0 + 552 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 556 >> 2] = $2;
    HEAP32[$0 + 84 >> 2] = ($1 + 1537002063 | 0) + $2;
    HEAP32[$0 + 80 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 84 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 84 >> 2] + HEAP32[$0 + 80 >> 2];
    $1 = (HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0;
    $2 = HEAP32[$0 + 552 >> 2] + ((HEAP32[$0 + 580 >> 2] + ((HEAP32[$0 + 560 >> 2] << 15 | HEAP32[$0 + 560 >> 2] >>> 17) ^ (HEAP32[$0 + 560 >> 2] << 13 | HEAP32[$0 + 560 >> 2] >>> 19) ^ HEAP32[$0 + 560 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 548 >> 2] << 25 | HEAP32[$0 + 548 >> 2] >>> 7) ^ (HEAP32[$0 + 548 >> 2] << 14 | HEAP32[$0 + 548 >> 2] >>> 18) ^ HEAP32[$0 + 548 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 552 >> 2] = $2;
    HEAP32[$0 + 76 >> 2] = ($1 + 1747873779 | 0) + $2;
    HEAP32[$0 + 72 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 76 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 76 >> 2] + HEAP32[$0 + 72 >> 2];
    $1 = (HEAP32[$0 + 584 >> 2] + ((HEAP32[$0 + 596 >> 2] << 7 | HEAP32[$0 + 596 >> 2] >>> 25) ^ ((HEAP32[$0 + 596 >> 2] << 26 | HEAP32[$0 + 596 >> 2] >>> 6) ^ (HEAP32[$0 + 596 >> 2] << 21 | HEAP32[$0 + 596 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 588 >> 2])) | 0;
    $2 = HEAP32[$0 + 548 >> 2] + ((HEAP32[$0 + 576 >> 2] + ((HEAP32[$0 + 556 >> 2] << 15 | HEAP32[$0 + 556 >> 2] >>> 17) ^ (HEAP32[$0 + 556 >> 2] << 13 | HEAP32[$0 + 556 >> 2] >>> 19) ^ HEAP32[$0 + 556 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 544 >> 2] << 25 | HEAP32[$0 + 544 >> 2] >>> 7) ^ (HEAP32[$0 + 544 >> 2] << 14 | HEAP32[$0 + 544 >> 2] >>> 18) ^ HEAP32[$0 + 544 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 548 >> 2] = $2;
    HEAP32[$0 + 68 >> 2] = ($1 + 1955562222 | 0) + $2;
    HEAP32[$0 + 64 >> 2] = (HEAP32[$0 + 612 >> 2] & HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2])) + ((HEAP32[$0 + 612 >> 2] << 10 | HEAP32[$0 + 612 >> 2] >>> 22) ^ ((HEAP32[$0 + 612 >> 2] << 30 | HEAP32[$0 + 612 >> 2] >>> 2) ^ (HEAP32[$0 + 612 >> 2] << 19 | HEAP32[$0 + 612 >> 2] >>> 13)));
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 600 >> 2] + HEAP32[$0 + 68 >> 2];
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 68 >> 2] + HEAP32[$0 + 64 >> 2];
    $1 = (HEAP32[$0 + 588 >> 2] + ((HEAP32[$0 + 600 >> 2] << 7 | HEAP32[$0 + 600 >> 2] >>> 25) ^ ((HEAP32[$0 + 600 >> 2] << 26 | HEAP32[$0 + 600 >> 2] >>> 6) ^ (HEAP32[$0 + 600 >> 2] << 21 | HEAP32[$0 + 600 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 592 >> 2] ^ HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 592 >> 2])) | 0;
    $2 = HEAP32[$0 + 544 >> 2] + ((HEAP32[$0 + 572 >> 2] + ((HEAP32[$0 + 552 >> 2] << 15 | HEAP32[$0 + 552 >> 2] >>> 17) ^ (HEAP32[$0 + 552 >> 2] << 13 | HEAP32[$0 + 552 >> 2] >>> 19) ^ HEAP32[$0 + 552 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 540 >> 2] << 25 | HEAP32[$0 + 540 >> 2] >>> 7) ^ (HEAP32[$0 + 540 >> 2] << 14 | HEAP32[$0 + 540 >> 2] >>> 18) ^ HEAP32[$0 + 540 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 544 >> 2] = $2;
    HEAP32[$0 + 60 >> 2] = ($1 + 2024104815 | 0) + $2;
    HEAP32[$0 + 56 >> 2] = (HEAP32[$0 + 584 >> 2] & HEAP32[$0 + 612 >> 2] | HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2])) + ((HEAP32[$0 + 584 >> 2] << 10 | HEAP32[$0 + 584 >> 2] >>> 22) ^ ((HEAP32[$0 + 584 >> 2] << 30 | HEAP32[$0 + 584 >> 2] >>> 2) ^ (HEAP32[$0 + 584 >> 2] << 19 | HEAP32[$0 + 584 >> 2] >>> 13)));
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 604 >> 2] + HEAP32[$0 + 60 >> 2];
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 60 >> 2] + HEAP32[$0 + 56 >> 2];
    $1 = (HEAP32[$0 + 592 >> 2] + ((HEAP32[$0 + 604 >> 2] << 7 | HEAP32[$0 + 604 >> 2] >>> 25) ^ ((HEAP32[$0 + 604 >> 2] << 26 | HEAP32[$0 + 604 >> 2] >>> 6) ^ (HEAP32[$0 + 604 >> 2] << 21 | HEAP32[$0 + 604 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 596 >> 2] ^ HEAP32[$0 + 604 >> 2] & (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 596 >> 2])) | 0;
    $2 = HEAP32[$0 + 540 >> 2] + ((HEAP32[$0 + 568 >> 2] + ((HEAP32[$0 + 548 >> 2] << 15 | HEAP32[$0 + 548 >> 2] >>> 17) ^ (HEAP32[$0 + 548 >> 2] << 13 | HEAP32[$0 + 548 >> 2] >>> 19) ^ HEAP32[$0 + 548 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 536 >> 2] << 25 | HEAP32[$0 + 536 >> 2] >>> 7) ^ (HEAP32[$0 + 536 >> 2] << 14 | HEAP32[$0 + 536 >> 2] >>> 18) ^ HEAP32[$0 + 536 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 540 >> 2] = $2;
    HEAP32[$0 + 52 >> 2] = ($1 - 2067236844 | 0) + $2;
    HEAP32[$0 + 48 >> 2] = (HEAP32[$0 + 588 >> 2] & HEAP32[$0 + 584 >> 2] | HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2])) + ((HEAP32[$0 + 588 >> 2] << 10 | HEAP32[$0 + 588 >> 2] >>> 22) ^ ((HEAP32[$0 + 588 >> 2] << 30 | HEAP32[$0 + 588 >> 2] >>> 2) ^ (HEAP32[$0 + 588 >> 2] << 19 | HEAP32[$0 + 588 >> 2] >>> 13)));
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 608 >> 2] + HEAP32[$0 + 52 >> 2];
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 52 >> 2] + HEAP32[$0 + 48 >> 2];
    $1 = (HEAP32[$0 + 596 >> 2] + ((HEAP32[$0 + 608 >> 2] << 7 | HEAP32[$0 + 608 >> 2] >>> 25) ^ ((HEAP32[$0 + 608 >> 2] << 26 | HEAP32[$0 + 608 >> 2] >>> 6) ^ (HEAP32[$0 + 608 >> 2] << 21 | HEAP32[$0 + 608 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 600 >> 2] ^ HEAP32[$0 + 608 >> 2] & (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 600 >> 2])) | 0;
    $2 = HEAP32[$0 + 536 >> 2] + ((HEAP32[$0 + 564 >> 2] + ((HEAP32[$0 + 544 >> 2] << 15 | HEAP32[$0 + 544 >> 2] >>> 17) ^ (HEAP32[$0 + 544 >> 2] << 13 | HEAP32[$0 + 544 >> 2] >>> 19) ^ HEAP32[$0 + 544 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 532 >> 2] << 25 | HEAP32[$0 + 532 >> 2] >>> 7) ^ (HEAP32[$0 + 532 >> 2] << 14 | HEAP32[$0 + 532 >> 2] >>> 18) ^ HEAP32[$0 + 532 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 536 >> 2] = $2;
    HEAP32[$0 + 44 >> 2] = ($1 - 1933114872 | 0) + $2;
    HEAP32[$0 + 40 >> 2] = (HEAP32[$0 + 592 >> 2] & HEAP32[$0 + 588 >> 2] | HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2])) + ((HEAP32[$0 + 592 >> 2] << 10 | HEAP32[$0 + 592 >> 2] >>> 22) ^ ((HEAP32[$0 + 592 >> 2] << 30 | HEAP32[$0 + 592 >> 2] >>> 2) ^ (HEAP32[$0 + 592 >> 2] << 19 | HEAP32[$0 + 592 >> 2] >>> 13)));
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 612 >> 2] + HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 40 >> 2];
    $1 = (HEAP32[$0 + 600 >> 2] + ((HEAP32[$0 + 612 >> 2] << 7 | HEAP32[$0 + 612 >> 2] >>> 25) ^ ((HEAP32[$0 + 612 >> 2] << 26 | HEAP32[$0 + 612 >> 2] >>> 6) ^ (HEAP32[$0 + 612 >> 2] << 21 | HEAP32[$0 + 612 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 604 >> 2] ^ HEAP32[$0 + 612 >> 2] & (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 604 >> 2])) | 0;
    $2 = HEAP32[$0 + 532 >> 2] + ((HEAP32[$0 + 560 >> 2] + ((HEAP32[$0 + 540 >> 2] << 15 | HEAP32[$0 + 540 >> 2] >>> 17) ^ (HEAP32[$0 + 540 >> 2] << 13 | HEAP32[$0 + 540 >> 2] >>> 19) ^ HEAP32[$0 + 540 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 528 >> 2] << 25 | HEAP32[$0 + 528 >> 2] >>> 7) ^ (HEAP32[$0 + 528 >> 2] << 14 | HEAP32[$0 + 528 >> 2] >>> 18) ^ HEAP32[$0 + 528 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 532 >> 2] = $2;
    HEAP32[$0 + 36 >> 2] = ($1 - 1866530822 | 0) + $2;
    HEAP32[$0 + 32 >> 2] = (HEAP32[$0 + 596 >> 2] & HEAP32[$0 + 592 >> 2] | HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2])) + ((HEAP32[$0 + 596 >> 2] << 10 | HEAP32[$0 + 596 >> 2] >>> 22) ^ ((HEAP32[$0 + 596 >> 2] << 30 | HEAP32[$0 + 596 >> 2] >>> 2) ^ (HEAP32[$0 + 596 >> 2] << 19 | HEAP32[$0 + 596 >> 2] >>> 13)));
    HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 584 >> 2] + HEAP32[$0 + 36 >> 2];
    HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 36 >> 2] + HEAP32[$0 + 32 >> 2];
    $1 = (HEAP32[$0 + 604 >> 2] + ((HEAP32[$0 + 584 >> 2] << 7 | HEAP32[$0 + 584 >> 2] >>> 25) ^ ((HEAP32[$0 + 584 >> 2] << 26 | HEAP32[$0 + 584 >> 2] >>> 6) ^ (HEAP32[$0 + 584 >> 2] << 21 | HEAP32[$0 + 584 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 608 >> 2] ^ HEAP32[$0 + 584 >> 2] & (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 608 >> 2])) | 0;
    $2 = HEAP32[$0 + 528 >> 2] + ((HEAP32[$0 + 556 >> 2] + ((HEAP32[$0 + 536 >> 2] << 15 | HEAP32[$0 + 536 >> 2] >>> 17) ^ (HEAP32[$0 + 536 >> 2] << 13 | HEAP32[$0 + 536 >> 2] >>> 19) ^ HEAP32[$0 + 536 >> 2] >>> 10) | 0) + ((HEAP32[$0 + 524 >> 2] << 25 | HEAP32[$0 + 524 >> 2] >>> 7) ^ (HEAP32[$0 + 524 >> 2] << 14 | HEAP32[$0 + 524 >> 2] >>> 18) ^ HEAP32[$0 + 524 >> 2] >>> 3) | 0) | 0;
    HEAP32[$0 + 528 >> 2] = $2;
    HEAP32[$0 + 28 >> 2] = ($1 - 1538233109 | 0) + $2;
    HEAP32[$0 + 24 >> 2] = (HEAP32[$0 + 600 >> 2] & HEAP32[$0 + 596 >> 2] | HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2])) + ((HEAP32[$0 + 600 >> 2] << 10 | HEAP32[$0 + 600 >> 2] >>> 22) ^ ((HEAP32[$0 + 600 >> 2] << 30 | HEAP32[$0 + 600 >> 2] >>> 2) ^ (HEAP32[$0 + 600 >> 2] << 19 | HEAP32[$0 + 600 >> 2] >>> 13)));
    HEAP32[$0 + 588 >> 2] = HEAP32[$0 + 588 >> 2] + HEAP32[$0 + 28 >> 2];
    HEAP32[$0 + 604 >> 2] = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 24 >> 2];
    HEAP32[$0 + 20 >> 2] = ((HEAP32[$0 + 608 >> 2] + ((HEAP32[$0 + 588 >> 2] << 7 | HEAP32[$0 + 588 >> 2] >>> 25) ^ ((HEAP32[$0 + 588 >> 2] << 26 | HEAP32[$0 + 588 >> 2] >>> 6) ^ (HEAP32[$0 + 588 >> 2] << 21 | HEAP32[$0 + 588 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 612 >> 2] ^ HEAP32[$0 + 588 >> 2] & (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 612 >> 2])) | 0) - 1090935817 + ((HEAP32[$0 + 552 >> 2] + (HEAP32[$0 + 524 >> 2] + ((HEAP32[$0 + 532 >> 2] << 15 | HEAP32[$0 + 532 >> 2] >>> 17) ^ (HEAP32[$0 + 532 >> 2] << 13 | HEAP32[$0 + 532 >> 2] >>> 19) ^ HEAP32[$0 + 532 >> 2] >>> 10) | 0) | 0) + ((HEAP32[$0 + 520 >> 2] << 25 | HEAP32[$0 + 520 >> 2] >>> 7) ^ (HEAP32[$0 + 520 >> 2] << 14 | HEAP32[$0 + 520 >> 2] >>> 18) ^ HEAP32[$0 + 520 >> 2] >>> 3));
    HEAP32[$0 + 16 >> 2] = (HEAP32[$0 + 604 >> 2] & HEAP32[$0 + 600 >> 2] | HEAP32[$0 + 596 >> 2] & (HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2])) + ((HEAP32[$0 + 604 >> 2] << 10 | HEAP32[$0 + 604 >> 2] >>> 22) ^ ((HEAP32[$0 + 604 >> 2] << 30 | HEAP32[$0 + 604 >> 2] >>> 2) ^ (HEAP32[$0 + 604 >> 2] << 19 | HEAP32[$0 + 604 >> 2] >>> 13)));
    HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 592 >> 2] + HEAP32[$0 + 20 >> 2];
    HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 20 >> 2] + HEAP32[$0 + 16 >> 2];
    HEAP32[$0 + 12 >> 2] = ((HEAP32[$0 + 612 >> 2] + ((HEAP32[$0 + 592 >> 2] << 7 | HEAP32[$0 + 592 >> 2] >>> 25) ^ ((HEAP32[$0 + 592 >> 2] << 26 | HEAP32[$0 + 592 >> 2] >>> 6) ^ (HEAP32[$0 + 592 >> 2] << 21 | HEAP32[$0 + 592 >> 2] >>> 11))) | 0) + (HEAP32[$0 + 584 >> 2] ^ HEAP32[$0 + 592 >> 2] & (HEAP32[$0 + 588 >> 2] ^ HEAP32[$0 + 584 >> 2])) | 0) - 965641998 + ((HEAP32[$0 + 548 >> 2] + (HEAP32[$0 + 520 >> 2] + ((HEAP32[$0 + 528 >> 2] << 15 | HEAP32[$0 + 528 >> 2] >>> 17) ^ (HEAP32[$0 + 528 >> 2] << 13 | HEAP32[$0 + 528 >> 2] >>> 19) ^ HEAP32[$0 + 528 >> 2] >>> 10) | 0) | 0) + ((HEAP32[$0 + 580 >> 2] << 25 | HEAP32[$0 + 580 >> 2] >>> 7) ^ (HEAP32[$0 + 580 >> 2] << 14 | HEAP32[$0 + 580 >> 2] >>> 18) ^ HEAP32[$0 + 580 >> 2] >>> 3));
    HEAP32[$0 + 8 >> 2] = (HEAP32[$0 + 608 >> 2] & HEAP32[$0 + 604 >> 2] | HEAP32[$0 + 600 >> 2] & (HEAP32[$0 + 608 >> 2] | HEAP32[$0 + 604 >> 2])) + ((HEAP32[$0 + 608 >> 2] << 10 | HEAP32[$0 + 608 >> 2] >>> 22) ^ ((HEAP32[$0 + 608 >> 2] << 30 | HEAP32[$0 + 608 >> 2] >>> 2) ^ (HEAP32[$0 + 608 >> 2] << 19 | HEAP32[$0 + 608 >> 2] >>> 13)));
    HEAP32[$0 + 596 >> 2] = HEAP32[$0 + 596 >> 2] + HEAP32[$0 + 12 >> 2];
    HEAP32[$0 + 612 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$0 + 8 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + HEAP32[$0 + 612 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$0 + 608 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP32[$0 + 604 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + HEAP32[$0 + 600 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + HEAP32[$0 + 596 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + HEAP32[$0 + 592 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + HEAP32[$0 + 588 >> 2];
    $1 = HEAP32[$0 + 620 >> 2];
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] + HEAP32[$0 + 584 >> 2];
    __stack_pointer = $0 + 624 | 0;
    HEAP32[$3 + 16 >> 2] = 0;
    continue;
   }
   break;
  };
  if (HEAP32[$3 + 20 >> 2]) {
   memcpy(HEAP32[$3 + 16 >> 2] + (HEAP32[$3 + 28 >> 2] + 32 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2])
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function rustsecp256k1_v0_8_1_sha256_finalize($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  $1 = HEAP32[$2 + 28 >> 2];
  $0 = HEAP32[$1 + 96 >> 2];
  $3 = $2 + 16 | 0;
  rustsecp256k1_v0_8_1_write_be32($3, (HEAP32[$1 + 100 >> 2] & 536870911) << 3 | $0 >>> 29);
  rustsecp256k1_v0_8_1_write_be32($2 + 20 | 0, HEAP32[HEAP32[$2 + 28 >> 2] + 96 >> 2] << 3);
  $0 = HEAP32[$2 + 28 >> 2];
  $1 = (119 - (HEAP32[$0 + 96 >> 2] & 63) & 63) + 1 | 0;
  rustsecp256k1_v0_8_1_sha256_write($0, 691328, $1);
  rustsecp256k1_v0_8_1_sha256_write(HEAP32[$2 + 28 >> 2], $3, 8);
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (!(HEAP32[$2 + 12 >> 2] >= 8)) {
    $0 = HEAP32[$2 + 12 >> 2] << 2;
    rustsecp256k1_v0_8_1_write_be32($0 + HEAP32[$2 + 24 >> 2] | 0, HEAP32[HEAP32[$2 + 28 >> 2] + $0 >> 2]);
    HEAP32[HEAP32[$2 + 28 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 32 | 0;
 }
 
 function rustsecp256k1_v0_8_1_sha256_initialize($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 1779033703;
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = -1150833019;
  HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = 1013904242;
  HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = -1521486534;
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 1359893119;
  HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = -1694144372;
  HEAP32[HEAP32[$1 + 12 >> 2] + 24 >> 2] = 528734635;
  HEAP32[HEAP32[$1 + 12 >> 2] + 28 >> 2] = 1541459225;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_write_be32($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = HEAP32[$2 + 8 >> 2];
  HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = HEAP32[$2 + 8 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAP32[$2 + 8 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 12 >> 2]] = HEAP32[$2 + 8 >> 2] >>> 24;
 }
 
 function rustsecp256k1_v0_8_1_fe_normalize($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer + -64 | 0;
  HEAP32[$1 + 60 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  HEAP32[$1 >> 2] = HEAP32[$1 + 20 >> 2] >>> 16;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0 & 65535;
  $2 = __wasm_i64_mul(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], 977, 1);
  $0 = i64toi32_i32$HIGH_BITS + HEAP32[$1 + 52 >> 2] | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 48 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 52 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 44 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 36 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 24 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 36 >> 2] & HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 32 >> 2] & HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 28 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 16 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 28 >> 2] & HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 24 >> 2] & HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 16 >> 2] == -1 & ($0 | 0) == 65535 & (HEAP32[$1 + 8 >> 2] == -1 & HEAP32[$1 + 12 >> 2] == 1048575) & (($2 | 0) == 1048574 & HEAPU32[$1 + 48 >> 2] >= 4294966319 | $2 >>> 0 > 1048574);
  HEAP32[$1 >> 2] = $0 >>> 16 | $2;
  HEAP32[$1 + 4 >> 2] = $2 >>> 31;
  $2 = __wasm_i64_mul(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], 977, 1);
  $0 = i64toi32_i32$HIGH_BITS + HEAP32[$1 + 52 >> 2] | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 48 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 52 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 44 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 36 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 24 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 28 >> 2] >>> 20 | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 16 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $0 & 65535;
  $0 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 36 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_save($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[$5 + 12 >> 2] = $0;
  HEAP32[$5 + 8 >> 2] = $1;
  HEAP32[$5 + 4 >> 2] = $2;
  HEAP32[$5 >> 2] = $3;
  $1 = HEAP32[$5 + 8 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$5 + 12 >> 2];
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  $1 = HEAP32[$5 + 4 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$5 + 12 >> 2] + 32 | 0;
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  HEAP8[HEAP32[$5 + 12 >> 2] + 64 | 0] = HEAP32[$5 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_load($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  $1 = HEAP32[$5 + 12 >> 2];
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$5 + 24 >> 2];
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  $1 = HEAP32[$5 + 12 >> 2] + 32 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $2 = HEAP32[$5 + 20 >> 2];
  HEAP8[$2 | 0] = $0;
  HEAP8[$2 + 1 | 0] = $0 >>> 8;
  HEAP8[$2 + 2 | 0] = $0 >>> 16;
  HEAP8[$2 + 3 | 0] = $0 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  $3 = $1 + 24 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 24 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $3 = $1 + 16 | 0;
  $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
  $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
  $3 = $2 + 16 | 0;
  HEAP8[$3 | 0] = $0;
  HEAP8[$3 + 1 | 0] = $0 >>> 8;
  HEAP8[$3 + 2 | 0] = $0 >>> 16;
  HEAP8[$3 + 3 | 0] = $0 >>> 24;
  HEAP8[$3 + 4 | 0] = $4;
  HEAP8[$3 + 5 | 0] = $4 >>> 8;
  HEAP8[$3 + 6 | 0] = $4 >>> 16;
  HEAP8[$3 + 7 | 0] = $4 >>> 24;
  $1 = $1 + 8 | 0;
  $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $1 = $2 + 8 | 0;
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  HEAP32[HEAP32[$5 + 16 >> 2] >> 2] = HEAPU8[HEAP32[$5 + 12 >> 2] + 64 | 0];
 }
 
 function rustsecp256k1_v0_8_1_ge_set_gej_var($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 92 >> 2] = $0;
  HEAP32[$2 + 88 >> 2] = $1;
  label$1 : {
   if (HEAP32[HEAP32[$2 + 88 >> 2] + 120 >> 2]) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 92 >> 2];
    HEAP32[HEAP32[$0 + 12 >> 2] + 80 >> 2] = 1;
    rustsecp256k1_v0_8_1_fe_clear(HEAP32[$0 + 12 >> 2]);
    rustsecp256k1_v0_8_1_fe_clear(HEAP32[$0 + 12 >> 2] + 40 | 0);
    __stack_pointer = $0 + 16 | 0;
    break label$1;
   }
   $0 = __stack_pointer - 96 | 0;
   __stack_pointer = $0;
   $1 = HEAP32[$2 + 88 >> 2] + 80 | 0;
   HEAP32[$0 + 92 >> 2] = $1;
   HEAP32[$0 + 88 >> 2] = $1;
   $3 = HEAP32[$0 + 88 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $1 = $0 + 48 | 0;
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $4 = $3 + 32 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $1 + 32 | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $4 = $3 + 24 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $1 + 24 | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $4 = $3 + 16 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $1 + 16 | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $3 = $3 + 8 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $1 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5 + 4 >> 2] = $4;
   rustsecp256k1_v0_8_1_fe_normalize_var($1);
   $3 = $0 + 8 | 0;
   rustsecp256k1_v0_8_1_fe_to_signed62($3, $1);
   rustsecp256k1_v0_8_1_modinv64_var($3, 691280);
   rustsecp256k1_v0_8_1_fe_from_signed62(HEAP32[$0 + 92 >> 2], $3);
   __stack_pointer = $0 + 96 | 0;
   $0 = $2 + 48 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($0, HEAP32[$2 + 88 >> 2] + 80 | 0);
   $1 = $2 + 8 | 0;
   rustsecp256k1_v0_8_1_fe_mul($1, HEAP32[$2 + 88 >> 2] + 80 | 0, $0);
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 88 >> 2], $0);
   $0 = HEAP32[$2 + 88 >> 2] + 40 | 0;
   rustsecp256k1_v0_8_1_fe_mul($0, $0, $1);
   rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$2 + 88 >> 2] + 80 | 0, 1);
   rustsecp256k1_v0_8_1_ge_set_xy(HEAP32[$2 + 92 >> 2], HEAP32[$2 + 88 >> 2], HEAP32[$2 + 88 >> 2] + 40 | 0);
  }
  __stack_pointer = $2 + 96 | 0;
 }
 
 function rustsecp256k1_v0_8_1_xonly_pubkey_save($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_xonly_pubkey_load($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function rustsecp256k1_v0_8_1_extrakeys_ge_even_y($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 40;
  if (HEAP32[HEAP32[$0 + 12 >> 2] >> 2] & 1) {
   $0 = HEAP32[$1 + 12 >> 2] + 40 | 0;
   rustsecp256k1_v0_8_1_fe_negate($0, $0, 1);
   HEAP32[$1 + 8 >> 2] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_keypair_create($0, $1) {
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 144 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 136 >> 2] = $0;
  HEAP32[$2 + 132 >> 2] = $1;
  HEAP32[$2 + 128 >> 2] = 692344;
  HEAP32[$2 + 4 >> 2] = 0;
  label$1 : {
   if ((HEAP32[$2 + 132 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 136 >> 2] + 168 | 0, 690748);
    HEAP32[$2 + 140 >> 2] = 0;
    break label$1;
   }
   memset(HEAP32[$2 + 132 >> 2], 96);
   $0 = __stack_pointer - 16 | 0;
   HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 136 >> 2];
   if ((HEAP32[HEAP32[$0 + 12 >> 2] >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 136 >> 2] + 168 | 0, 690336);
    HEAP32[$2 + 140 >> 2] = 0;
    break label$1;
   }
   if ((HEAP32[$2 + 128 >> 2] != 0 ^ -1) & 1) {
    rustsecp256k1_v0_8_1_callback_call(HEAP32[$2 + 136 >> 2] + 168 | 0, 690764);
    HEAP32[$2 + 140 >> 2] = 0;
    break label$1;
   }
   $1 = $2 + 96 | 0;
   $3 = $2 + 8 | 0;
   (wasm2js_i32$0 = $2, wasm2js_i32$1 = rustsecp256k1_v0_8_1_ec_pubkey_create_helper(HEAP32[$2 + 136 >> 2], $1, $3, HEAP32[$2 + 128 >> 2])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   $0 = __stack_pointer - 16 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 132 >> 2];
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $3;
   rustsecp256k1_v0_8_1_scalar_get_b32(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   rustsecp256k1_v0_8_1_pubkey_save(HEAP32[$0 + 12 >> 2] + 32 | 0, HEAP32[$0 + 4 >> 2]);
   __stack_pointer = $0 + 16 | 0;
   rustsecp256k1_v0_8_1_memczero(HEAP32[$2 + 132 >> 2], 96, (HEAP32[$2 + 4 >> 2] != 0 ^ -1) & 1);
   rustsecp256k1_v0_8_1_scalar_clear($1);
   HEAP32[$2 + 140 >> 2] = HEAP32[$2 + 4 >> 2];
  }
  __stack_pointer = $2 + 144 | 0;
  return HEAP32[$2 + 140 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_keypair_load($0, $1, $2, $3) {
  var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 16 >> 2] + 32;
  $1 = HEAP32[$4 + 8 >> 2];
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = 64;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = rustsecp256k1_v0_8_1_pubkey_load(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  if (HEAP32[$4 + 24 >> 2]) {
   if (HEAP32[$4 + 12 >> 2]) {
    $1 = HEAP32[$4 + 24 >> 2];
    $2 = HEAP32[$4 + 16 >> 2];
    $0 = __stack_pointer - 32 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
    HEAP32[$0 + 20 >> 2] = $1;
    HEAP32[$0 + 16 >> 2] = $2;
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_set_b32_seckey(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $1 = __stack_pointer - 16 | 0;
    HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 24 >> 2];
    HEAP32[$1 + 8 >> 2] = $0 + 12;
    HEAP32[$1 + 4 >> 2] = 4;
    label$1 : {
     if ((HEAP32[$0 + 12 >> 2] != 0 ^ -1) & 1) {
      rustsecp256k1_v0_8_1_callback_call(HEAP32[$0 + 24 >> 2] + 168 | 0, 691592);
      HEAP32[$0 + 28 >> 2] = 0;
      break label$1;
     }
     HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 12 >> 2];
    }
    __stack_pointer = $0 + 32 | 0;
    $0 = HEAP32[$0 + 28 >> 2] != 0;
   } else {
    $0 = 0
   }
   HEAP32[$4 + 12 >> 2] = $0;
  }
  if (!HEAP32[$4 + 12 >> 2]) {
   memcpy(HEAP32[$4 + 20 >> 2], 691152, 88);
   if (HEAP32[$4 + 24 >> 2]) {
    $1 = HEAP32[172645];
    $0 = HEAP32[$4 + 24 >> 2];
    $2 = $0 + 24 | 0;
    HEAP32[$2 >> 2] = HEAP32[172644];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = HEAP32[172643];
    $2 = $0 + 16 | 0;
    HEAP32[$2 >> 2] = HEAP32[172642];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = HEAP32[172641];
    $2 = $0 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[172640];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = HEAP32[172639];
    HEAP32[$0 >> 2] = HEAP32[172638];
    HEAP32[$0 + 4 >> 2] = $1;
   }
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 12 >> 2];
 }
 
 function nonce_function_bip340($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 192 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 184 >> 2] = $0;
  HEAP32[$8 + 180 >> 2] = $1;
  HEAP32[$8 + 176 >> 2] = $2;
  HEAP32[$8 + 172 >> 2] = $3;
  HEAP32[$8 + 168 >> 2] = $4;
  HEAP32[$8 + 164 >> 2] = $5;
  HEAP32[$8 + 160 >> 2] = $6;
  HEAP32[$8 + 156 >> 2] = $7;
  label$1 : {
   if (!HEAP32[$8 + 164 >> 2]) {
    HEAP32[$8 + 188 >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[$8 + 156 >> 2]) {
     $0 = __stack_pointer - 16 | 0;
     __stack_pointer = $0;
     $1 = $8 + 48 | 0;
     HEAP32[$0 + 12 >> 2] = $1;
     rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$0 + 12 >> 2]);
     HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = 618476057;
     HEAP32[HEAP32[$0 + 12 >> 2] + 4 >> 2] = 1320844912;
     HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = -904942663;
     HEAP32[HEAP32[$0 + 12 >> 2] + 12 >> 2] = 262346349;
     HEAP32[HEAP32[$0 + 12 >> 2] + 16 >> 2] = 989586609;
     HEAP32[HEAP32[$0 + 12 >> 2] + 20 >> 2] = 1279582103;
     HEAP32[HEAP32[$0 + 12 >> 2] + 24 >> 2] = 1252796217;
     HEAP32[HEAP32[$0 + 12 >> 2] + 28 >> 2] = 614368522;
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$2 + 96 >> 2] = 64;
     HEAP32[$2 + 100 >> 2] = 0;
     __stack_pointer = $0 + 16 | 0;
     rustsecp256k1_v0_8_1_sha256_write($1, HEAP32[$8 + 156 >> 2], 32);
     rustsecp256k1_v0_8_1_sha256_finalize($1, $8 + 16 | 0);
     HEAP32[$8 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$8 + 12 >> 2] < 32) {
       $0 = HEAP32[$8 + 12 >> 2];
       $1 = $0 + ($8 + 16 | 0) | 0;
       HEAP8[$1 | 0] = HEAPU8[$1 | 0] ^ HEAPU8[HEAP32[$8 + 172 >> 2] + $0 | 0];
       HEAP32[$8 + 12 >> 2] = HEAP32[$8 + 12 >> 2] + 1;
       continue;
      }
      break;
     };
     break label$3;
    }
    HEAP32[$8 + 12 >> 2] = 0;
    while (1) {
     if (HEAP32[$8 + 12 >> 2] < 32) {
      $0 = HEAP32[$8 + 12 >> 2];
      HEAP8[$0 + ($8 + 16 | 0) | 0] = HEAPU8[HEAP32[$8 + 172 >> 2] + $0 | 0] ^ HEAPU8[$0 + 691600 | 0];
      HEAP32[$8 + 12 >> 2] = HEAP32[$8 + 12 >> 2] + 1;
      continue;
     }
     break;
    };
   }
   label$9 : {
    label$10 : {
     if (HEAP32[$8 + 160 >> 2] != 13) {
      break label$10
     }
     if (rustsecp256k1_v0_8_1_memcmp_var(HEAP32[$8 + 164 >> 2], 691632, HEAP32[$8 + 160 >> 2])) {
      break label$10
     }
     $0 = __stack_pointer - 16 | 0;
     __stack_pointer = $0;
     HEAP32[$0 + 12 >> 2] = $8 + 48;
     rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$0 + 12 >> 2]);
     HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = 1180785461;
     HEAP32[HEAP32[$0 + 12 >> 2] + 4 >> 2] = -188760073;
     HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = -1618098575;
     HEAP32[HEAP32[$0 + 12 >> 2] + 12 >> 2] = -2090698061;
     HEAP32[HEAP32[$0 + 12 >> 2] + 16 >> 2] = 1612804480;
     HEAP32[HEAP32[$0 + 12 >> 2] + 20 >> 2] = 1463125601;
     HEAP32[HEAP32[$0 + 12 >> 2] + 24 >> 2] = 564305492;
     HEAP32[HEAP32[$0 + 12 >> 2] + 28 >> 2] = 1756396364;
     $1 = HEAP32[$0 + 12 >> 2];
     HEAP32[$1 + 96 >> 2] = 64;
     HEAP32[$1 + 100 >> 2] = 0;
     __stack_pointer = $0 + 16 | 0;
     break label$9;
    }
    $1 = HEAP32[$8 + 164 >> 2];
    $2 = HEAP32[$8 + 160 >> 2];
    $0 = __stack_pointer - 48 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 44 >> 2] = $8 + 48;
    HEAP32[$0 + 40 >> 2] = $1;
    HEAP32[$0 + 36 >> 2] = $2;
    rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$0 + 44 >> 2]);
    rustsecp256k1_v0_8_1_sha256_write(HEAP32[$0 + 44 >> 2], HEAP32[$0 + 40 >> 2], HEAP32[$0 + 36 >> 2]);
    rustsecp256k1_v0_8_1_sha256_finalize(HEAP32[$0 + 44 >> 2], $0);
    rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$0 + 44 >> 2]);
    rustsecp256k1_v0_8_1_sha256_write(HEAP32[$0 + 44 >> 2], $0, 32);
    rustsecp256k1_v0_8_1_sha256_write(HEAP32[$0 + 44 >> 2], $0, 32);
    __stack_pointer = $0 + 48 | 0;
   }
   $0 = $8 + 48 | 0;
   rustsecp256k1_v0_8_1_sha256_write($0, $8 + 16 | 0, 32);
   rustsecp256k1_v0_8_1_sha256_write($0, HEAP32[$8 + 168 >> 2], 32);
   rustsecp256k1_v0_8_1_sha256_write($0, HEAP32[$8 + 180 >> 2], HEAP32[$8 + 176 >> 2]);
   rustsecp256k1_v0_8_1_sha256_finalize($0, HEAP32[$8 + 184 >> 2]);
   HEAP32[$8 + 188 >> 2] = 1;
  }
  __stack_pointer = $8 + 192 | 0;
  return HEAP32[$8 + 188 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_schnorrsig_challenge($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 176 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 172 >> 2] = $0;
  HEAP32[$5 + 168 >> 2] = $1;
  HEAP32[$5 + 164 >> 2] = $2;
  HEAP32[$5 + 160 >> 2] = $3;
  HEAP32[$5 + 156 >> 2] = $4;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $1 = $5 + 8 | 0;
  HEAP32[$0 + 12 >> 2] = $1;
  rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$0 + 12 >> 2]);
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = -1662207471;
  HEAP32[HEAP32[$0 + 12 >> 2] + 4 >> 2] = 596792193;
  HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = 292000018;
  HEAP32[HEAP32[$0 + 12 >> 2] + 12 >> 2] = -782074353;
  HEAP32[HEAP32[$0 + 12 >> 2] + 16 >> 2] = -1748470448;
  HEAP32[HEAP32[$0 + 12 >> 2] + 20 >> 2] = 3983205;
  HEAP32[HEAP32[$0 + 12 >> 2] + 24 >> 2] = -1862921884;
  HEAP32[HEAP32[$0 + 12 >> 2] + 28 >> 2] = 870954602;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$2 + 96 >> 2] = 64;
  HEAP32[$2 + 100 >> 2] = 0;
  __stack_pointer = $0 + 16 | 0;
  rustsecp256k1_v0_8_1_sha256_write($1, HEAP32[$5 + 168 >> 2], 32);
  rustsecp256k1_v0_8_1_sha256_write($1, HEAP32[$5 + 156 >> 2], 32);
  rustsecp256k1_v0_8_1_sha256_write($1, HEAP32[$5 + 164 >> 2], HEAP32[$5 + 160 >> 2]);
  $0 = $5 + 112 | 0;
  rustsecp256k1_v0_8_1_sha256_finalize($1, $0);
  rustsecp256k1_v0_8_1_scalar_set_b32(HEAP32[$5 + 172 >> 2], $0, 0);
  __stack_pointer = $5 + 176 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_add($0, $1, $2) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$3 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_from_u64($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
  $0 = HEAP32[$3 + 20 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($3, 64);
  $0 = HEAP32[$3 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
  $0 = HEAP32[$3 + 20 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($3, 64);
  $0 = HEAP32[$3 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
  $0 = HEAP32[$3 + 20 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($3, 64);
  $0 = HEAP32[$3 + 24 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
  $0 = HEAP32[$3 + 20 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($3, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($3, 64);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = HEAP32[$0 >> 2] + rustsecp256k1_v0_8_1_scalar_check_overflow(HEAP32[$3 + 28 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  rustsecp256k1_v0_8_1_scalar_reduce(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2]);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_equal_var($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  rustsecp256k1_v0_8_1_fe_negate($2, HEAP32[$2 + 44 >> 2], 1);
  rustsecp256k1_v0_8_1_fe_add($2, HEAP32[$2 + 40 >> 2]);
  $0 = rustsecp256k1_v0_8_1_fe_normalizes_to_zero_var($2);
  __stack_pointer = $2 + 48 | 0;
  return $0;
 }
 
 function rustsecp256k1_v0_8_1_fe_normalizes_to_zero_var($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 80 | 0;
  HEAP32[$1 + 72 >> 2] = $0;
  $0 = HEAP32[$1 + 72 >> 2];
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 64 >> 2] = $2;
  HEAP32[$1 + 68 >> 2] = $0;
  $0 = HEAP32[$1 + 72 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 36 >> 2] >>> 16;
  HEAP32[$1 + 12 >> 2] = 0;
  $2 = __wasm_i64_mul(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 977, 1);
  $0 = i64toi32_i32$HIGH_BITS + HEAP32[$1 + 68 >> 2] | 0;
  $3 = $2;
  $2 = HEAP32[$1 + 64 >> 2] + $2 | 0;
  $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 64 >> 2] = $2;
  HEAP32[$1 + 68 >> 2] = $0;
  $0 = HEAP32[$1 + 68 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$1 + 28 >> 2] = $0 & 1048575;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2] ^ 976;
  HEAP32[$1 + 20 >> 2] = $0 ^ 1;
  label$1 : {
   if ((HEAP32[$1 + 16 >> 2] != -1 | HEAP32[$1 + 20 >> 2] != 1048575) & (HEAP32[$1 + 24 >> 2] | HEAP32[$1 + 28 >> 2]) != 0) {
    HEAP32[$1 + 76 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$1 + 72 >> 2];
   $2 = HEAP32[$0 + 8 >> 2];
   $0 = HEAP32[$0 + 12 >> 2];
   HEAP32[$1 + 56 >> 2] = $2;
   HEAP32[$1 + 60 >> 2] = $0;
   $0 = HEAP32[$1 + 72 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   $0 = HEAP32[$0 + 20 >> 2];
   HEAP32[$1 + 48 >> 2] = $2;
   HEAP32[$1 + 52 >> 2] = $0;
   $0 = HEAP32[$1 + 72 >> 2];
   $2 = HEAP32[$0 + 24 >> 2];
   $0 = HEAP32[$0 + 28 >> 2];
   HEAP32[$1 + 40 >> 2] = $2;
   HEAP32[$1 + 44 >> 2] = $0;
   $0 = HEAP32[$1 + 36 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$1 + 36 >> 2] = $0 & 65535;
   $0 = HEAP32[$1 + 60 >> 2];
   $2 = HEAP32[$1 + 68 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 56 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 56 >> 2] = $2;
   HEAP32[$1 + 60 >> 2] = $0;
   $0 = HEAP32[$1 + 52 >> 2];
   $2 = HEAP32[$1 + 60 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 48 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 48 >> 2] = $2;
   HEAP32[$1 + 52 >> 2] = $0;
   $0 = HEAP32[$1 + 60 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 60 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 60 >> 2] | HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2] | HEAP32[$1 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 60 >> 2] & HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 56 >> 2] & HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 44 >> 2];
   $2 = HEAP32[$1 + 52 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 40 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 40 >> 2] = $2;
   HEAP32[$1 + 44 >> 2] = $0;
   $0 = HEAP32[$1 + 52 >> 2];
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 52 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 52 >> 2] | HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 48 >> 2] | HEAP32[$1 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 52 >> 2] & HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 48 >> 2] & HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 36 >> 2];
   $2 = HEAP32[$1 + 44 >> 2] >>> 20 | 0;
   $3 = $2;
   $2 = HEAP32[$1 + 32 >> 2] + $2 | 0;
   $0 = $3 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$1 + 32 >> 2] = $2;
   HEAP32[$1 + 36 >> 2] = $0;
   $0 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 44 >> 2] = $0 & 1048575;
   $0 = HEAP32[$1 + 44 >> 2] | HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 40 >> 2] | HEAP32[$1 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 44 >> 2] & HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 40 >> 2] & HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 36 >> 2] | HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 32 >> 2] | HEAP32[$1 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 20 >> 2] & (HEAP32[$1 + 36 >> 2] ^ 983040);
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 32 >> 2] & HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   HEAP32[$1 + 76 >> 2] = !(HEAP32[$1 + 24 >> 2] | HEAP32[$1 + 28 >> 2]) | HEAP32[$1 + 16 >> 2] == -1 & HEAP32[$1 + 20 >> 2] == 1048575;
  }
  return HEAP32[$1 + 76 >> 2];
 }
 
 function rustsecp256k1_v0_8_1_u128_mul($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 32 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 24 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = $4;
  __multi3($5 + 8 | 0, HEAP32[$5 + 32 >> 2], HEAP32[$5 + 36 >> 2], 0, 0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 28 >> 2], 0, 0);
  $0 = $5 + 16 | 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$5 + 8 >> 2];
  $1 = HEAP32[$5 + 12 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $4 = HEAP32[$5 + 44 >> 2];
  HEAP32[$4 + 8 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $1;
  __stack_pointer = $5 + 48 | 0;
 }
 
 function rustsecp256k1_v0_8_1_u128_accum_mul($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 32 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 24 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = $4;
  $0 = $5 + 8 | 0;
  __multi3($0, HEAP32[$5 + 32 >> 2], HEAP32[$5 + 36 >> 2], 0, 0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 28 >> 2], 0, 0);
  $9 = HEAP32[$5 + 8 >> 2];
  $4 = HEAP32[$5 + 12 >> 2];
  $6 = HEAP32[$5 + 44 >> 2];
  $7 = $6 + 8 | 0;
  $2 = HEAP32[$7 >> 2];
  $10 = HEAP32[$6 >> 2];
  $8 = HEAP32[$6 + 4 >> 2];
  $0 = $0 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  $3 = $2 + $1 | 0;
  $0 = HEAP32[$0 + 4 >> 2] + HEAP32[$7 + 4 >> 2] | 0;
  $0 = $1 >>> 0 > $3 >>> 0 ? $0 + 1 | 0 : $0;
  $1 = $4 + $8 | 0;
  $4 = $3;
  $2 = $9 + $10 | 0;
  $1 = $2 >>> 0 < $9 >>> 0 ? $1 + 1 | 0 : $1;
  $3 = ($1 | 0) == ($8 | 0) & $2 >>> 0 < $10 >>> 0 | $1 >>> 0 < $8 >>> 0;
  $4 = $4 + $3 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$7 >> 2] = $4;
  HEAP32[$7 + 4 >> 2] = $3 >>> 0 > $4 >>> 0 ? $0 + 1 | 0 : $0;
  __stack_pointer = $5 + 48 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_to_storage($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  $0 = HEAP32[$3 + 8 >> 2];
  $5 = HEAP32[$0 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[$0 + 8 >> 2] << 20;
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $2 | $4;
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $4 = HEAP32[$0 + 12 >> 2];
  $0 = $4 >>> 12 | 0;
  $4 = ($4 & 4095) << 20 | $1 >>> 12;
  $1 = $0;
  $0 = HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2];
  $2 = HEAP32[$3 + 12 >> 2];
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $0 << 8 | $1;
  $1 = HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  $1 = HEAP32[$1 + 20 >> 2];
  $2 = $1 >>> 24 | 0;
  $4 = ($1 & 16777215) << 8 | $0 >>> 24;
  $1 = $2;
  $2 = HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$2 + 24 >> 2];
  $2 = HEAP32[$2 + 28 >> 2] << 28 | $0 >>> 4;
  $5 = $0 << 28;
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = $4 | $5;
  HEAP32[$0 + 20 >> 2] = $1 | $2;
  $0 = HEAP32[$3 + 8 >> 2];
  $4 = HEAP32[$0 + 28 >> 2] >>> 4 | 0;
  $2 = HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$2 + 32 >> 2];
  $2 = HEAP32[$2 + 36 >> 2] << 16 | $0 >>> 16;
  $5 = $0 << 16;
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 24 >> 2] = $4 | $5;
  HEAP32[$0 + 28 >> 2] = $2;
 }
 
 function rustsecp256k1_v0_8_1_fe_from_storage($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$0 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $1 & 1048575;
  $0 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$0 + 4 >> 2] >>> 20 | 0;
  $3 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$3 + 8 >> 2];
  $3 = HEAP32[$3 + 12 >> 2] << 12 | $0 >>> 20;
  $1 = $0 << 12;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = $4 | $1;
  HEAP32[$0 + 12 >> 2] = $3 & 1048575;
  $0 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$0 + 12 >> 2] >>> 8 | 0;
  $3 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$3 + 16 >> 2];
  $3 = HEAP32[$3 + 20 >> 2] << 24 | $0 >>> 8;
  $1 = $0 << 24;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = $4 | $1;
  HEAP32[$0 + 20 >> 2] = $3 & 1048575;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $4 = HEAP32[$0 + 20 >> 2];
  $0 = $4 >>> 28 | 0;
  $4 = ($4 & 268435455) << 4 | $1 >>> 28;
  $1 = $0;
  $0 = HEAP32[HEAP32[$2 + 8 >> 2] + 24 >> 2];
  $3 = HEAP32[$2 + 12 >> 2];
  HEAP32[$3 + 24 >> 2] = $4;
  HEAP32[$3 + 28 >> 2] = $0 << 4 & 1048575 | $1;
  $1 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$1 + 24 >> 2];
  $1 = HEAP32[$1 + 28 >> 2];
  $3 = $1 >>> 16 | 0;
  $1 = ($1 & 65535) << 16 | $0 >>> 16;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 + 36 >> 2] = $3;
 }
 
 function rustsecp256k1_v0_8_1_scalar_to_signed62($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 48 | 0;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 32 >> 2] = -1;
  HEAP32[$2 + 36 >> 2] = 1073741823;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
  $0 = HEAP32[$2 + 28 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 + 24 >> 2];
  HEAP32[$1 + 4 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$2 + 16 >> 2];
  $0 = HEAP32[$2 + 20 >> 2] << 2 | $1 >>> 30;
  $3 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 + 8 >> 2] = $1 << 2 | HEAP32[$2 + 28 >> 2] >>> 30;
  HEAP32[$3 + 12 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$2 + 12 >> 2] << 4 | $1 >>> 28;
  $3 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 + 16 >> 2] = $1 << 4 | HEAP32[$2 + 20 >> 2] >>> 28;
  HEAP32[$3 + 20 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$2 >> 2];
  $0 = HEAP32[$2 + 4 >> 2] << 6 | $1 >>> 26;
  $3 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 + 24 >> 2] = $1 << 6 | HEAP32[$2 + 12 >> 2] >>> 26;
  HEAP32[$3 + 28 >> 2] = $0 & 1073741823;
  $0 = HEAP32[$2 + 44 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$2 + 4 >> 2] >>> 24;
  HEAP32[$0 + 36 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_modinv64_var($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 240 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 236 >> 2] = $0;
  HEAP32[$4 + 232 >> 2] = $1;
  $0 = $4 + 192 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 152 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 152 >> 2] = 1;
  HEAP32[$4 + 156 >> 2] = 0;
  $0 = HEAP32[$4 + 232 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $4 + 112 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $0 = HEAP32[$4 + 236 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $4 + 72 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$4 + 64 >> 2] = 5;
  HEAP32[$4 + 56 >> 2] = -1;
  HEAP32[$4 + 60 >> 2] = -1;
  while (1) {
   label$1 : {
    $1 = HEAP32[$4 + 60 >> 2];
    $2 = HEAP32[$4 + 112 >> 2];
    $3 = HEAP32[$4 + 116 >> 2];
    $5 = HEAP32[$4 + 72 >> 2];
    $6 = HEAP32[$4 + 76 >> 2];
    $0 = __stack_pointer - 112 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 104 >> 2] = HEAP32[$4 + 56 >> 2];
    HEAP32[$0 + 108 >> 2] = $1;
    HEAP32[$0 + 96 >> 2] = $2;
    HEAP32[$0 + 100 >> 2] = $3;
    HEAP32[$0 + 88 >> 2] = $5;
    HEAP32[$0 + 92 >> 2] = $6;
    HEAP32[$0 + 84 >> 2] = $4;
    HEAP32[$0 + 72 >> 2] = 1;
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 64 >> 2] = 0;
    HEAP32[$0 + 68 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 1;
    HEAP32[$0 + 52 >> 2] = 0;
    $1 = HEAP32[$0 + 100 >> 2];
    HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 96 >> 2];
    HEAP32[$0 + 44 >> 2] = $1;
    $1 = HEAP32[$0 + 92 >> 2];
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 88 >> 2];
    HEAP32[$0 + 36 >> 2] = $1;
    HEAP32[$0 + 16 >> 2] = 62;
    while (1) {
     $5 = HEAP32[$0 + 32 >> 2];
     $6 = HEAP32[$0 + 36 >> 2];
     $1 = HEAP32[$0 + 16 >> 2];
     $2 = $1 & 31;
     if (($1 & 63) >>> 0 >= 32) {
      $1 = 0;
      $3 = -1 << $2;
     } else {
      $1 = -1 << $2;
      $3 = $1 | (1 << $2) - 1 & -1 >>> 32 - $2;
     }
     $2 = __stack_pointer - 16 | 0;
     HEAP32[$2 + 8 >> 2] = $1 | $5;
     HEAP32[$2 + 12 >> 2] = $3 | $6;
     $1 = HEAP32[$2 + 12 >> 2];
     $2 = HEAP32[$2 + 8 >> 2];
     __inlined_func$__wasm_ctz_i64$155 : {
      if ($1 | $2) {
       $3 = $2;
       $2 = $2 - 1 | 0;
       $3 = $3 ^ $2;
       $5 = $1 - 1 | 0;
       $1 = Math_clz32($1 ^ (($2 | 0) != -1 ? $5 + 1 | 0 : $5));
       if (($1 | 0) == 32) {
        $1 = Math_clz32($3) + 32 | 0
       }
       i64toi32_i32$HIGH_BITS = 0 - ($1 >>> 0 > 63) | 0;
       $1 = 63 - $1 | 0;
       break __inlined_func$__wasm_ctz_i64$155;
      }
      i64toi32_i32$HIGH_BITS = 0;
      $1 = 64;
     }
     HEAP32[$0 + 8 >> 2] = $1;
     $5 = HEAP32[$0 + 36 >> 2];
     $6 = HEAP32[$0 + 32 >> 2];
     $1 = HEAP32[$0 + 8 >> 2];
     $3 = $1 & 31;
     $2 = $0;
     if (($1 & 63) >>> 0 >= 32) {
      $1 = 0;
      $3 = $5 >>> $3 | 0;
     } else {
      $1 = $5 >>> $3 | 0;
      $3 = ((1 << $3) - 1 & $5) << 32 - $3 | $6 >>> $3;
     }
     HEAP32[$0 + 32 >> 2] = $3;
     HEAP32[$2 + 36 >> 2] = $1;
     $1 = HEAP32[$2 + 76 >> 2];
     $5 = HEAP32[$2 + 72 >> 2];
     $6 = HEAP32[$2 + 8 >> 2];
     $3 = $6 & 31;
     if (($6 & 63) >>> 0 >= 32) {
      $1 = $5 << $3;
      $3 = 0;
     } else {
      $1 = (1 << $3) - 1 & $5 >>> 32 - $3 | $1 << $3;
      $3 = $5 << $3;
     }
     HEAP32[$2 + 72 >> 2] = $3;
     HEAP32[$2 + 76 >> 2] = $1;
     $1 = HEAP32[$2 + 68 >> 2];
     $5 = HEAP32[$2 + 64 >> 2];
     $6 = HEAP32[$2 + 8 >> 2];
     $3 = $6 & 31;
     if (($6 & 63) >>> 0 >= 32) {
      $1 = $5 << $3;
      $3 = 0;
     } else {
      $1 = (1 << $3) - 1 & $5 >>> 32 - $3 | $1 << $3;
      $3 = $5 << $3;
     }
     HEAP32[$2 + 64 >> 2] = $3;
     HEAP32[$2 + 68 >> 2] = $1;
     $1 = HEAP32[$2 + 8 >> 2];
     $3 = HEAP32[$2 + 104 >> 2];
     $5 = HEAP32[$2 + 108 >> 2] - (($1 >> 31) + ($3 >>> 0 < $1 >>> 0) | 0) | 0;
     HEAP32[$2 + 104 >> 2] = $3 - $1;
     HEAP32[$2 + 108 >> 2] = $5;
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - HEAP32[$2 + 8 >> 2];
     if (HEAP32[$2 + 16 >> 2]) {
      label$5 : {
       if (HEAP32[$2 + 108 >> 2] < 0) {
        $1 = HEAP32[$2 + 108 >> 2];
        $3 = HEAP32[$2 + 104 >> 2];
        HEAP32[$2 + 104 >> 2] = 0 - $3;
        HEAP32[$2 + 108 >> 2] = 0 - ((($3 | 0) != 0) + $1 | 0);
        $1 = HEAP32[$2 + 44 >> 2];
        HEAP32[$2 >> 2] = HEAP32[$2 + 40 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$2 + 36 >> 2];
        HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 32 >> 2];
        HEAP32[$2 + 44 >> 2] = $1;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = HEAP32[$2 >> 2];
        HEAP32[$2 + 32 >> 2] = 0 - $3;
        HEAP32[$2 + 36 >> 2] = 0 - ((($3 | 0) != 0) + $1 | 0);
        $1 = HEAP32[$2 + 76 >> 2];
        HEAP32[$2 >> 2] = HEAP32[$2 + 72 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$2 + 60 >> 2];
        HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 56 >> 2];
        HEAP32[$2 + 76 >> 2] = $1;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = HEAP32[$2 >> 2];
        HEAP32[$2 + 56 >> 2] = 0 - $3;
        HEAP32[$2 + 60 >> 2] = 0 - ((($3 | 0) != 0) + $1 | 0);
        $1 = HEAP32[$2 + 68 >> 2];
        HEAP32[$2 >> 2] = HEAP32[$2 + 64 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$2 + 52 >> 2];
        HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 48 >> 2];
        HEAP32[$2 + 68 >> 2] = $1;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = HEAP32[$2 >> 2];
        HEAP32[$2 + 48 >> 2] = 0 - $3;
        HEAP32[$2 + 52 >> 2] = 0 - ((($3 | 0) != 0) + $1 | 0);
        $1 = HEAP32[$2 + 16 >> 2];
        $3 = HEAP32[$2 + 104 >> 2] + 1 | 0;
        HEAP32[$2 + 12 >> 2] = ($1 | 0) < ($3 | 0) ? $1 : $3;
        $2 = 64 - HEAP32[$2 + 12 >> 2] | 0;
        $1 = $2 & 31;
        if (($2 & 63) >>> 0 >= 32) {
         $1 = -1 >>> $1 | 0
        } else {
         $1 = (1 << $1) - 1 << 32 - $1 | -1 >>> $1
        }
        HEAP32[$0 + 24 >> 2] = $1 & 63;
        HEAP32[$0 + 28 >> 2] = 0;
        $2 = __wasm_i64_mul(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]);
        $3 = i64toi32_i32$HIGH_BITS;
        $1 = __wasm_i64_mul(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2]);
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = __wasm_i64_mul($2, $3, $1 - 2 | 0, i64toi32_i32$HIGH_BITS - ($1 >>> 0 < 2) | 0) & HEAP32[$0 + 24 >> 2]), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
        break label$5;
       }
       $1 = HEAP32[$2 + 16 >> 2];
       $3 = HEAP32[$2 + 104 >> 2] + 1 | 0;
       HEAP32[$2 + 12 >> 2] = ($1 | 0) < ($3 | 0) ? $1 : $3;
       $2 = 64 - HEAP32[$2 + 12 >> 2] | 0;
       $1 = $2 & 31;
       if (($2 & 63) >>> 0 >= 32) {
        $1 = -1 >>> $1 | 0
       } else {
        $1 = (1 << $1) - 1 << 32 - $1 | -1 >>> $1
       }
       HEAP32[$0 + 24 >> 2] = $1 & 15;
       HEAP32[$0 + 28 >> 2] = 0;
       $1 = HEAP32[$0 + 40 >> 2];
       HEAP32[$0 + 20 >> 2] = (($1 + 1 & 4) << 1) + $1;
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = __wasm_i64_mul(0 - HEAP32[$0 + 20 >> 2] | 0, 0, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]) & HEAP32[$0 + 24 >> 2]), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
      }
      $1 = __wasm_i64_mul(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 20 >> 2], 0);
      $2 = i64toi32_i32$HIGH_BITS + HEAP32[$0 + 36 >> 2] | 0;
      $3 = HEAP32[$0 + 32 >> 2] + $1 | 0;
      HEAP32[$0 + 32 >> 2] = $3;
      HEAP32[$0 + 36 >> 2] = $1 >>> 0 > $3 >>> 0 ? $2 + 1 | 0 : $2;
      $1 = __wasm_i64_mul(HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2], HEAP32[$0 + 20 >> 2], 0);
      $2 = i64toi32_i32$HIGH_BITS + HEAP32[$0 + 60 >> 2] | 0;
      $3 = HEAP32[$0 + 56 >> 2] + $1 | 0;
      HEAP32[$0 + 56 >> 2] = $3;
      HEAP32[$0 + 60 >> 2] = $1 >>> 0 > $3 >>> 0 ? $2 + 1 | 0 : $2;
      $1 = __wasm_i64_mul(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 20 >> 2], 0);
      $2 = i64toi32_i32$HIGH_BITS + HEAP32[$0 + 52 >> 2] | 0;
      $3 = HEAP32[$0 + 48 >> 2] + $1 | 0;
      HEAP32[$0 + 48 >> 2] = $3;
      HEAP32[$0 + 52 >> 2] = $1 >>> 0 > $3 >>> 0 ? $2 + 1 | 0 : $2;
      continue;
     }
     break;
    };
    $0 = HEAP32[$2 + 76 >> 2];
    $1 = HEAP32[$2 + 84 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$2 + 72 >> 2];
    HEAP32[$1 + 4 >> 2] = $0;
    $0 = HEAP32[$2 + 68 >> 2];
    $1 = HEAP32[$2 + 84 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 64 >> 2];
    HEAP32[$1 + 12 >> 2] = $0;
    $0 = HEAP32[$2 + 60 >> 2];
    $1 = HEAP32[$2 + 84 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$2 + 56 >> 2];
    HEAP32[$1 + 20 >> 2] = $0;
    $0 = HEAP32[$2 + 52 >> 2];
    $1 = HEAP32[$2 + 84 >> 2];
    HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 48 >> 2];
    HEAP32[$1 + 28 >> 2] = $0;
    __stack_pointer = $2 + 112 | 0;
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 108 >> 2];
    HEAP32[$4 + 56 >> 2] = HEAP32[$2 + 104 >> 2];
    HEAP32[$4 + 60 >> 2] = i64toi32_i32$HIGH_BITS;
    rustsecp256k1_v0_8_1_modinv64_update_de_62($4 + 192 | 0, $4 + 152 | 0, $4, HEAP32[$4 + 232 >> 2]);
    $0 = __stack_pointer - 128 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 124 >> 2] = HEAP32[$4 + 64 >> 2];
    HEAP32[$0 + 120 >> 2] = $4 + 112;
    HEAP32[$0 + 116 >> 2] = $4 + 72;
    HEAP32[$0 + 112 >> 2] = $4;
    HEAP32[$0 + 104 >> 2] = -1;
    HEAP32[$0 + 108 >> 2] = 1073741823;
    $1 = HEAP32[$0 + 112 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 96 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 100 >> 2] = $2;
    $1 = HEAP32[$0 + 112 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 88 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 92 >> 2] = $2;
    $1 = HEAP32[$0 + 112 >> 2];
    $2 = HEAP32[$1 + 20 >> 2];
    HEAP32[$0 + 80 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$0 + 84 >> 2] = $2;
    $1 = HEAP32[$0 + 112 >> 2];
    $2 = HEAP32[$1 + 28 >> 2];
    HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$0 + 76 >> 2] = $2;
    $1 = HEAP32[$0 + 120 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 64 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 68 >> 2] = $2;
    $1 = HEAP32[$0 + 116 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 60 >> 2] = $2;
    $1 = $0 + 32 | 0;
    rustsecp256k1_v0_8_1_i128_mul($1, HEAP32[$0 + 96 >> 2], HEAP32[$0 + 100 >> 2], HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
    $2 = $0 + 16 | 0;
    rustsecp256k1_v0_8_1_i128_mul($2, HEAP32[$0 + 80 >> 2], HEAP32[$0 + 84 >> 2], HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($2, HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
    $3 = __stack_pointer - 16 | 0;
    HEAP32[$3 + 12 >> 2] = $1;
    i64toi32_i32$HIGH_BITS = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
    rustsecp256k1_v0_8_1_i128_rshift($1);
    $1 = __stack_pointer - 16 | 0;
    HEAP32[$1 + 12 >> 2] = $2;
    i64toi32_i32$HIGH_BITS = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
    rustsecp256k1_v0_8_1_i128_rshift($2);
    HEAP32[$0 + 12 >> 2] = 1;
    while (1) {
     if (HEAP32[$0 + 12 >> 2] < HEAP32[$0 + 124 >> 2]) {
      $1 = HEAP32[$0 + 120 >> 2] + (HEAP32[$0 + 12 >> 2] << 3) | 0;
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP32[$0 + 64 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$0 + 68 >> 2] = $2;
      $1 = HEAP32[$0 + 116 >> 2] + (HEAP32[$0 + 12 >> 2] << 3) | 0;
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$0 + 60 >> 2] = $2;
      $1 = $0 + 32 | 0;
      rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 96 >> 2], HEAP32[$0 + 100 >> 2], HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
      rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
      $2 = $0 + 16 | 0;
      rustsecp256k1_v0_8_1_i128_accum_mul($2, HEAP32[$0 + 80 >> 2], HEAP32[$0 + 84 >> 2], HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
      rustsecp256k1_v0_8_1_i128_accum_mul($2, HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
      $3 = __stack_pointer - 16 | 0;
      HEAP32[$3 + 12 >> 2] = $1;
      $3 = HEAP32[$3 + 12 >> 2];
      i64toi32_i32$HIGH_BITS = HEAP32[$3 + 4 >> 2];
      $5 = HEAP32[$0 + 120 >> 2] + (HEAP32[$0 + 12 >> 2] - 1 << 3) | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
      rustsecp256k1_v0_8_1_i128_rshift($1);
      $1 = __stack_pointer - 16 | 0;
      HEAP32[$1 + 12 >> 2] = $2;
      $1 = HEAP32[$1 + 12 >> 2];
      i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
      $3 = HEAP32[$0 + 116 >> 2] + (HEAP32[$0 + 12 >> 2] - 1 << 3) | 0;
      HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
      rustsecp256k1_v0_8_1_i128_rshift($2);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
      continue;
     }
     break;
    };
    $3 = __stack_pointer - 16 | 0;
    $1 = $3;
    HEAP32[$1 + 12 >> 2] = $0 + 32;
    $1 = HEAP32[$1 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 120 >> 2] + (HEAP32[$0 + 124 >> 2] - 1 << 3) | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
    $1 = $3;
    HEAP32[$1 + 12 >> 2] = $0 + 16;
    $1 = HEAP32[$1 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 116 >> 2] + (HEAP32[$0 + 124 >> 2] - 1 << 3) | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
    __stack_pointer = $0 + 128 | 0;
    if (!(HEAP32[$4 + 72 >> 2] | HEAP32[$4 + 76 >> 2])) {
     HEAP32[$4 + 48 >> 2] = 0;
     HEAP32[$4 + 52 >> 2] = 0;
     HEAP32[$4 + 68 >> 2] = 1;
     while (1) {
      if (HEAP32[$4 + 68 >> 2] < HEAP32[$4 + 64 >> 2]) {
       $0 = ($4 + 72 | 0) + (HEAP32[$4 + 68 >> 2] << 3) | 0;
       $1 = HEAP32[$0 + 4 >> 2] | HEAP32[$4 + 52 >> 2];
       HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] | HEAP32[$0 >> 2];
       HEAP32[$4 + 52 >> 2] = $1;
       HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 1;
       continue;
      }
      break;
     };
     if (!(HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 52 >> 2])) {
      break label$1
     }
    }
    $0 = ((HEAP32[$4 + 64 >> 2] << 3) + $4 | 0) + 104 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    HEAP32[$4 + 40 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$4 + 44 >> 2] = $1;
    $0 = ((HEAP32[$4 + 64 >> 2] << 3) + $4 | 0) - -64 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    HEAP32[$4 + 32 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$4 + 36 >> 2] = $1;
    $0 = HEAP32[$4 + 64 >> 2];
    $0 = ($0 >> 31) - ($0 >>> 0 < 2) >> 31;
    HEAP32[$4 + 48 >> 2] = $0;
    HEAP32[$4 + 52 >> 2] = $0;
    $1 = HEAP32[$4 + 44 >> 2];
    $0 = $1 >> 31;
    $1 = HEAP32[$4 + 52 >> 2] | $0 ^ $1;
    HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] | $0 ^ HEAP32[$4 + 40 >> 2];
    HEAP32[$4 + 52 >> 2] = $1;
    $1 = HEAP32[$4 + 36 >> 2];
    $0 = $1 >> 31;
    $1 = HEAP32[$4 + 52 >> 2] | $0 ^ $1;
    HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] | $0 ^ HEAP32[$4 + 32 >> 2];
    HEAP32[$4 + 52 >> 2] = $1;
    if (!(HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 52 >> 2])) {
     $0 = ((HEAP32[$4 + 64 >> 2] << 3) + $4 | 0) + 96 | 0;
     $1 = HEAP32[$0 + 4 >> 2] | HEAP32[$4 + 40 >> 2] << 30;
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     $0 = ((HEAP32[$4 + 64 >> 2] << 3) + $4 | 0) + 56 | 0;
     $1 = HEAP32[$0 + 4 >> 2] | HEAP32[$4 + 32 >> 2] << 30;
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] - 1;
    }
    continue;
   }
   break;
  };
  $0 = $4 + 192 | 0;
  $1 = ((HEAP32[$4 + 64 >> 2] << 3) + $4 | 0) + 104 | 0;
  rustsecp256k1_v0_8_1_modinv64_normalize_62($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$4 + 232 >> 2]);
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$4 + 236 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  __stack_pointer = $4 + 240 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_from_signed62($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 48 | 0;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
  $4 = HEAP32[$2 + 36 >> 2];
  $0 = HEAP32[$2 + 24 >> 2] << 30;
  $3 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$3 + 4 >> 2] = $0 | $4;
  $1 = HEAP32[$2 + 28 >> 2];
  $0 = $1 >>> 2 | 0;
  $1 = ($1 & 3) << 30 | HEAP32[$2 + 24 >> 2] >>> 2;
  $4 = $0;
  $0 = HEAP32[$2 + 16 >> 2] << 28;
  $3 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $0 | $4;
  $1 = HEAP32[$2 + 20 >> 2];
  $0 = $1 >>> 4 | 0;
  $1 = ($1 & 15) << 28 | HEAP32[$2 + 16 >> 2] >>> 4;
  $4 = $0;
  $0 = HEAP32[$2 + 8 >> 2] << 26;
  $3 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $0 | $4;
  $1 = HEAP32[$2 + 12 >> 2];
  $0 = $1 >>> 6 | 0;
  $1 = ($1 & 63) << 26 | HEAP32[$2 + 8 >> 2] >>> 6;
  $4 = $0;
  $0 = HEAP32[$2 >> 2] << 24;
  $2 = HEAP32[$2 + 44 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0 | $4;
 }
 
 function rustsecp256k1_v0_8_1_scalar_mul_512($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 560 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 556 >> 2] = $0;
  HEAP32[$3 + 552 >> 2] = $1;
  HEAP32[$3 + 548 >> 2] = $2;
  HEAP32[$3 + 536 >> 2] = 0;
  HEAP32[$3 + 540 >> 2] = 0;
  HEAP32[$3 + 528 >> 2] = 0;
  HEAP32[$3 + 532 >> 2] = 0;
  HEAP32[$3 + 524 >> 2] = 0;
  $0 = $3 + 480 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $2 = __stack_pointer - 16 | 0;
  $1 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 504 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 508 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 512 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 516 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 516 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 512 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 516 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 512 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 504 >> 2] | 0;
  $2 = HEAP32[$3 + 508 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 504 >> 2] = $1;
  HEAP32[$3 + 508 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 508 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 504 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 4 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = 0;
  HEAP32[$3 + 532 >> 2] = 0;
  $0 = $3 + 448 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 464 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 468 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 472 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 476 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 476 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 472 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 476 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 472 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 464 >> 2] | 0;
  $2 = HEAP32[$3 + 468 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 464 >> 2] = $1;
  HEAP32[$3 + 468 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 468 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 464 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 468 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 464 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 416 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $4 = HEAP32[$1 + 12 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 432 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 436 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 440 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 444 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 444 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 440 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 444 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 440 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 432 >> 2] | 0;
  $2 = HEAP32[$3 + 436 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 432 >> 2] = $1;
  HEAP32[$3 + 436 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 436 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 432 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 436 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 432 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = HEAP32[$3 + 524 >> 2];
  HEAP32[$3 + 532 >> 2] = 0;
  HEAP32[$3 + 524 >> 2] = 0;
  $0 = $3 + 384 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 400 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 404 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 408 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 412 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 412 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 408 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 412 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 408 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 400 >> 2] | 0;
  $2 = HEAP32[$3 + 404 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 400 >> 2] = $1;
  HEAP32[$3 + 404 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 404 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 400 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 404 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 400 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 352 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $4 = HEAP32[$1 + 12 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 368 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 372 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 376 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 380 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 380 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 376 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 380 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 376 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 368 >> 2] | 0;
  $2 = HEAP32[$3 + 372 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 368 >> 2] = $1;
  HEAP32[$3 + 372 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 372 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 368 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 372 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 368 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 320 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $4 = HEAP32[$1 + 20 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 336 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 340 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 344 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 348 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 348 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 344 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 348 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 344 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 336 >> 2] | 0;
  $2 = HEAP32[$3 + 340 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 336 >> 2] = $1;
  HEAP32[$3 + 340 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 340 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 336 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 340 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 336 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = HEAP32[$3 + 524 >> 2];
  HEAP32[$3 + 532 >> 2] = 0;
  HEAP32[$3 + 524 >> 2] = 0;
  $0 = $3 + 288 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 304 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 308 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 312 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 316 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 316 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 312 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 316 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 312 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 304 >> 2] | 0;
  $2 = HEAP32[$3 + 308 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 304 >> 2] = $1;
  HEAP32[$3 + 308 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 308 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 304 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 308 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 304 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 256 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $4 = HEAP32[$1 + 12 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 272 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 276 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 280 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 284 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 284 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 280 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 284 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 280 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 272 >> 2] | 0;
  $2 = HEAP32[$3 + 276 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 272 >> 2] = $1;
  HEAP32[$3 + 276 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 276 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 272 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 276 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 272 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 224 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $4 = HEAP32[$1 + 20 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 240 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 244 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 248 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 252 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 252 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 248 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 252 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 248 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 240 >> 2] | 0;
  $2 = HEAP32[$3 + 244 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 240 >> 2] = $1;
  HEAP32[$3 + 244 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 244 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 240 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 244 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 240 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 192 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  $4 = HEAP32[$1 + 28 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 208 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 212 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 216 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 220 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 220 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 216 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 220 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 216 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 208 >> 2] | 0;
  $2 = HEAP32[$3 + 212 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 208 >> 2] = $1;
  HEAP32[$3 + 212 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 212 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 208 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 212 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 208 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = HEAP32[$3 + 524 >> 2];
  HEAP32[$3 + 532 >> 2] = 0;
  HEAP32[$3 + 524 >> 2] = 0;
  $0 = $3 + 160 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $4 = HEAP32[$1 + 12 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 176 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 180 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 184 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 188 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 188 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 184 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 188 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 184 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 176 >> 2] | 0;
  $2 = HEAP32[$3 + 180 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 176 >> 2] = $1;
  HEAP32[$3 + 180 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 180 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 176 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 180 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 176 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 128 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $4 = HEAP32[$1 + 20 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 144 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 148 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 152 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 156 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 156 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 152 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 156 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 152 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 144 >> 2] | 0;
  $2 = HEAP32[$3 + 148 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 144 >> 2] = $1;
  HEAP32[$3 + 148 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 144 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 148 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 144 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 96 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  $4 = HEAP32[$1 + 28 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 112 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 116 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 120 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 124 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 124 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 120 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 124 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 120 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 112 >> 2] | 0;
  $2 = HEAP32[$3 + 116 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 112 >> 2] = $1;
  HEAP32[$3 + 116 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 116 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 112 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 116 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 112 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 36 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = HEAP32[$3 + 524 >> 2];
  HEAP32[$3 + 532 >> 2] = 0;
  HEAP32[$3 + 524 >> 2] = 0;
  $0 = $3 - -64 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $4 = HEAP32[$1 + 20 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 80 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 84 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 88 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 92 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 88 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 92 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 88 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 80 >> 2] | 0;
  $2 = HEAP32[$3 + 84 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 80 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 84 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 80 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 84 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 80 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = $3 + 32 | 0;
  $1 = HEAP32[$3 + 552 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  $4 = HEAP32[$1 + 28 >> 2];
  $1 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($0, $2, $4, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 52 >> 2] = i64toi32_i32$HIGH_BITS;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 56 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 60 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 56 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 60 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 56 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 48 >> 2] | 0;
  $2 = HEAP32[$3 + 52 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 48 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 52 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 48 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 532 >> 2];
  $1 = HEAP32[$3 + 52 >> 2];
  HEAP32[$3 + 524 >> 2] = HEAP32[$3 + 524 >> 2] + (($0 | 0) == ($1 | 0) & HEAPU32[$3 + 528 >> 2] < HEAPU32[$3 + 48 >> 2] | $0 >>> 0 < $1 >>> 0);
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 44 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = HEAP32[$3 + 524 >> 2];
  HEAP32[$3 + 532 >> 2] = 0;
  HEAP32[$3 + 524 >> 2] = 0;
  $0 = HEAP32[$3 + 552 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 28 >> 2];
  $0 = HEAP32[$3 + 548 >> 2];
  rustsecp256k1_v0_8_1_u128_mul($3, $1, $2, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 12 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$3 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 540 >> 2] | 0;
  $1 = HEAP32[$3 + 24 >> 2];
  $2 = $1 + HEAP32[$3 + 536 >> 2] | 0;
  HEAP32[$3 + 536 >> 2] = $2;
  HEAP32[$3 + 540 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  $0 = ($0 | 0) == ($1 | 0) & HEAPU32[$3 + 536 >> 2] < HEAPU32[$3 + 24 >> 2] | $0 >>> 0 < $1 >>> 0;
  $1 = $0 + HEAP32[$3 + 16 >> 2] | 0;
  $2 = HEAP32[$3 + 20 >> 2] + ($0 >>> 31 | 0) | 0;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $0 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
  $0 = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 532 >> 2] | 0;
  $1 = HEAP32[$3 + 16 >> 2];
  $2 = $1 + HEAP32[$3 + 528 >> 2] | 0;
  HEAP32[$3 + 528 >> 2] = $2;
  HEAP32[$3 + 532 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 52 >> 2] = $0;
  $0 = HEAP32[$3 + 532 >> 2];
  HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 528 >> 2];
  HEAP32[$3 + 540 >> 2] = $0;
  HEAP32[$3 + 528 >> 2] = 0;
  HEAP32[$3 + 532 >> 2] = 0;
  $0 = HEAP32[$3 + 540 >> 2];
  $1 = HEAP32[$3 + 556 >> 2];
  HEAP32[$1 + 56 >> 2] = HEAP32[$3 + 536 >> 2];
  HEAP32[$1 + 60 >> 2] = $0;
  __stack_pointer = $3 + 560 | 0;
 }
 
 function rustsecp256k1_v0_8_1_modinv64_update_de_62($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 204 >> 2] = $0;
  HEAP32[$4 + 200 >> 2] = $1;
  HEAP32[$4 + 196 >> 2] = $2;
  HEAP32[$4 + 192 >> 2] = $3;
  HEAP32[$4 + 184 >> 2] = -1;
  HEAP32[$4 + 188 >> 2] = 1073741823;
  $0 = HEAP32[$4 + 204 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 + 176 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$4 + 180 >> 2] = $1;
  $0 = HEAP32[$4 + 204 >> 2];
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$4 + 168 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$4 + 172 >> 2] = $1;
  $0 = HEAP32[$4 + 204 >> 2];
  $1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$4 + 160 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$4 + 164 >> 2] = $1;
  $0 = HEAP32[$4 + 204 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$4 + 152 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$4 + 156 >> 2] = $1;
  $0 = HEAP32[$4 + 204 >> 2];
  $1 = HEAP32[$0 + 36 >> 2];
  HEAP32[$4 + 144 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$4 + 148 >> 2] = $1;
  $0 = HEAP32[$4 + 200 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 + 136 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$4 + 140 >> 2] = $1;
  $0 = HEAP32[$4 + 200 >> 2];
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$4 + 128 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$4 + 132 >> 2] = $1;
  $0 = HEAP32[$4 + 200 >> 2];
  $1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$4 + 120 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$4 + 124 >> 2] = $1;
  $0 = HEAP32[$4 + 200 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$4 + 112 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$4 + 116 >> 2] = $1;
  $0 = HEAP32[$4 + 200 >> 2];
  $1 = HEAP32[$0 + 36 >> 2];
  HEAP32[$4 + 104 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$4 + 108 >> 2] = $1;
  $0 = HEAP32[$4 + 196 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 + 96 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$4 + 100 >> 2] = $1;
  $0 = HEAP32[$4 + 196 >> 2];
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$4 + 88 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$4 + 92 >> 2] = $1;
  $0 = HEAP32[$4 + 196 >> 2];
  $1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$4 + 80 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$4 + 84 >> 2] = $1;
  $0 = HEAP32[$4 + 196 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$4 + 72 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$4 + 76 >> 2] = $1;
  $0 = HEAP32[$4 + 148 >> 2] >> 31;
  HEAP32[$4 + 48 >> 2] = $0;
  HEAP32[$4 + 52 >> 2] = $0;
  $0 = HEAP32[$4 + 108 >> 2] >> 31;
  HEAP32[$4 + 40 >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = $0;
  $0 = (HEAP32[$4 + 100 >> 2] & HEAP32[$4 + 52 >> 2]) + (HEAP32[$4 + 92 >> 2] & HEAP32[$4 + 44 >> 2]) | 0;
  $1 = HEAP32[$4 + 88 >> 2] & HEAP32[$4 + 40 >> 2];
  $2 = $1 + (HEAP32[$4 + 96 >> 2] & HEAP32[$4 + 48 >> 2]) | 0;
  HEAP32[$4 + 64 >> 2] = $2;
  HEAP32[$4 + 68 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = (HEAP32[$4 + 84 >> 2] & HEAP32[$4 + 52 >> 2]) + (HEAP32[$4 + 76 >> 2] & HEAP32[$4 + 44 >> 2]) | 0;
  $1 = HEAP32[$4 + 72 >> 2] & HEAP32[$4 + 40 >> 2];
  $2 = $1 + (HEAP32[$4 + 80 >> 2] & HEAP32[$4 + 48 >> 2]) | 0;
  HEAP32[$4 + 56 >> 2] = $2;
  HEAP32[$4 + 60 >> 2] = $1 >>> 0 > $2 >>> 0 ? $0 + 1 | 0 : $0;
  $5 = $4 + 16 | 0;
  $0 = $5;
  rustsecp256k1_v0_8_1_i128_mul($0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 176 >> 2], HEAP32[$4 + 180 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 140 >> 2]);
  rustsecp256k1_v0_8_1_i128_mul($4, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 176 >> 2], HEAP32[$4 + 180 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 76 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 140 >> 2]);
  $1 = HEAP32[$4 + 192 >> 2];
  $2 = HEAP32[$1 + 40 >> 2];
  $1 = HEAP32[$1 + 44 >> 2];
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  $0 = HEAP32[$3 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $0 = __wasm_i64_mul($2, $1, HEAP32[$0 >> 2], i64toi32_i32$HIGH_BITS);
  $1 = HEAP32[$4 + 64 >> 2];
  $0 = $0 + $1 | 0;
  $3 = HEAP32[$4 + 68 >> 2];
  $2 = $3 + i64toi32_i32$HIGH_BITS | 0;
  HEAP32[$4 + 64 >> 2] = $1 - $0;
  HEAP32[$4 + 68 >> 2] = $3 - ((($0 >>> 0 < $1 >>> 0 ? $2 + 1 | 0 : $2) & 1073741823) + ($0 >>> 0 > $1 >>> 0) | 0);
  $0 = HEAP32[$4 + 192 >> 2];
  $1 = HEAP32[$0 + 40 >> 2];
  $0 = HEAP32[$0 + 44 >> 2];
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $4;
  $2 = HEAP32[$2 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $0 = __wasm_i64_mul($1, $0, HEAP32[$2 >> 2], i64toi32_i32$HIGH_BITS);
  $1 = HEAP32[$4 + 56 >> 2];
  $0 = $0 + $1 | 0;
  $3 = HEAP32[$4 + 60 >> 2];
  $2 = $3 + i64toi32_i32$HIGH_BITS | 0;
  HEAP32[$4 + 56 >> 2] = $1 - $0;
  HEAP32[$4 + 60 >> 2] = $3 - ((($0 >>> 0 < $1 >>> 0 ? $2 + 1 | 0 : $2) & 1073741823) + ($0 >>> 0 > $1 >>> 0) | 0);
  $0 = $5;
  $1 = HEAP32[$4 + 192 >> 2];
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$4 + 64 >> 2], HEAP32[$4 + 68 >> 2]);
  $1 = HEAP32[$4 + 192 >> 2];
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  i64toi32_i32$HIGH_BITS = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
  rustsecp256k1_v0_8_1_i128_rshift($0);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $4;
  i64toi32_i32$HIGH_BITS = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
  rustsecp256k1_v0_8_1_i128_rshift($4);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 168 >> 2], HEAP32[$4 + 172 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], HEAP32[$4 + 128 >> 2], HEAP32[$4 + 132 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 168 >> 2], HEAP32[$4 + 172 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 76 >> 2], HEAP32[$4 + 128 >> 2], HEAP32[$4 + 132 >> 2]);
  $0 = HEAP32[$4 + 192 >> 2];
  if (HEAP32[$0 + 8 >> 2] | HEAP32[$0 + 12 >> 2]) {
   $0 = HEAP32[$4 + 192 >> 2];
   rustsecp256k1_v0_8_1_i128_accum_mul($4 + 16 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$4 + 64 >> 2], HEAP32[$4 + 68 >> 2]);
   $0 = HEAP32[$4 + 192 >> 2];
   rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2]);
  }
  $1 = __stack_pointer - 16 | 0;
  $0 = $4 + 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 204 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($0);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $4;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 200 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($4);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 160 >> 2], HEAP32[$4 + 164 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], HEAP32[$4 + 120 >> 2], HEAP32[$4 + 124 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 160 >> 2], HEAP32[$4 + 164 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 76 >> 2], HEAP32[$4 + 120 >> 2], HEAP32[$4 + 124 >> 2]);
  $0 = HEAP32[$4 + 192 >> 2];
  if (HEAP32[$0 + 16 >> 2] | HEAP32[$0 + 20 >> 2]) {
   $0 = HEAP32[$4 + 192 >> 2];
   rustsecp256k1_v0_8_1_i128_accum_mul($4 + 16 | 0, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$4 + 64 >> 2], HEAP32[$4 + 68 >> 2]);
   $0 = HEAP32[$4 + 192 >> 2];
   rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2]);
  }
  $1 = __stack_pointer - 16 | 0;
  $0 = $4 + 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 204 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($0);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $4;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 200 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($4);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 152 >> 2], HEAP32[$4 + 156 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], HEAP32[$4 + 112 >> 2], HEAP32[$4 + 116 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 152 >> 2], HEAP32[$4 + 156 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 76 >> 2], HEAP32[$4 + 112 >> 2], HEAP32[$4 + 116 >> 2]);
  $0 = HEAP32[$4 + 192 >> 2];
  if (HEAP32[$0 + 24 >> 2] | HEAP32[$0 + 28 >> 2]) {
   $0 = HEAP32[$4 + 192 >> 2];
   rustsecp256k1_v0_8_1_i128_accum_mul($4 + 16 | 0, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$4 + 64 >> 2], HEAP32[$4 + 68 >> 2]);
   $0 = HEAP32[$4 + 192 >> 2];
   rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2]);
  }
  $1 = __stack_pointer - 16 | 0;
  $3 = $4 + 16 | 0;
  $0 = $3;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 204 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($0);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $4;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 200 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($4);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 144 >> 2], HEAP32[$4 + 148 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], HEAP32[$4 + 104 >> 2], HEAP32[$4 + 108 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 144 >> 2], HEAP32[$4 + 148 >> 2]);
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 76 >> 2], HEAP32[$4 + 104 >> 2], HEAP32[$4 + 108 >> 2]);
  $1 = HEAP32[$4 + 192 >> 2];
  rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$1 + 32 >> 2], HEAP32[$1 + 36 >> 2], HEAP32[$4 + 64 >> 2], HEAP32[$4 + 68 >> 2]);
  $1 = HEAP32[$4 + 192 >> 2];
  rustsecp256k1_v0_8_1_i128_accum_mul($4, HEAP32[$1 + 32 >> 2], HEAP32[$1 + 36 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2]);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$4 + 204 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($0);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $4;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$4 + 200 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
  rustsecp256k1_v0_8_1_i128_rshift($4);
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$4 + 204 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = $4;
  $0 = HEAP32[$0 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$4 + 200 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
  __stack_pointer = $4 + 208 | 0;
 }
 
 function rustsecp256k1_v0_8_1_modinv64_normalize_62($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  HEAP32[$4 + 92 >> 2] = $0;
  HEAP32[$4 + 80 >> 2] = $1;
  HEAP32[$4 + 84 >> 2] = $2;
  HEAP32[$4 + 76 >> 2] = $3;
  HEAP32[$4 + 64 >> 2] = -1;
  HEAP32[$4 + 68 >> 2] = 1073741823;
  $0 = HEAP32[$4 + 92 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 60 >> 2] = $0;
  $0 = HEAP32[$4 + 92 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $0;
  $0 = HEAP32[$4 + 92 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $0;
  $0 = HEAP32[$4 + 92 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$4 + 32 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $0;
  $0 = HEAP32[$4 + 92 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0;
  $0 = HEAP32[$4 + 28 >> 2] >> 31;
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 56 >> 2] | 0;
  $0 = HEAP32[$4 + 60 >> 2] + (HEAP32[$0 + 4 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 60 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 8 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 48 >> 2] | 0;
  $0 = HEAP32[$4 + 52 >> 2] + (HEAP32[$0 + 12 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 16 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 40 >> 2] | 0;
  $0 = HEAP32[$4 + 44 >> 2] + (HEAP32[$0 + 20 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 24 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 32 >> 2] | 0;
  $0 = HEAP32[$4 + 36 >> 2] + (HEAP32[$0 + 28 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 32 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 32 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 24 >> 2] | 0;
  $0 = HEAP32[$4 + 28 >> 2] + (HEAP32[$0 + 36 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 84 >> 2] >> 31;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = $0;
  $1 = HEAP32[$4 + 12 >> 2];
  $2 = $1 ^ HEAP32[$4 + 60 >> 2];
  $0 = HEAP32[$4 + 8 >> 2];
  $3 = $0 ^ HEAP32[$4 + 56 >> 2];
  HEAP32[$4 + 56 >> 2] = $3 - $0;
  HEAP32[$4 + 60 >> 2] = $2 - (($0 >>> 0 > $3 >>> 0) + $1 | 0);
  $0 = HEAP32[$4 + 52 >> 2] ^ HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 48 >> 2] ^ HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 48 >> 2] = $2 - $3;
  HEAP32[$4 + 52 >> 2] = $0 - (($2 >>> 0 < $3 >>> 0) + $1 | 0);
  $0 = HEAP32[$4 + 44 >> 2] ^ HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 40 >> 2] ^ HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 40 >> 2] = $2 - $3;
  HEAP32[$4 + 44 >> 2] = $0 - (($2 >>> 0 < $3 >>> 0) + $1 | 0);
  $0 = HEAP32[$4 + 36 >> 2] ^ HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 32 >> 2] ^ HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 32 >> 2] = $2 - $3;
  HEAP32[$4 + 36 >> 2] = $0 - (($2 >>> 0 < $3 >>> 0) + $1 | 0);
  $0 = HEAP32[$4 + 28 >> 2] ^ HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 24 >> 2] ^ HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 24 >> 2] = $2 - $3;
  HEAP32[$4 + 28 >> 2] = $0 - (($2 >>> 0 < $3 >>> 0) + $1 | 0);
  $1 = HEAP32[$4 + 60 >> 2];
  $0 = HEAP32[$4 + 52 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 48 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $0;
  $0 = HEAP32[$4 + 60 >> 2];
  HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 56 >> 2];
  HEAP32[$4 + 60 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$4 + 52 >> 2];
  $0 = HEAP32[$4 + 44 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 40 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $0;
  $0 = HEAP32[$4 + 52 >> 2];
  HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2];
  HEAP32[$4 + 52 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$4 + 44 >> 2];
  $0 = HEAP32[$4 + 36 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 32 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 32 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $0;
  $0 = HEAP32[$4 + 44 >> 2];
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$4 + 44 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$4 + 36 >> 2];
  $0 = HEAP32[$4 + 28 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 24 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0;
  $0 = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 36 >> 2] = $0 & 1073741823;
  $0 = HEAP32[$4 + 28 >> 2] >> 31;
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 56 >> 2] | 0;
  $0 = HEAP32[$4 + 60 >> 2] + (HEAP32[$0 + 4 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 60 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 8 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 48 >> 2] | 0;
  $0 = HEAP32[$4 + 52 >> 2] + (HEAP32[$0 + 12 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 16 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 40 >> 2] | 0;
  $0 = HEAP32[$4 + 44 >> 2] + (HEAP32[$0 + 20 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 24 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 32 >> 2] | 0;
  $0 = HEAP32[$4 + 36 >> 2] + (HEAP32[$0 + 28 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 32 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = HEAP32[$4 + 76 >> 2];
  $2 = HEAP32[$0 + 32 >> 2] & HEAP32[$4 + 16 >> 2];
  $1 = $2 + HEAP32[$4 + 24 >> 2] | 0;
  $0 = HEAP32[$4 + 28 >> 2] + (HEAP32[$0 + 36 >> 2] & HEAP32[$4 + 20 >> 2]) | 0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  $1 = HEAP32[$4 + 60 >> 2];
  $0 = HEAP32[$4 + 52 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 48 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $0;
  $0 = HEAP32[$4 + 60 >> 2];
  HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 56 >> 2];
  HEAP32[$4 + 60 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$4 + 52 >> 2];
  $0 = HEAP32[$4 + 44 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 40 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $0;
  $0 = HEAP32[$4 + 52 >> 2];
  HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2];
  HEAP32[$4 + 52 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$4 + 44 >> 2];
  $0 = HEAP32[$4 + 36 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 32 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 32 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $0;
  $0 = HEAP32[$4 + 44 >> 2];
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$4 + 44 >> 2] = $0 & 1073741823;
  $1 = HEAP32[$4 + 36 >> 2];
  $0 = HEAP32[$4 + 28 >> 2] + ($1 >> 31) | 0;
  $1 = $1 >> 30;
  $2 = $1;
  $1 = HEAP32[$4 + 24 >> 2] + $1 | 0;
  $0 = $2 >>> 0 > $1 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0;
  $0 = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 36 >> 2] = $0 & 1073741823;
  $0 = HEAP32[$4 + 60 >> 2];
  $1 = HEAP32[$4 + 92 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$4 + 56 >> 2];
  HEAP32[$1 + 4 >> 2] = $0;
  $0 = HEAP32[$4 + 52 >> 2];
  $1 = HEAP32[$4 + 92 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$4 + 48 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$4 + 44 >> 2];
  $1 = HEAP32[$4 + 92 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$4 + 36 >> 2];
  $1 = HEAP32[$4 + 92 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$4 + 28 >> 2];
  $1 = HEAP32[$4 + 92 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$4 + 24 >> 2];
  HEAP32[$1 + 36 >> 2] = $0;
 }
 
 function rustsecp256k1_v0_8_1_i128_mul($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 32 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 24 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = $4;
  $3 = HEAP32[$5 + 36 >> 2];
  $0 = $3 >> 31;
  $1 = $0;
  $2 = HEAP32[$5 + 28 >> 2];
  $0 = $2 >> 31;
  __multi3($5 + 8 | 0, HEAP32[$5 + 32 >> 2], $3, $1, $1, HEAP32[$5 + 24 >> 2], $2, $0, $0);
  $0 = $5 + 16 | 0;
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$5 + 8 >> 2];
  $3 = HEAP32[$5 + 12 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$5 + 44 >> 2];
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
  __stack_pointer = $5 + 48 | 0;
 }
 
 function rustsecp256k1_v0_8_1_i128_accum_mul($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 60 >> 2] = $0;
  HEAP32[$5 + 48 >> 2] = $1;
  HEAP32[$5 + 52 >> 2] = $2;
  HEAP32[$5 + 40 >> 2] = $3;
  HEAP32[$5 + 44 >> 2] = $4;
  $6 = HEAP32[$5 + 52 >> 2];
  $3 = $6 >> 31;
  $1 = $3;
  $2 = HEAP32[$5 + 44 >> 2];
  $0 = $2 >> 31;
  __multi3($5, HEAP32[$5 + 48 >> 2], $6, $1, $1, HEAP32[$5 + 40 >> 2], $2, $0, $0);
  $0 = $5 + 8 | 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$5 >> 2];
  $1 = HEAP32[$5 + 4 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$5 + 24 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 16 >> 2] = $2;
  HEAP32[$5 + 20 >> 2] = $1;
  label$1 : {
   if (HEAP32[$5 + 28 >> 2] >= 0) {
    $1 = HEAP32[$5 + 60 >> 2] + 8 | 0;
    break label$1;
   }
   $1 = HEAP32[$5 + 16 >> 2];
   $0 = HEAP32[$5 + 20 >> 2];
   $0 = ($0 | $1) != 0;
   $4 = $0 + HEAP32[$5 + 24 >> 2] | 0;
   $3 = HEAP32[$5 + 28 >> 2];
   $3 = $0 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $1 = HEAP32[$5 + 60 >> 2] + 8 | 0;
  }
  $6 = HEAP32[$5 + 16 >> 2];
  $2 = HEAP32[$5 + 20 >> 2];
  $7 = HEAP32[$5 + 60 >> 2];
  $8 = $7 + 8 | 0;
  $0 = HEAP32[$8 >> 2];
  $4 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $1 = HEAP32[$5 + 24 >> 2];
  $3 = $0 + $1 | 0;
  $0 = HEAP32[$5 + 28 >> 2] + HEAP32[$8 + 4 >> 2] | 0;
  $0 = $1 >>> 0 > $3 >>> 0 ? $0 + 1 | 0 : $0;
  $1 = $2 + $9 | 0;
  $10 = $3;
  $2 = $4 + $6 | 0;
  $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $3 = ($1 | 0) == ($9 | 0) & $2 >>> 0 < $4 >>> 0 | $1 >>> 0 < $9 >>> 0;
  $4 = $10 + $3 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$8 >> 2] = $4;
  HEAP32[$8 + 4 >> 2] = $3 >>> 0 > $4 >>> 0 ? $0 + 1 | 0 : $0;
  __stack_pointer = $5 - -64 | 0;
 }
 
 function rustsecp256k1_v0_8_1_i128_rshift($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = 62;
  $6 = HEAP32[$5 + 28 >> 2];
  $11 = $6 + 8 | 0;
  $7 = $5 + 8 | 0;
  $8 = HEAP32[$6 >> 2];
  $0 = HEAP32[$6 + 4 >> 2];
  $4 = HEAP32[$11 >> 2];
  $3 = HEAP32[$11 + 4 >> 2];
  $1 = HEAP32[$5 + 24 >> 2];
  label$1 : {
   label$2 : {
    if (!($1 & 64)) {
     if (!$1) {
      break label$1
     }
     $12 = 0 - $1 & 63;
     $2 = $12 & 31;
     $9 = $1 & 63;
     $10 = $9 & 31;
     if ($12 >>> 0 >= 32) {
      $1 = $4 << $2;
      $2 = 0;
     } else {
      $1 = (1 << $2) - 1 & $4 >>> 32 - $2 | $3 << $2;
      $2 = $4 << $2;
     }
     $12 = $2;
     if ($9 >>> 0 >= 32) {
      $2 = 0;
      $0 = $0 >>> $10 | 0;
     } else {
      $2 = $0 >>> $10 | 0;
      $0 = ((1 << $10) - 1 & $0) << 32 - $10 | $8 >>> $10;
     }
     $8 = $12 | $0;
     $0 = $1 | $2;
     break label$2;
    }
    $1 = $1 & 63;
    $0 = $1 & 31;
    $9 = 63;
    if ($1 >>> 0 >= 32) {
     $8 = $3 >> $0;
     $0 = $3 >> 31;
    } else {
     $8 = ((1 << $0) - 1 & $3) << 32 - $0 | $4 >>> $0;
     $0 = $3 >> $0;
    }
   }
   $1 = $9 & 31;
   if ($9 >>> 0 >= 32) {
    $2 = $3 >> 31;
    $4 = $3 >> $1;
   } else {
    $2 = $3 >> $1;
    $4 = ((1 << $1) - 1 & $3) << 32 - $1 | $4 >>> $1;
   }
   $3 = $2;
  }
  HEAP32[$7 >> 2] = $8;
  HEAP32[$7 + 4 >> 2] = $0;
  HEAP32[$7 + 8 >> 2] = $4;
  HEAP32[$7 + 12 >> 2] = $3;
  $0 = HEAP32[$5 + 8 >> 2];
  $3 = HEAP32[$5 + 12 >> 2];
  $4 = $7 + 8 | 0;
  $1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$11 + 4 >> 2] = $1;
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $3;
  __stack_pointer = $5 + 32 | 0;
 }
 
 function rustsecp256k1_v0_8_1_hmac_sha256_initialize($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 188 >> 2] = $0;
  HEAP32[$2 + 184 >> 2] = $1;
  HEAP32[$2 + 180 >> 2] = 32;
  label$1 : {
   if (HEAPU32[$2 + 180 >> 2] <= 64) {
    $0 = $2 + 112 | 0;
    memcpy($0, HEAP32[$2 + 184 >> 2], HEAP32[$2 + 180 >> 2]);
    memset($0 + HEAP32[$2 + 180 >> 2] | 0, 64 - HEAP32[$2 + 180 >> 2] | 0);
    break label$1;
   }
   $0 = $2 + 8 | 0;
   rustsecp256k1_v0_8_1_sha256_initialize($0);
   rustsecp256k1_v0_8_1_sha256_write($0, HEAP32[$2 + 184 >> 2], HEAP32[$2 + 180 >> 2]);
   $1 = $0;
   $0 = $2 + 112 | 0;
   rustsecp256k1_v0_8_1_sha256_finalize($1, $0);
   $0 = $0 + 32 | 0;
   HEAP8[$0 | 0] = 0;
   HEAP8[$0 + 1 | 0] = 0;
   HEAP8[$0 + 2 | 0] = 0;
   HEAP8[$0 + 3 | 0] = 0;
   HEAP8[$0 + 4 | 0] = 0;
   HEAP8[$0 + 5 | 0] = 0;
   HEAP8[$0 + 6 | 0] = 0;
   HEAP8[$0 + 7 | 0] = 0;
   $1 = $0 + 24 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $0 + 16 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $0 = $0 + 8 | 0;
   HEAP8[$0 | 0] = 0;
   HEAP8[$0 + 1 | 0] = 0;
   HEAP8[$0 + 2 | 0] = 0;
   HEAP8[$0 + 3 | 0] = 0;
   HEAP8[$0 + 4 | 0] = 0;
   HEAP8[$0 + 5 | 0] = 0;
   HEAP8[$0 + 6 | 0] = 0;
   HEAP8[$0 + 7 | 0] = 0;
  }
  rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$2 + 188 >> 2] + 104 | 0);
  HEAP32[$2 + 176 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 176 >> 2] < 64) {
    $0 = HEAP32[$2 + 176 >> 2] + ($2 + 112 | 0) | 0;
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] ^ 92;
    HEAP32[$2 + 176 >> 2] = HEAP32[$2 + 176 >> 2] + 1;
    continue;
   }
   break;
  };
  rustsecp256k1_v0_8_1_sha256_write(HEAP32[$2 + 188 >> 2] + 104 | 0, $2 + 112 | 0, 64);
  rustsecp256k1_v0_8_1_sha256_initialize(HEAP32[$2 + 188 >> 2]);
  HEAP32[$2 + 176 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 176 >> 2] < 64) {
    $0 = HEAP32[$2 + 176 >> 2] + ($2 + 112 | 0) | 0;
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] ^ 106;
    HEAP32[$2 + 176 >> 2] = HEAP32[$2 + 176 >> 2] + 1;
    continue;
   }
   break;
  };
  $0 = $2 + 112 | 0;
  rustsecp256k1_v0_8_1_sha256_write(HEAP32[$2 + 188 >> 2], $0, 64);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  __stack_pointer = $2 + 192 | 0;
 }
 
 function rustsecp256k1_v0_8_1_hmac_sha256_write($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  rustsecp256k1_v0_8_1_sha256_write(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_hmac_sha256_finalize($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  rustsecp256k1_v0_8_1_sha256_finalize(HEAP32[$2 + 44 >> 2], $2);
  rustsecp256k1_v0_8_1_sha256_write(HEAP32[$2 + 44 >> 2] + 104 | 0, $2, 32);
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $0 = $2 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $2 + 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $2 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  rustsecp256k1_v0_8_1_sha256_finalize(HEAP32[$2 + 44 >> 2] + 104 | 0, HEAP32[$2 + 40 >> 2]);
  __stack_pointer = $2 + 48 | 0;
 }
 
 function rustsecp256k1_v0_8_1_scalar_get_bits($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$3 + 12 >> 2] + ($2 >>> 6 << 3) | 0;
  $0 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $1 = $2 & 63;
  $2 = $1 & 31;
  if ($1 >>> 0 >= 32) {
   $1 = $4 >>> $2 | 0
  } else {
   $1 = ((1 << $2) - 1 & $4) << 32 - $2 | $0 >>> $2
  }
  $2 = HEAP32[$3 + 4 >> 2];
  $0 = $2 & 31;
  return (($2 & 63) >>> 0 < 32 ? 1 << $0 : 0) - 1 & $1;
 }
 
 function rustsecp256k1_v0_8_1_modinv64($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 224 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 220 >> 2] = $0;
  HEAP32[$5 + 216 >> 2] = $1;
  $0 = $5 + 176 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $5 + 136 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$5 + 136 >> 2] = 1;
  HEAP32[$5 + 140 >> 2] = 0;
  $0 = HEAP32[$5 + 216 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $5 + 96 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $0 = HEAP32[$5 + 220 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $5 + 56 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$5 + 40 >> 2] = -1;
  HEAP32[$5 + 44 >> 2] = -1;
  HEAP32[$5 + 52 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 52 >> 2] < 10) {
    $1 = HEAP32[$5 + 44 >> 2];
    $2 = HEAP32[$5 + 96 >> 2];
    $3 = HEAP32[$5 + 100 >> 2];
    $4 = HEAP32[$5 + 56 >> 2];
    $6 = HEAP32[$5 + 60 >> 2];
    $0 = __stack_pointer - 128 | 0;
    HEAP32[$0 + 120 >> 2] = HEAP32[$5 + 40 >> 2];
    HEAP32[$0 + 124 >> 2] = $1;
    HEAP32[$0 + 112 >> 2] = $2;
    HEAP32[$0 + 116 >> 2] = $3;
    HEAP32[$0 + 104 >> 2] = $4;
    HEAP32[$0 + 108 >> 2] = $6;
    $1 = $5 + 8 | 0;
    HEAP32[$0 + 100 >> 2] = $1;
    HEAP32[$0 + 88 >> 2] = 8;
    HEAP32[$0 + 92 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP32[$0 + 84 >> 2] = 0;
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 64 >> 2] = 8;
    HEAP32[$0 + 68 >> 2] = 0;
    $2 = HEAP32[$0 + 116 >> 2];
    HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 112 >> 2];
    HEAP32[$0 + 44 >> 2] = $2;
    $2 = HEAP32[$0 + 108 >> 2];
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 104 >> 2];
    HEAP32[$0 + 36 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = 3;
    while (1) {
     if (HEAP32[$0 + 4 >> 2] < 62) {
      $2 = HEAP32[$0 + 124 >> 2] >> 31;
      HEAP32[$0 + 56 >> 2] = $2;
      HEAP32[$0 + 60 >> 2] = $2;
      $2 = 0 - (HEAP32[$0 + 32 >> 2] & 1) | 0;
      HEAP32[$0 + 48 >> 2] = $2;
      HEAP32[$0 + 52 >> 2] = $2;
      $3 = HEAP32[$0 + 60 >> 2];
      $4 = $3 ^ HEAP32[$0 + 44 >> 2];
      $2 = HEAP32[$0 + 56 >> 2];
      $6 = $2 ^ HEAP32[$0 + 40 >> 2];
      HEAP32[$0 + 24 >> 2] = $6 - $2;
      HEAP32[$0 + 28 >> 2] = $4 - (($2 >>> 0 > $6 >>> 0) + $3 | 0);
      $2 = HEAP32[$0 + 92 >> 2] ^ HEAP32[$0 + 60 >> 2];
      $3 = HEAP32[$0 + 60 >> 2];
      $4 = HEAP32[$0 + 88 >> 2] ^ HEAP32[$0 + 56 >> 2];
      $6 = HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 16 >> 2] = $4 - $6;
      HEAP32[$0 + 20 >> 2] = $2 - (($4 >>> 0 < $6 >>> 0) + $3 | 0);
      $2 = HEAP32[$0 + 84 >> 2] ^ HEAP32[$0 + 60 >> 2];
      $3 = HEAP32[$0 + 60 >> 2];
      $4 = HEAP32[$0 + 80 >> 2] ^ HEAP32[$0 + 56 >> 2];
      $6 = HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 8 >> 2] = $4 - $6;
      HEAP32[$0 + 12 >> 2] = $2 - (($4 >>> 0 < $6 >>> 0) + $3 | 0);
      $2 = HEAP32[$0 + 36 >> 2] + (HEAP32[$0 + 28 >> 2] & HEAP32[$0 + 52 >> 2]) | 0;
      $3 = HEAP32[$0 + 24 >> 2] & HEAP32[$0 + 48 >> 2];
      $4 = $3 + HEAP32[$0 + 32 >> 2] | 0;
      HEAP32[$0 + 32 >> 2] = $4;
      HEAP32[$0 + 36 >> 2] = $3 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
      $2 = HEAP32[$0 + 76 >> 2] + (HEAP32[$0 + 20 >> 2] & HEAP32[$0 + 52 >> 2]) | 0;
      $3 = HEAP32[$0 + 16 >> 2] & HEAP32[$0 + 48 >> 2];
      $4 = $3 + HEAP32[$0 + 72 >> 2] | 0;
      HEAP32[$0 + 72 >> 2] = $4;
      HEAP32[$0 + 76 >> 2] = $3 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
      $2 = HEAP32[$0 + 68 >> 2] + (HEAP32[$0 + 12 >> 2] & HEAP32[$0 + 52 >> 2]) | 0;
      $3 = HEAP32[$0 + 8 >> 2] & HEAP32[$0 + 48 >> 2];
      $4 = $3 + HEAP32[$0 + 64 >> 2] | 0;
      HEAP32[$0 + 64 >> 2] = $4;
      HEAP32[$0 + 68 >> 2] = $3 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
      $2 = HEAP32[$0 + 52 >> 2] & HEAP32[$0 + 60 >> 2];
      HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 48 >> 2] & HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 60 >> 2] = $2;
      $2 = HEAP32[$0 + 124 >> 2] ^ HEAP32[$0 + 60 >> 2];
      $3 = HEAP32[$0 + 120 >> 2] ^ HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 120 >> 2] = $3 - 1;
      HEAP32[$0 + 124 >> 2] = $2 - !$3;
      $2 = HEAP32[$0 + 44 >> 2] + (HEAP32[$0 + 36 >> 2] & HEAP32[$0 + 60 >> 2]) | 0;
      $3 = HEAP32[$0 + 32 >> 2] & HEAP32[$0 + 56 >> 2];
      $4 = $3 + HEAP32[$0 + 40 >> 2] | 0;
      HEAP32[$0 + 40 >> 2] = $4;
      HEAP32[$0 + 44 >> 2] = $3 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
      $2 = HEAP32[$0 + 92 >> 2] + (HEAP32[$0 + 76 >> 2] & HEAP32[$0 + 60 >> 2]) | 0;
      $3 = HEAP32[$0 + 72 >> 2] & HEAP32[$0 + 56 >> 2];
      $4 = $3 + HEAP32[$0 + 88 >> 2] | 0;
      HEAP32[$0 + 88 >> 2] = $4;
      HEAP32[$0 + 92 >> 2] = $3 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
      $2 = HEAP32[$0 + 84 >> 2] + (HEAP32[$0 + 68 >> 2] & HEAP32[$0 + 60 >> 2]) | 0;
      $3 = HEAP32[$0 + 64 >> 2] & HEAP32[$0 + 56 >> 2];
      $4 = $3 + HEAP32[$0 + 80 >> 2] | 0;
      HEAP32[$0 + 80 >> 2] = $4;
      HEAP32[$0 + 84 >> 2] = $3 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
      $2 = HEAP32[$0 + 36 >> 2];
      HEAP32[$0 + 32 >> 2] = ($2 & 1) << 31 | HEAP32[$0 + 32 >> 2] >>> 1;
      HEAP32[$0 + 36 >> 2] = $2 >>> 1;
      $2 = HEAP32[$0 + 88 >> 2];
      $3 = HEAP32[$0 + 92 >> 2] << 1 | $2 >>> 31;
      HEAP32[$0 + 88 >> 2] = $2 << 1;
      HEAP32[$0 + 92 >> 2] = $3;
      $2 = HEAP32[$0 + 80 >> 2];
      $3 = HEAP32[$0 + 84 >> 2] << 1 | $2 >>> 31;
      HEAP32[$0 + 80 >> 2] = $2 << 1;
      HEAP32[$0 + 84 >> 2] = $3;
      $2 = HEAP32[$0 + 120 >> 2];
      $3 = HEAP32[$0 + 124 >> 2];
      if (($3 | 0) >= 0) {
       $4 = 1
      } else {
       $4 = ($3 | 0) >= -1 & $2 >>> 0 >= 4294966705
      }
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
      continue;
     }
     break;
    };
    $2 = HEAP32[$0 + 92 >> 2];
    $3 = HEAP32[$0 + 100 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$0 + 88 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    $2 = HEAP32[$0 + 84 >> 2];
    $3 = HEAP32[$0 + 100 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 80 >> 2];
    HEAP32[$3 + 12 >> 2] = $2;
    $2 = HEAP32[$0 + 76 >> 2];
    $3 = HEAP32[$0 + 100 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 72 >> 2];
    HEAP32[$3 + 20 >> 2] = $2;
    $2 = HEAP32[$0 + 68 >> 2];
    $3 = HEAP32[$0 + 100 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 64 >> 2];
    HEAP32[$3 + 28 >> 2] = $2;
    i64toi32_i32$HIGH_BITS = HEAP32[$0 + 124 >> 2];
    HEAP32[$5 + 40 >> 2] = HEAP32[$0 + 120 >> 2];
    HEAP32[$5 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
    rustsecp256k1_v0_8_1_modinv64_update_de_62($5 + 176 | 0, $5 + 136 | 0, $1, HEAP32[$5 + 216 >> 2]);
    $0 = __stack_pointer - 176 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 172 >> 2] = $5 + 96;
    HEAP32[$0 + 168 >> 2] = $5 + 56;
    HEAP32[$0 + 164 >> 2] = $1;
    HEAP32[$0 + 152 >> 2] = -1;
    HEAP32[$0 + 156 >> 2] = 1073741823;
    $1 = HEAP32[$0 + 172 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 144 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 148 >> 2] = $2;
    $1 = HEAP32[$0 + 172 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 136 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 140 >> 2] = $2;
    $1 = HEAP32[$0 + 172 >> 2];
    $2 = HEAP32[$1 + 20 >> 2];
    HEAP32[$0 + 128 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$0 + 132 >> 2] = $2;
    $1 = HEAP32[$0 + 172 >> 2];
    $2 = HEAP32[$1 + 28 >> 2];
    HEAP32[$0 + 120 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$0 + 124 >> 2] = $2;
    $1 = HEAP32[$0 + 172 >> 2];
    $2 = HEAP32[$1 + 36 >> 2];
    HEAP32[$0 + 112 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$0 + 116 >> 2] = $2;
    $1 = HEAP32[$0 + 168 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 104 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 108 >> 2] = $2;
    $1 = HEAP32[$0 + 168 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 96 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 100 >> 2] = $2;
    $1 = HEAP32[$0 + 168 >> 2];
    $2 = HEAP32[$1 + 20 >> 2];
    HEAP32[$0 + 88 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$0 + 92 >> 2] = $2;
    $1 = HEAP32[$0 + 168 >> 2];
    $2 = HEAP32[$1 + 28 >> 2];
    HEAP32[$0 + 80 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$0 + 84 >> 2] = $2;
    $1 = HEAP32[$0 + 168 >> 2];
    $2 = HEAP32[$1 + 36 >> 2];
    HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$0 + 76 >> 2] = $2;
    $1 = HEAP32[$0 + 164 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 64 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 68 >> 2] = $2;
    $1 = HEAP32[$0 + 164 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 60 >> 2] = $2;
    $1 = HEAP32[$0 + 164 >> 2];
    $2 = HEAP32[$1 + 20 >> 2];
    HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$0 + 52 >> 2] = $2;
    $1 = HEAP32[$0 + 164 >> 2];
    $2 = HEAP32[$1 + 28 >> 2];
    HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$0 + 44 >> 2] = $2;
    $4 = $0 + 16 | 0;
    $1 = $4;
    rustsecp256k1_v0_8_1_i128_mul($1, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 144 >> 2], HEAP32[$0 + 148 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 104 >> 2], HEAP32[$0 + 108 >> 2]);
    rustsecp256k1_v0_8_1_i128_mul($0, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$0 + 144 >> 2], HEAP32[$0 + 148 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 104 >> 2], HEAP32[$0 + 108 >> 2]);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $1;
    i64toi32_i32$HIGH_BITS = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
    rustsecp256k1_v0_8_1_i128_rshift($1);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    i64toi32_i32$HIGH_BITS = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
    rustsecp256k1_v0_8_1_i128_rshift($0);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 136 >> 2], HEAP32[$0 + 140 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 96 >> 2], HEAP32[$0 + 100 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$0 + 136 >> 2], HEAP32[$0 + 140 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 96 >> 2], HEAP32[$0 + 100 >> 2]);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $1;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 172 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($1);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 168 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($0);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 128 >> 2], HEAP32[$0 + 132 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$0 + 128 >> 2], HEAP32[$0 + 132 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2]);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $1;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 172 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 12 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($1);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 168 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 12 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($0);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 120 >> 2], HEAP32[$0 + 124 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 80 >> 2], HEAP32[$0 + 84 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$0 + 120 >> 2], HEAP32[$0 + 124 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 80 >> 2], HEAP32[$0 + 84 >> 2]);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $1;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 172 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 20 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($1);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 168 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 20 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($0);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2], HEAP32[$0 + 112 >> 2], HEAP32[$0 + 116 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$0 + 112 >> 2], HEAP32[$0 + 116 >> 2]);
    rustsecp256k1_v0_8_1_i128_accum_mul($0, HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2], HEAP32[$0 + 72 >> 2], HEAP32[$0 + 76 >> 2]);
    $2 = __stack_pointer - 16 | 0;
    HEAP32[$2 + 12 >> 2] = $1;
    $2 = HEAP32[$2 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$0 + 172 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($1);
    $1 = __stack_pointer - 16 | 0;
    HEAP32[$1 + 12 >> 2] = $0;
    $1 = HEAP32[$1 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 168 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS & 1073741823;
    rustsecp256k1_v0_8_1_i128_rshift($0);
    $1 = __stack_pointer - 16 | 0;
    HEAP32[$1 + 12 >> 2] = $4;
    $1 = HEAP32[$1 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 172 >> 2];
    HEAP32[$2 + 32 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
    $1 = __stack_pointer - 16 | 0;
    HEAP32[$1 + 12 >> 2] = $0;
    $1 = HEAP32[$1 + 12 >> 2];
    i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
    $2 = HEAP32[$0 + 168 >> 2];
    HEAP32[$2 + 32 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
    __stack_pointer = $0 + 176 | 0;
    HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
    continue;
   }
   break;
  };
  $0 = $5 + 176 | 0;
  rustsecp256k1_v0_8_1_modinv64_normalize_62($0, HEAP32[$5 + 128 >> 2], HEAP32[$5 + 132 >> 2], HEAP32[$5 + 216 >> 2]);
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 220 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = $0 + 32 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 16 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  __stack_pointer = $5 + 224 | 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_to_signed62($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer + -64 | 0;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 56 >> 2] = $1;
  HEAP32[$2 + 48 >> 2] = -1;
  HEAP32[$2 + 52 >> 2] = 1073741823;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $4 = HEAP32[$2 + 44 >> 2];
  $0 = HEAP32[$2 + 32 >> 2] << 20;
  $3 = HEAP32[$2 + 60 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 + 40 >> 2];
  HEAP32[$3 + 4 >> 2] = ($0 | $4) & 1073741823;
  $1 = HEAP32[$2 + 36 >> 2];
  $0 = $1 >>> 10 | 0;
  $1 = ($1 & 1023) << 22 | HEAP32[$2 + 32 >> 2] >>> 10;
  $4 = $0;
  $0 = HEAP32[$2 + 24 >> 2] << 10;
  $3 = HEAP32[$2 + 60 >> 2];
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = ($0 | $4) & 1073741823;
  $1 = HEAP32[$2 + 28 >> 2];
  $0 = $1 >>> 20 | 0;
  $1 = ($1 & 1048575) << 12 | HEAP32[$2 + 24 >> 2] >>> 20;
  $4 = $0;
  $0 = HEAP32[$2 + 16 >> 2];
  $3 = HEAP32[$2 + 60 >> 2];
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = ($0 | $4) & 1073741823;
  $1 = HEAP32[$2 + 20 >> 2];
  $0 = $1 >>> 30 | 0;
  $1 = ($1 & 1073741823) << 2 | HEAP32[$2 + 16 >> 2] >>> 30;
  $4 = $0;
  $5 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$2 + 12 >> 2] << 22 | $5 >>> 10;
  $3 = HEAP32[$2 + 60 >> 2];
  HEAP32[$3 + 24 >> 2] = $5 << 22 | $1;
  HEAP32[$3 + 28 >> 2] = ($0 | $4) & 1073741823;
  $4 = HEAP32[$2 + 60 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 12 >> 2] >>> 8;
  HEAP32[$4 + 36 >> 2] = 0;
 }
 
 function rustsecp256k1_v0_8_1_fe_from_signed62($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer + -64 | 0;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 56 >> 2] = $1;
  HEAP32[$2 + 48 >> 2] = -1;
  HEAP32[$2 + 52 >> 2] = 1048575;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$0 + 28 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 36 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = HEAP32[$2 + 44 >> 2];
  $1 = HEAP32[$2 + 60 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 + 40 >> 2];
  HEAP32[$1 + 4 >> 2] = $0 & 1048575;
  $3 = HEAP32[$2 + 32 >> 2];
  $0 = HEAP32[$2 + 36 >> 2] << 10 | $3 >>> 22;
  $4 = HEAP32[$2 + 60 >> 2];
  HEAP32[$4 + 8 >> 2] = $3 << 10 | HEAP32[$2 + 44 >> 2] >>> 20;
  HEAP32[$4 + 12 >> 2] = $0 & 1048575;
  $3 = HEAP32[$2 + 24 >> 2];
  $0 = HEAP32[$2 + 28 >> 2] << 20 | $3 >>> 12;
  $4 = HEAP32[$2 + 60 >> 2];
  HEAP32[$4 + 16 >> 2] = $3 << 20 | HEAP32[$2 + 36 >> 2] >>> 10;
  HEAP32[$4 + 20 >> 2] = $0 & 1048575;
  $3 = HEAP32[$2 + 16 >> 2];
  $1 = HEAP32[$2 + 20 >> 2] << 30 | $3 >>> 2;
  $4 = HEAP32[$2 + 60 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$2 + 28 >> 2] | $3 << 30;
  HEAP32[$4 + 28 >> 2] = $1 & 1048575;
  $1 = HEAP32[$2 + 20 >> 2];
  $0 = $1 >>> 22 | 0;
  $1 = ($1 & 4194303) << 10 | HEAP32[$2 + 16 >> 2] >>> 22;
  $3 = $0;
  $0 = HEAP32[$2 + 8 >> 2] << 8;
  $2 = HEAP32[$2 + 60 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $0 | $3;
 }
 
 function rustsecp256k1_v0_8_1_read_be32($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return HEAPU8[$0 | 0] << 24 | HEAPU8[$0 + 1 | 0] << 16 | HEAPU8[$0 + 2 | 0] << 8 | HEAPU8[$0 + 3 | 0];
 }
 
 function rustsecp256k1_v0_8_1_scalar_mul_shift_var($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 92 >> 2] = $0;
  HEAP32[$3 + 88 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $2;
  HEAP32[$3 + 80 >> 2] = 384;
  rustsecp256k1_v0_8_1_scalar_mul_512($3 + 16 | 0, HEAP32[$3 + 88 >> 2], HEAP32[$3 + 84 >> 2]);
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 80 >> 2] >>> 6;
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] & 63;
  HEAP32[$3 + 4 >> 2] = 64 - HEAP32[$3 + 8 >> 2];
  label$1 : {
   if (HEAPU32[$3 + 80 >> 2] < 512) {
    $0 = ($3 + 16 | 0) + (HEAP32[$3 + 12 >> 2] << 3) | 0;
    $1 = HEAP32[$0 >> 2];
    $2 = HEAP32[$0 + 4 >> 2];
    $0 = HEAP32[$3 + 8 >> 2];
    $4 = $0 & 31;
    if (($0 & 63) >>> 0 >= 32) {
     $1 = $2 >>> $4 | 0;
     $4 = 0;
    } else {
     $1 = ((1 << $4) - 1 & $2) << 32 - $4 | $1 >>> $4;
     $4 = $2 >>> $4 | 0;
    }
    label$3 : {
     label$4 : {
      if (HEAPU32[$3 + 80 >> 2] >= 448) {
       break label$4
      }
      if (!HEAP32[$3 + 8 >> 2]) {
       break label$4
      }
      $0 = ((HEAP32[$3 + 12 >> 2] << 3) + $3 | 0) + 24 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $5 = HEAP32[$0 >> 2];
      $0 = HEAP32[$3 + 4 >> 2];
      $6 = $0 & 31;
      if (($0 & 63) >>> 0 >= 32) {
       $0 = $5 << $6;
       $2 = 0;
      } else {
       $0 = (1 << $6) - 1 & $5 >>> 32 - $6 | $2 << $6;
       $2 = $5 << $6;
      }
      break label$3;
     }
     $0 = 0;
     $2 = 0;
    }
    $2 = $2 | $1;
    $1 = $0 | $4;
    break label$1;
   }
   $2 = 0;
   $1 = 0;
  }
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  label$5 : {
   if (HEAPU32[$3 + 80 >> 2] < 448) {
    $0 = ((HEAP32[$3 + 12 >> 2] << 3) + $3 | 0) + 24 | 0;
    $1 = HEAP32[$0 >> 2];
    $2 = HEAP32[$0 + 4 >> 2];
    $0 = HEAP32[$3 + 8 >> 2];
    $4 = $0 & 31;
    if (($0 & 63) >>> 0 >= 32) {
     $1 = $2 >>> $4 | 0;
     $4 = 0;
    } else {
     $1 = ((1 << $4) - 1 & $2) << 32 - $4 | $1 >>> $4;
     $4 = $2 >>> $4 | 0;
    }
    label$7 : {
     label$8 : {
      if (HEAPU32[$3 + 80 >> 2] >= 384) {
       break label$8
      }
      if (!HEAP32[$3 + 8 >> 2]) {
       break label$8
      }
      $0 = ((HEAP32[$3 + 12 >> 2] << 3) + $3 | 0) + 32 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $5 = HEAP32[$0 >> 2];
      $0 = HEAP32[$3 + 4 >> 2];
      $6 = $0 & 31;
      if (($0 & 63) >>> 0 >= 32) {
       $0 = $5 << $6;
       $2 = 0;
      } else {
       $0 = (1 << $6) - 1 & $5 >>> 32 - $6 | $2 << $6;
       $2 = $5 << $6;
      }
      break label$7;
     }
     $0 = 0;
     $2 = 0;
    }
    $2 = $2 | $1;
    $1 = $0 | $4;
    break label$5;
   }
   $2 = 0;
   $1 = 0;
  }
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  label$9 : {
   if (HEAPU32[$3 + 80 >> 2] < 384) {
    $0 = ((HEAP32[$3 + 12 >> 2] << 3) + $3 | 0) + 32 | 0;
    $1 = HEAP32[$0 >> 2];
    $2 = HEAP32[$0 + 4 >> 2];
    $0 = HEAP32[$3 + 8 >> 2];
    $4 = $0 & 31;
    if (($0 & 63) >>> 0 >= 32) {
     $1 = $2 >>> $4 | 0;
     $4 = 0;
    } else {
     $1 = ((1 << $4) - 1 & $2) << 32 - $4 | $1 >>> $4;
     $4 = $2 >>> $4 | 0;
    }
    label$11 : {
     label$12 : {
      if (HEAPU32[$3 + 80 >> 2] >= 320) {
       break label$12
      }
      if (!HEAP32[$3 + 8 >> 2]) {
       break label$12
      }
      $0 = ((HEAP32[$3 + 12 >> 2] << 3) + $3 | 0) + 40 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $5 = HEAP32[$0 >> 2];
      $0 = HEAP32[$3 + 4 >> 2];
      $6 = $0 & 31;
      if (($0 & 63) >>> 0 >= 32) {
       $0 = $5 << $6;
       $2 = 0;
      } else {
       $0 = (1 << $6) - 1 & $5 >>> 32 - $6 | $2 << $6;
       $2 = $5 << $6;
      }
      break label$11;
     }
     $0 = 0;
     $2 = 0;
    }
    $2 = $2 | $1;
    $1 = $0 | $4;
    break label$9;
   }
   $2 = 0;
   $1 = 0;
  }
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = $1;
  label$13 : {
   if (HEAPU32[$3 + 80 >> 2] < 320) {
    $0 = ((HEAP32[$3 + 12 >> 2] << 3) + $3 | 0) + 40 | 0;
    $1 = HEAP32[$0 >> 2];
    $2 = HEAP32[$0 + 4 >> 2];
    $0 = HEAP32[$3 + 8 >> 2];
    $4 = $0 & 31;
    if (($0 & 63) >>> 0 >= 32) {
     $1 = $2 >>> $4 | 0;
     $0 = 0;
    } else {
     $1 = ((1 << $4) - 1 & $2) << 32 - $4 | $1 >>> $4;
     $0 = $2 >>> $4 | 0;
    }
    break label$13;
   }
   $1 = 0;
   $0 = 0;
  }
  $2 = HEAP32[$3 + 92 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $1 = HEAP32[$3 + 80 >> 2] - 1 | 0;
  $0 = ($3 + 16 | 0) + ($1 >>> 6 << 3) | 0;
  $2 = HEAP32[$0 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $0 = $1 & 63;
  $5 = $0 & 31;
  $1 = HEAP32[$3 + 92 >> 2];
  if ($0 >>> 0 >= 32) {
   $2 = $4 >>> $5 | 0
  } else {
   $2 = ((1 << $5) - 1 & $4) << 32 - $5 | $2 >>> $5
  }
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = $2 & 1;
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + (HEAP32[$0 + 20 >> 2] - 1 & 256);
  $1 = HEAP32[$0 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_from_u64($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $5 = !(HEAP32[$0 + 24 >> 2] >>> 6 | 0);
  $2 = $5 >>> 31 | 0;
  $1 = HEAP32[$0 + 24 >> 2] & 63;
  $6 = $1 & 31;
  if ($1 >>> 0 >= 32) {
   $4 = 0;
   $1 = $5 << $6;
  } else {
   $4 = $5 << $6;
   $1 = (1 << $6) - 1 & $5 >>> 32 - $6 | $2 << $6;
  }
  rustsecp256k1_v0_8_1_u128_accum_u64($0, $4, $1);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($0, 64);
  $1 = HEAP32[$0 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  $1 = HEAP32[$0 + 24 >> 2];
  $4 = ($1 >>> 6 | 0) == 1;
  $2 = $4 >>> 31 | 0;
  $1 = $1 & 63;
  $5 = $1 & 31;
  if ($1 >>> 0 >= 32) {
   $2 = $4 << $5;
   $1 = 0;
  } else {
   $2 = (1 << $5) - 1 & $4 >>> 32 - $5 | $2 << $5;
   $1 = $4 << $5;
  }
  rustsecp256k1_v0_8_1_u128_accum_u64($0, $1, $2);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($0, 64);
  $1 = HEAP32[$0 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  $1 = HEAP32[$0 + 24 >> 2];
  $4 = ($1 >>> 6 | 0) == 2;
  $2 = $4 >>> 31 | 0;
  $1 = $1 & 63;
  $5 = $1 & 31;
  if ($1 >>> 0 >= 32) {
   $2 = $4 << $5;
   $1 = 0;
  } else {
   $2 = (1 << $5) - 1 & $4 >>> 32 - $5 | $2 << $5;
   $1 = $4 << $5;
  }
  rustsecp256k1_v0_8_1_u128_accum_u64($0, $1, $2);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  rustsecp256k1_v0_8_1_u128_rshift($0, 64);
  $1 = HEAP32[$0 + 28 >> 2];
  rustsecp256k1_v0_8_1_u128_accum_u64($0, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  $1 = HEAP32[$0 + 24 >> 2];
  $4 = ($1 >>> 6 | 0) == 3;
  $2 = $4 >>> 31 | 0;
  $1 = $1 & 63;
  $5 = $1 & 31;
  if ($1 >>> 0 >= 32) {
   $2 = $4 << $5;
   $1 = 0;
  } else {
   $2 = (1 << $5) - 1 & $4 >>> 32 - $5 | $2 << $5;
   $1 = $4 << $5;
  }
  rustsecp256k1_v0_8_1_u128_accum_u64($0, $1, $2);
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  __stack_pointer = $0 + 32 | 0;
  __stack_pointer = $3 + 96 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_double_var($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  label$1 : {
   if (HEAP32[HEAP32[$3 + 8 >> 2] + 120 >> 2]) {
    rustsecp256k1_v0_8_1_gej_set_infinity(HEAP32[$3 + 12 >> 2]);
    if (HEAP32[$3 + 4 >> 2]) {
     rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$3 + 4 >> 2], 1)
    }
    break label$1;
   }
   if (HEAP32[$3 + 4 >> 2]) {
    $0 = HEAP32[$3 + 8 >> 2] + 40 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    $2 = $0 + 32 | 0;
    $5 = HEAP32[$2 + 4 >> 2];
    $4 = $1 + 32 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $5;
    $2 = $0 + 24 | 0;
    $5 = HEAP32[$2 + 4 >> 2];
    $4 = $1 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $5;
    $2 = $0 + 16 | 0;
    $5 = HEAP32[$2 + 4 >> 2];
    $4 = $1 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $5;
    $0 = $0 + 8 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $1 = $1 + 8 | 0;
    HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    rustsecp256k1_v0_8_1_fe_normalize_weak(HEAP32[$3 + 4 >> 2]);
   }
   $1 = HEAP32[$3 + 8 >> 2];
   $0 = __stack_pointer - 128 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 124 >> 2] = HEAP32[$3 + 12 >> 2];
   HEAP32[$0 + 120 >> 2] = $1;
   HEAP32[HEAP32[$0 + 124 >> 2] + 120 >> 2] = HEAP32[HEAP32[$0 + 120 >> 2] + 120 >> 2];
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$0 + 124 >> 2] + 80 | 0, HEAP32[$0 + 120 >> 2] + 80 | 0, HEAP32[$0 + 120 >> 2] + 40 | 0);
   $1 = $0 + 40 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($1, HEAP32[$0 + 120 >> 2] + 40 | 0);
   $2 = $0 + 80 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($2, HEAP32[$0 + 120 >> 2]);
   rustsecp256k1_v0_8_1_fe_mul_int($2, 3);
   rustsecp256k1_v0_8_1_fe_half($2);
   rustsecp256k1_v0_8_1_fe_negate($0, $1, 1);
   rustsecp256k1_v0_8_1_fe_mul($0, $0, HEAP32[$0 + 120 >> 2]);
   rustsecp256k1_v0_8_1_fe_sqr(HEAP32[$0 + 124 >> 2], $2);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$0 + 124 >> 2], $0);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$0 + 124 >> 2], $0);
   rustsecp256k1_v0_8_1_fe_sqr($1, $1);
   rustsecp256k1_v0_8_1_fe_add($0, HEAP32[$0 + 124 >> 2]);
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$0 + 124 >> 2] + 40 | 0, $0, $2);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$0 + 124 >> 2] + 40 | 0, $1);
   rustsecp256k1_v0_8_1_fe_negate(HEAP32[$0 + 124 >> 2] + 40 | 0, HEAP32[$0 + 124 >> 2] + 40 | 0, 2);
   __stack_pointer = $0 + 128 | 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ge_set_gej_zinv($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 92 >> 2] = $0;
  HEAP32[$3 + 88 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $2;
  $0 = $3 + 40 | 0;
  rustsecp256k1_v0_8_1_fe_sqr($0, HEAP32[$3 + 84 >> 2]);
  rustsecp256k1_v0_8_1_fe_mul($3, $0, HEAP32[$3 + 84 >> 2]);
  rustsecp256k1_v0_8_1_fe_mul(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], $0);
  rustsecp256k1_v0_8_1_fe_mul(HEAP32[$3 + 92 >> 2] + 40 | 0, HEAP32[$3 + 88 >> 2] + 40 | 0, $3);
  HEAP32[HEAP32[$3 + 92 >> 2] + 80 >> 2] = HEAP32[HEAP32[$3 + 88 >> 2] + 120 >> 2];
  __stack_pointer = $3 + 96 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_add_ge_var($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 416 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 412 >> 2] = $0;
  HEAP32[$4 + 408 >> 2] = $1;
  HEAP32[$4 + 404 >> 2] = $2;
  HEAP32[$4 + 400 >> 2] = $3;
  label$1 : {
   if (HEAP32[HEAP32[$4 + 408 >> 2] + 120 >> 2]) {
    rustsecp256k1_v0_8_1_gej_set_ge(HEAP32[$4 + 412 >> 2], HEAP32[$4 + 404 >> 2]);
    break label$1;
   }
   if (HEAP32[HEAP32[$4 + 404 >> 2] + 80 >> 2]) {
    if (HEAP32[$4 + 400 >> 2]) {
     rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$4 + 400 >> 2], 1)
    }
    memcpy(HEAP32[$4 + 412 >> 2], HEAP32[$4 + 408 >> 2], 128);
    break label$1;
   }
   $2 = $4 + 360 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($2, HEAP32[$4 + 408 >> 2] + 80 | 0);
   $0 = HEAP32[$4 + 408 >> 2];
   $5 = HEAP32[$0 >> 2];
   $6 = HEAP32[$0 + 4 >> 2];
   $3 = $4 + 320 | 0;
   $1 = $3;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $6;
   $5 = $0 + 32 | 0;
   $6 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $1 + 32 | 0;
   HEAP32[$7 >> 2] = $6;
   HEAP32[$7 + 4 >> 2] = $5;
   $5 = $0 + 24 | 0;
   $6 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $1 + 24 | 0;
   HEAP32[$7 >> 2] = $6;
   HEAP32[$7 + 4 >> 2] = $5;
   $5 = $0 + 16 | 0;
   $6 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $1 + 16 | 0;
   HEAP32[$7 >> 2] = $6;
   HEAP32[$7 + 4 >> 2] = $5;
   $0 = $0 + 8 | 0;
   $5 = HEAP32[$0 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = $1 + 8 | 0;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $0;
   rustsecp256k1_v0_8_1_fe_normalize_weak($3);
   $5 = $4 + 280 | 0;
   rustsecp256k1_v0_8_1_fe_mul($5, HEAP32[$4 + 404 >> 2], $2);
   $0 = HEAP32[$4 + 408 >> 2] + 40 | 0;
   $6 = HEAP32[$0 >> 2];
   $7 = HEAP32[$0 + 4 >> 2];
   $1 = $4 + 240 | 0;
   HEAP32[$1 >> 2] = $6;
   HEAP32[$1 + 4 >> 2] = $7;
   $6 = $0 + 32 | 0;
   $7 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $1 + 32 | 0;
   HEAP32[$8 >> 2] = $7;
   HEAP32[$8 + 4 >> 2] = $6;
   $6 = $0 + 24 | 0;
   $7 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $1 + 24 | 0;
   HEAP32[$8 >> 2] = $7;
   HEAP32[$8 + 4 >> 2] = $6;
   $6 = $0 + 16 | 0;
   $7 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $1 + 16 | 0;
   HEAP32[$8 >> 2] = $7;
   HEAP32[$8 + 4 >> 2] = $6;
   $0 = $0 + 8 | 0;
   $6 = HEAP32[$0 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $7 = $1 + 8 | 0;
   HEAP32[$7 >> 2] = $6;
   HEAP32[$7 + 4 >> 2] = $0;
   rustsecp256k1_v0_8_1_fe_normalize_weak($1);
   $0 = $4 + 200 | 0;
   rustsecp256k1_v0_8_1_fe_mul($0, HEAP32[$4 + 404 >> 2] + 40 | 0, $2);
   rustsecp256k1_v0_8_1_fe_mul($0, $0, HEAP32[$4 + 408 >> 2] + 80 | 0);
   $2 = $4 + 160 | 0;
   rustsecp256k1_v0_8_1_fe_negate($2, $3, 1);
   rustsecp256k1_v0_8_1_fe_add($2, $5);
   $3 = $4 + 120 | 0;
   rustsecp256k1_v0_8_1_fe_negate($3, $0, 1);
   rustsecp256k1_v0_8_1_fe_add($3, $1);
   if (rustsecp256k1_v0_8_1_fe_normalizes_to_zero_var($2)) {
    if (rustsecp256k1_v0_8_1_fe_normalizes_to_zero_var($4 + 120 | 0)) {
     rustsecp256k1_v0_8_1_gej_double_var(HEAP32[$4 + 412 >> 2], HEAP32[$4 + 408 >> 2], HEAP32[$4 + 400 >> 2]);
     break label$1;
    }
    if (HEAP32[$4 + 400 >> 2]) {
     rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$4 + 400 >> 2], 0)
    }
    rustsecp256k1_v0_8_1_gej_set_infinity(HEAP32[$4 + 412 >> 2]);
    break label$1;
   }
   HEAP32[HEAP32[$4 + 412 >> 2] + 120 >> 2] = 0;
   if (HEAP32[$4 + 400 >> 2]) {
    $0 = $4 + 160 | 0;
    $2 = HEAP32[$0 >> 2];
    $3 = HEAP32[$0 + 4 >> 2];
    $1 = HEAP32[$4 + 400 >> 2];
    HEAP32[$1 >> 2] = $2;
    HEAP32[$1 + 4 >> 2] = $3;
    $2 = $0 + 32 | 0;
    $3 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    $5 = $1 + 32 | 0;
    HEAP32[$5 >> 2] = $3;
    HEAP32[$5 + 4 >> 2] = $2;
    $2 = $0 + 24 | 0;
    $3 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    $5 = $1 + 24 | 0;
    HEAP32[$5 >> 2] = $3;
    HEAP32[$5 + 4 >> 2] = $2;
    $2 = $0 + 16 | 0;
    $3 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    $5 = $1 + 16 | 0;
    HEAP32[$5 >> 2] = $3;
    HEAP32[$5 + 4 >> 2] = $2;
    $0 = $0 + 8 | 0;
    $2 = HEAP32[$0 >> 2];
    $0 = HEAP32[$0 + 4 >> 2];
    $1 = $1 + 8 | 0;
    HEAP32[$1 >> 2] = $2;
    HEAP32[$1 + 4 >> 2] = $0;
   }
   $2 = $4 + 160 | 0;
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$4 + 412 >> 2] + 80 | 0, HEAP32[$4 + 408 >> 2] + 80 | 0, $2);
   $0 = $4 + 80 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($0, $2);
   rustsecp256k1_v0_8_1_fe_negate($0, $0, 1);
   $1 = $4 + 40 | 0;
   rustsecp256k1_v0_8_1_fe_mul($1, $0, $2);
   rustsecp256k1_v0_8_1_fe_mul($4, $4 + 320 | 0, $0);
   $0 = $4 + 120 | 0;
   rustsecp256k1_v0_8_1_fe_sqr(HEAP32[$4 + 412 >> 2], $0);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 412 >> 2], $1);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 412 >> 2], $4);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 412 >> 2], $4);
   rustsecp256k1_v0_8_1_fe_add($4, HEAP32[$4 + 412 >> 2]);
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$4 + 412 >> 2] + 40 | 0, $4, $0);
   rustsecp256k1_v0_8_1_fe_mul($1, $1, $4 + 240 | 0);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 412 >> 2] + 40 | 0, $1);
  }
  __stack_pointer = $4 + 416 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ecmult_wnaf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$3 + 72 >> 2] = 129;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  HEAP32[$3 + 28 >> 2] = -1;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 1;
  HEAP32[$3 + 16 >> 2] = 0;
  memset(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2] << 2);
  $1 = HEAP32[$3 + 68 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $3 + 32 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $2 = $1 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $2 = $1 + 16 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 8 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $2;
  if (rustsecp256k1_v0_8_1_scalar_get_bits($0, 255, 1)) {
   $0 = $3 + 32 | 0;
   rustsecp256k1_v0_8_1_scalar_negate($0, $0);
   HEAP32[$3 + 20 >> 2] = -1;
  }
  while (1) {
   if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 72 >> 2]) {
    if ((rustsecp256k1_v0_8_1_scalar_get_bits($3 + 32 | 0, HEAP32[$3 + 24 >> 2], 1) | 0) == HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
     continue;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 64 >> 2];
    if (HEAP32[$3 + 12 >> 2] > (HEAP32[$3 + 72 >> 2] - HEAP32[$3 + 24 >> 2] | 0)) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 72 >> 2] - HEAP32[$3 + 24 >> 2]
    }
    $1 = HEAP32[$3 + 24 >> 2];
    $2 = HEAP32[$3 + 12 >> 2];
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 8 >> 2] = $3 + 32;
    HEAP32[$0 + 4 >> 2] = $1;
    HEAP32[$0 >> 2] = $2;
    $1 = HEAP32[$0 + 4 >> 2];
    label$1 : {
     if ((($1 + HEAP32[$0 >> 2] | 0) - 1 >>> 6 | 0) == ($1 >>> 6 | 0)) {
      (wasm2js_i32$0 = $0, wasm2js_i32$1 = rustsecp256k1_v0_8_1_scalar_get_bits(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      break label$1;
     }
     $1 = HEAP32[$0 + 4 >> 2];
     $2 = HEAP32[$0 + 8 >> 2] + ($1 >>> 6 << 3) | 0;
     $4 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2];
     $5 = $1 & 63;
     $1 = $5 & 31;
     if ($5 >>> 0 >= 32) {
      $1 = $2 >>> $1 | 0
     } else {
      $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $4 >>> $1
     }
     $4 = HEAP32[$0 + 4 >> 2];
     $2 = 64 - ($4 & 63) | 0;
     $5 = HEAP32[$0 >> 2];
     HEAP32[$0 + 12 >> 2] = (($5 & 63) >>> 0 < 32 ? 1 << $5 : 0) - 1 & ((($2 & 63) >>> 0 < 32 ? HEAP32[HEAP32[$0 + 8 >> 2] + (($4 >>> 6 | 0) + 1 << 3) >> 2] << $2 : 0) | $1);
    }
    __stack_pointer = $0 + 16 | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 8 >> 2] >> HEAP32[$3 + 64 >> 2] - 1 & 1;
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - (HEAP32[$3 + 16 >> 2] << HEAP32[$3 + 64 >> 2]);
    HEAP32[HEAP32[$3 + 76 >> 2] + (HEAP32[$3 + 24 >> 2] << 2) >> 2] = Math_imul(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2]);
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 12 >> 2];
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 28 >> 2] + 1 | 0;
 }
 
 function rustsecp256k1_v0_8_1_ecmult_table_get_ge_storage($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = 4;
  label$1 : {
   if (HEAP32[$3 + 4 >> 2] > 0) {
    rustsecp256k1_v0_8_1_ge_from_storage(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2] + ((HEAP32[$3 + 4 >> 2] - 1 | 0) / 2 << 6) | 0);
    break label$1;
   }
   rustsecp256k1_v0_8_1_ge_from_storage(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2] + ((-1 - HEAP32[$3 + 4 >> 2] | 0) / 2 << 6) | 0);
   $0 = HEAP32[$3 + 12 >> 2] + 40 | 0;
   rustsecp256k1_v0_8_1_fe_negate($0, $0, 1);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function rustsecp256k1_v0_8_1_gej_add_zinv_var($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 544 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 540 >> 2] = $0;
  HEAP32[$4 + 536 >> 2] = $1;
  HEAP32[$4 + 532 >> 2] = $2;
  HEAP32[$4 + 528 >> 2] = $3;
  label$1 : {
   if (HEAP32[HEAP32[$4 + 536 >> 2] + 120 >> 2]) {
    HEAP32[HEAP32[$4 + 540 >> 2] + 120 >> 2] = HEAP32[HEAP32[$4 + 532 >> 2] + 80 >> 2];
    $0 = $4 + 48 | 0;
    rustsecp256k1_v0_8_1_fe_sqr($0, HEAP32[$4 + 528 >> 2]);
    $1 = $4 + 8 | 0;
    rustsecp256k1_v0_8_1_fe_mul($1, $0, HEAP32[$4 + 528 >> 2]);
    rustsecp256k1_v0_8_1_fe_mul(HEAP32[$4 + 540 >> 2], HEAP32[$4 + 532 >> 2], $0);
    rustsecp256k1_v0_8_1_fe_mul(HEAP32[$4 + 540 >> 2] + 40 | 0, HEAP32[$4 + 532 >> 2] + 40 | 0, $1);
    rustsecp256k1_v0_8_1_fe_set_int(HEAP32[$4 + 540 >> 2] + 80 | 0, 1);
    break label$1;
   }
   if (HEAP32[HEAP32[$4 + 532 >> 2] + 80 >> 2]) {
    memcpy(HEAP32[$4 + 540 >> 2], HEAP32[$4 + 536 >> 2], 128);
    break label$1;
   }
   $2 = $4 + 488 | 0;
   rustsecp256k1_v0_8_1_fe_mul($2, HEAP32[$4 + 536 >> 2] + 80 | 0, HEAP32[$4 + 528 >> 2]);
   $3 = $4 + 448 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($3, $2);
   $0 = HEAP32[$4 + 536 >> 2];
   $6 = HEAP32[$0 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $9 = $4 + 408 | 0;
   $1 = $9;
   HEAP32[$1 >> 2] = $6;
   HEAP32[$1 + 4 >> 2] = $5;
   $6 = $0 + 32 | 0;
   $5 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $7 = $1 + 32 | 0;
   HEAP32[$7 >> 2] = $5;
   HEAP32[$7 + 4 >> 2] = $6;
   $6 = $0 + 24 | 0;
   $5 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $7 = $1 + 24 | 0;
   HEAP32[$7 >> 2] = $5;
   HEAP32[$7 + 4 >> 2] = $6;
   $6 = $0 + 16 | 0;
   $5 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $7 = $1 + 16 | 0;
   HEAP32[$7 >> 2] = $5;
   HEAP32[$7 + 4 >> 2] = $6;
   $0 = $0 + 8 | 0;
   $6 = HEAP32[$0 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = $1 + 8 | 0;
   HEAP32[$1 >> 2] = $6;
   HEAP32[$1 + 4 >> 2] = $0;
   rustsecp256k1_v0_8_1_fe_normalize_weak($9);
   $6 = $4 + 368 | 0;
   rustsecp256k1_v0_8_1_fe_mul($6, HEAP32[$4 + 532 >> 2], $3);
   $0 = HEAP32[$4 + 536 >> 2] + 40 | 0;
   $5 = HEAP32[$0 >> 2];
   $7 = HEAP32[$0 + 4 >> 2];
   $1 = $4 + 328 | 0;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $7;
   $5 = $0 + 32 | 0;
   $7 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $8 = $1 + 32 | 0;
   HEAP32[$8 >> 2] = $7;
   HEAP32[$8 + 4 >> 2] = $5;
   $5 = $0 + 24 | 0;
   $7 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $8 = $1 + 24 | 0;
   HEAP32[$8 >> 2] = $7;
   HEAP32[$8 + 4 >> 2] = $5;
   $5 = $0 + 16 | 0;
   $7 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $8 = $1 + 16 | 0;
   HEAP32[$8 >> 2] = $7;
   HEAP32[$8 + 4 >> 2] = $5;
   $0 = $0 + 8 | 0;
   $5 = HEAP32[$0 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $7 = $1 + 8 | 0;
   HEAP32[$7 >> 2] = $5;
   HEAP32[$7 + 4 >> 2] = $0;
   rustsecp256k1_v0_8_1_fe_normalize_weak($1);
   $0 = $4 + 288 | 0;
   rustsecp256k1_v0_8_1_fe_mul($0, HEAP32[$4 + 532 >> 2] + 40 | 0, $3);
   rustsecp256k1_v0_8_1_fe_mul($0, $0, $2);
   $2 = $4 + 248 | 0;
   rustsecp256k1_v0_8_1_fe_negate($2, $9, 1);
   rustsecp256k1_v0_8_1_fe_add($2, $6);
   $3 = $4 + 208 | 0;
   rustsecp256k1_v0_8_1_fe_negate($3, $0, 1);
   rustsecp256k1_v0_8_1_fe_add($3, $1);
   if (rustsecp256k1_v0_8_1_fe_normalizes_to_zero_var($2)) {
    if (rustsecp256k1_v0_8_1_fe_normalizes_to_zero_var($4 + 208 | 0)) {
     rustsecp256k1_v0_8_1_gej_double_var(HEAP32[$4 + 540 >> 2], HEAP32[$4 + 536 >> 2], 0);
     break label$1;
    }
    rustsecp256k1_v0_8_1_gej_set_infinity(HEAP32[$4 + 540 >> 2]);
    break label$1;
   }
   HEAP32[HEAP32[$4 + 540 >> 2] + 120 >> 2] = 0;
   $2 = $4 + 248 | 0;
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$4 + 540 >> 2] + 80 | 0, HEAP32[$4 + 536 >> 2] + 80 | 0, $2);
   $0 = $4 + 168 | 0;
   rustsecp256k1_v0_8_1_fe_sqr($0, $2);
   rustsecp256k1_v0_8_1_fe_negate($0, $0, 1);
   $1 = $4 + 128 | 0;
   rustsecp256k1_v0_8_1_fe_mul($1, $0, $2);
   $2 = $4 + 88 | 0;
   rustsecp256k1_v0_8_1_fe_mul($2, $4 + 408 | 0, $0);
   $0 = $4 + 208 | 0;
   rustsecp256k1_v0_8_1_fe_sqr(HEAP32[$4 + 540 >> 2], $0);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 540 >> 2], $1);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 540 >> 2], $2);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 540 >> 2], $2);
   rustsecp256k1_v0_8_1_fe_add($2, HEAP32[$4 + 540 >> 2]);
   rustsecp256k1_v0_8_1_fe_mul(HEAP32[$4 + 540 >> 2] + 40 | 0, $2, $0);
   rustsecp256k1_v0_8_1_fe_mul($1, $1, $4 + 328 | 0);
   rustsecp256k1_v0_8_1_fe_add(HEAP32[$4 + 540 >> 2] + 40 | 0, $1);
  }
  __stack_pointer = $4 + 544 | 0;
 }
 
 function _ZN4core3ops8function6FnOnce9call_once17h3dc861fe8243ca46E($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  while (1) continue;
 }
 
 function _ZN4core3ptr102drop_in_place$LT$$RF$core__iter__adapters__copied__Copied$LT$core__slice__iter__Iter$LT$u8$GT$$GT$$GT$17h01995fcf37961fd5E($0) {
  $0 = $0 | 0;
 }
 
 function _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 24 | 0] = 1;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = 691660;
  HEAP32[$2 + 8 >> 2] = 691648;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2 + 8;
  wasm2js_trap();
 }
 
 function _ZN4core5slice5index26slice_start_index_len_fail17h65f4c63cf9c3fca0E($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = $0;
  $0 = $3 + 8 | 0;
  HEAP32[$0 + 12 >> 2] = 2;
  HEAP32[$3 + 28 >> 2] = 2;
  $1 = $3 + 32 | 0;
  HEAP32[$1 + 12 >> 2] = 14;
  HEAP32[$3 + 16 >> 2] = 692116;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 14;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 40 >> 2] = $3 + 4;
  HEAP32[$3 + 32 >> 2] = $3;
  _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($0, $2);
  wasm2js_trap();
 }
 
 function _ZN4core3fmt9Formatter3pad17hc8670a09b26e6217E($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  folding_inner0 : {
   $9 = HEAP32[$0 + 8 >> 2];
   $3 = HEAP32[$0 + 16 >> 2];
   label$1 : {
    if ($9 | $3) {
     label$3 : {
      if (!$3) {
       break label$3
      }
      $10 = $1 + $2 | 0;
      $7 = HEAP32[$0 + 20 >> 2] + 1 | 0;
      $4 = $1;
      while (1) {
       label$4 : {
        $3 = $4;
        $7 = $7 - 1 | 0;
        if (!$7) {
         break label$4
        }
        if (($3 | 0) == ($10 | 0)) {
         break label$3
        }
        $5 = HEAP8[$3 | 0];
        label$6 : {
         if (($5 | 0) >= 0) {
          $5 = $5 & 255;
          $4 = $3 + 1 | 0;
          break label$6;
         }
         $8 = HEAPU8[$3 + 1 | 0] & 63;
         $4 = $5 & 31;
         if ($5 >>> 0 <= 4294967263) {
          $5 = $4 << 6 | $8;
          $4 = $3 + 2 | 0;
          break label$6;
         }
         $8 = HEAPU8[$3 + 2 | 0] & 63 | $8 << 6;
         if ($5 >>> 0 < 4294967280) {
          $5 = $8 | $4 << 12;
          $4 = $3 + 3 | 0;
          break label$6;
         }
         $5 = $4 << 18 & 1835008 | (HEAPU8[$3 + 3 | 0] & 63 | $8 << 6);
         if (($5 | 0) == 1114112) {
          break label$3
         }
         $4 = $3 + 4 | 0;
        }
        $6 = $4 + ($6 - $3 | 0) | 0;
        if (($5 | 0) != 1114112) {
         continue
        }
        break label$3;
       }
       break;
      };
      if (($3 | 0) == ($10 | 0)) {
       break label$3
      }
      $4 = HEAP8[$3 | 0];
      label$10 : {
       if (($4 | 0) >= 0) {
        break label$10
       }
       if ($4 >>> 0 < 4294967264) {
        break label$10
       }
       if ($4 >>> 0 < 4294967280) {
        break label$10
       }
       if ((($4 & 255) << 18 & 1835008 | (HEAPU8[$3 + 3 | 0] & 63 | ((HEAPU8[$3 + 2 | 0] & 63) << 6 | (HEAPU8[$3 + 1 | 0] & 63) << 12))) == 1114112) {
        break label$3
       }
      }
      label$11 : {
       label$12 : {
        if (!$6) {
         break label$12
        }
        if ($2 >>> 0 <= $6 >>> 0) {
         $3 = 0;
         if (($2 | 0) == ($6 | 0)) {
          break label$12
         }
         break label$11;
        }
        $3 = 0;
        if (HEAP8[$1 + $6 | 0] < -64) {
         break label$11
        }
       }
       $3 = $1;
      }
      $2 = $3 ? $6 : $2;
      $1 = $3 ? $3 : $1;
     }
     if (!$9) {
      break folding_inner0
     }
     $6 = HEAP32[$0 + 12 >> 2];
     label$15 : {
      if ($2 >>> 0 >= 16) {
       $4 = _ZN4core3str5count14do_count_chars17hb4e3e41c06e6311bE($1, $2);
       break label$15;
      }
      if (!$2) {
       $4 = 0;
       break label$15;
      }
      $5 = $2 & 3;
      label$18 : {
       if ($2 >>> 0 < 4) {
        $4 = 0;
        $3 = $1;
        break label$18;
       }
       $7 = $2 & -4;
       $4 = 0;
       $3 = $1;
       while (1) {
        $4 = ((($4 + (HEAP8[$3 | 0] > -65) | 0) + (HEAP8[$3 + 1 | 0] > -65) | 0) + (HEAP8[$3 + 2 | 0] > -65) | 0) + (HEAP8[$3 + 3 | 0] > -65) | 0;
        $3 = $3 + 4 | 0;
        $7 = $7 - 4 | 0;
        if ($7) {
         continue
        }
        break;
       };
      }
      if (!$5) {
       break label$15
      }
      while (1) {
       $4 = $4 + (HEAP8[$3 | 0] > -65) | 0;
       $3 = $3 + 1 | 0;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue
       }
       break;
      };
     }
     if ($4 >>> 0 < $6 >>> 0) {
      $4 = $6 - $4 | 0;
      $6 = $4;
      label$23 : {
       label$24 : {
        label$25 : {
         $3 = HEAPU8[$0 + 32 | 0];
         $3 = ($3 | 0) != 3 ? $3 : 0;
         switch ($3 - 1 | 0) {
         case 1:
          break label$24;
         case 0:
          break label$25;
         default:
          break label$23;
         };
        }
        $6 = 0;
        $3 = $4;
        break label$23;
       }
       $3 = $4 >>> 1 | 0;
       $6 = $4 + 1 >>> 1 | 0;
      }
      $3 = $3 + 1 | 0;
      $4 = HEAP32[$0 + 4 >> 2];
      $5 = HEAP32[$0 + 28 >> 2];
      $0 = HEAP32[$0 >> 2];
      label$26 : {
       while (1) {
        $3 = $3 - 1 | 0;
        if (!$3) {
         break label$26
        }
        if (!(FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]]($0, $5) | 0)) {
         continue
        }
        break;
       };
       return 1;
      }
      $3 = 1;
      if (($5 | 0) == 1114112) {
       break label$1
      }
      if (FUNCTION_TABLE[HEAP32[$4 + 12 >> 2]]($0, $1, $2) | 0) {
       break label$1
      }
      $3 = 0;
      while (1) {
       if (($3 | 0) == ($6 | 0)) {
        return 0
       }
       $3 = $3 + 1 | 0;
       if (!(FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]]($0, $5) | 0)) {
        continue
       }
       break;
      };
      return $3 - 1 >>> 0 < $6 >>> 0;
     }
     break folding_inner0;
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 12 >> 2]](HEAP32[$0 >> 2], $1, $2) | 0;
   }
   return $3;
  }
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 12 >> 2]](HEAP32[$0 >> 2], $1, $2) | 0;
 }
 
 function _ZN4core9panicking5panic17h2f041bf6aa990dfdE($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = 1;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 691648;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = $1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $3 + 24;
  _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($3, $2);
  wasm2js_trap();
 }
 
 function _ZN4core3fmt3num3imp52_$LT$impl$u20$core__fmt__Display$u20$for$u20$u32$GT$3fmt17h92423c436fb8eb6cE($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return _ZN4core3fmt3num3imp7fmt_u6417h4efdfe2e2910c8baE(HEAP32[$0 >> 2], 0, 1, $1) | 0;
 }
 
 function _ZN4core3fmt9Formatter12pad_integral17h4e9d67aec8d112efE($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  label$1 : {
   if ($1) {
    $9 = HEAP32[$0 + 24 >> 2];
    $1 = $9 & 1;
    $11 = $1 ? 43 : 1114112;
    $1 = $1 + $5 | 0;
    break label$1;
   }
   $9 = HEAP32[$0 + 24 >> 2];
   $11 = 45;
   $1 = $5 + 1 | 0;
  }
  $8 = $1;
  label$3 : {
   if (!($9 & 4)) {
    $2 = 0;
    break label$3;
   }
   label$5 : {
    if ($3 >>> 0 >= 16) {
     $6 = _ZN4core3str5count14do_count_chars17hb4e3e41c06e6311bE($2, $3);
     break label$5;
    }
    if (!$3) {
     break label$5
    }
    $10 = $3 & 3;
    label$8 : {
     if ($3 >>> 0 < 4) {
      $1 = $2;
      break label$8;
     }
     $7 = $3 & -4;
     $1 = $2;
     while (1) {
      $6 = ((($6 + (HEAP8[$1 | 0] > -65) | 0) + (HEAP8[$1 + 1 | 0] > -65) | 0) + (HEAP8[$1 + 2 | 0] > -65) | 0) + (HEAP8[$1 + 3 | 0] > -65) | 0;
      $1 = $1 + 4 | 0;
      $7 = $7 - 4 | 0;
      if ($7) {
       continue
      }
      break;
     };
    }
    if (!$10) {
     break label$5
    }
    while (1) {
     $6 = $6 + (HEAP8[$1 | 0] > -65) | 0;
     $1 = $1 + 1 | 0;
     $10 = $10 - 1 | 0;
     if ($10) {
      continue
     }
     break;
    };
   }
   $8 = $6 + $8 | 0;
  }
  folding_inner0 : {
   label$12 : {
    if (!HEAP32[$0 + 8 >> 2]) {
     $1 = 1;
     $7 = HEAP32[$0 >> 2];
     $0 = HEAP32[$0 + 4 >> 2];
     if (_ZN4core3fmt9Formatter12pad_integral12write_prefix17hb62369c02f1a296aE($7, $0, $11, $2, $3)) {
      break label$12
     }
     break folding_inner0;
    }
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        $7 = HEAP32[$0 + 12 >> 2];
        if ($8 >>> 0 < $7 >>> 0) {
         if ($9 & 8) {
          break label$14
         }
         $6 = $7 - $8 | 0;
         $7 = $6;
         $1 = HEAPU8[$0 + 32 | 0];
         $1 = ($1 | 0) == 3 ? 1 : $1;
         switch ($1 - 1 | 0) {
         case 1:
          break label$16;
         case 0:
          break label$17;
         default:
          break label$15;
         };
        }
        $1 = 1;
        $7 = HEAP32[$0 >> 2];
        $0 = HEAP32[$0 + 4 >> 2];
        if (_ZN4core3fmt9Formatter12pad_integral12write_prefix17hb62369c02f1a296aE($7, $0, $11, $2, $3)) {
         break label$12
        }
        break folding_inner0;
       }
       $7 = 0;
       $1 = $6;
       break label$15;
      }
      $1 = $6 >>> 1 | 0;
      $7 = $6 + 1 >>> 1 | 0;
     }
     $1 = $1 + 1 | 0;
     $6 = HEAP32[$0 + 4 >> 2];
     $8 = HEAP32[$0 + 28 >> 2];
     $0 = HEAP32[$0 >> 2];
     label$19 : {
      while (1) {
       $1 = $1 - 1 | 0;
       if (!$1) {
        break label$19
       }
       if (!(FUNCTION_TABLE[HEAP32[$6 + 16 >> 2]]($0, $8) | 0)) {
        continue
       }
       break;
      };
      return 1;
     }
     $1 = 1;
     if (($8 | 0) == 1114112) {
      break label$12
     }
     if (_ZN4core3fmt9Formatter12pad_integral12write_prefix17hb62369c02f1a296aE($0, $6, $11, $2, $3)) {
      break label$12
     }
     if (FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0, $4, $5) | 0) {
      break label$12
     }
     $1 = 0;
     label$21 : {
      while (1) {
       $2 = $7;
       if (($1 | 0) == ($7 | 0)) {
        break label$21
       }
       $1 = $1 + 1 | 0;
       if (!(FUNCTION_TABLE[HEAP32[$6 + 16 >> 2]]($0, $8) | 0)) {
        continue
       }
       break;
      };
      $2 = $1 - 1 | 0;
     }
     $1 = $2 >>> 0 < $7 >>> 0;
     break label$12;
    }
    $10 = HEAP32[$0 + 28 >> 2];
    HEAP32[$0 + 28 >> 2] = 48;
    $12 = HEAPU8[$0 + 32 | 0];
    $1 = 1;
    HEAP8[$0 + 32 | 0] = 1;
    $6 = HEAP32[$0 >> 2];
    $9 = HEAP32[$0 + 4 >> 2];
    if (_ZN4core3fmt9Formatter12pad_integral12write_prefix17hb62369c02f1a296aE($6, $9, $11, $2, $3)) {
     break label$12
    }
    $1 = ($7 - $8 | 0) + 1 | 0;
    label$24 : {
     while (1) {
      $1 = $1 - 1 | 0;
      if (!$1) {
       break label$24
      }
      if (!(FUNCTION_TABLE[HEAP32[$9 + 16 >> 2]]($6, 48) | 0)) {
       continue
      }
      break;
     };
     return 1;
    }
    $1 = 1;
    if (FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($6, $4, $5) | 0) {
     break label$12
    }
    HEAP8[$0 + 32 | 0] = $12;
    HEAP32[$0 + 28 >> 2] = $10;
    return 0;
   }
   return $1;
  }
  return FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($7, $4, $5) | 0;
 }
 
 function _ZN36_$LT$T$u20$as$u20$core__any__Any$GT$7type_id17h61129fb65c4d369eE($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 218205413;
  return -651004958;
 }
 
 function _ZN44_$LT$$RF$T$u20$as$u20$core__fmt__Display$GT$3fmt17h83d64daa01a5a105E($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return _ZN4core3fmt9Formatter3pad17hc8670a09b26e6217E($1, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) | 0;
 }
 
 function _ZN4core3fmt3num53_$LT$impl$u20$core__fmt__LowerHex$u20$for$u20$i32$GT$3fmt17h052b0c4abd00a848E($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 128 | 0;
  __stack_pointer = $3;
  $0 = HEAP32[$0 >> 2];
  while (1) {
   $4 = $0 & 15;
   HEAP8[($2 + $3 | 0) + 127 | 0] = $4 + ($4 >>> 0 < 10 ? 48 : 87);
   $2 = $2 - 1 | 0;
   $4 = $0 >>> 0 > 15;
   $0 = $0 >>> 4 | 0;
   if ($4) {
    continue
   }
   break;
  };
  $0 = $2 + 128 | 0;
  if ($0 >>> 0 >= 129) {
   _ZN4core5slice5index26slice_start_index_len_fail17h65f4c63cf9c3fca0E($0, 128, 691844);
   wasm2js_trap();
  }
  $0 = _ZN4core3fmt9Formatter12pad_integral17h4e9d67aec8d112efE($1, 1, 691860, 2, ($2 + $3 | 0) + 128 | 0, 0 - $2 | 0);
  __stack_pointer = $3 + 128 | 0;
  return $0;
 }
 
 function _ZN4core9panicking19assert_failed_inner17h2aa5e8e7fe201c6eE($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0;
  $7 = __stack_pointer - 112 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 12 >> 2] = $2;
  HEAP32[$7 + 8 >> 2] = $1;
  HEAP32[$7 + 20 >> 2] = $4;
  HEAP32[$7 + 16 >> 2] = $3;
  label$1 : {
   label$2 : {
    switch (($0 & 255) - 1 | 0) {
    default:
     HEAP32[$7 + 24 >> 2] = 691685;
     $0 = 2;
     break label$1;
    case 0:
     HEAP32[$7 + 24 >> 2] = 691683;
     $0 = 2;
     break label$1;
    case 1:
     break label$2;
    };
   }
   HEAP32[$7 + 24 >> 2] = 691676;
   $0 = 7;
  }
  HEAP32[$7 + 28 >> 2] = $0;
  folding_inner0 : {
   if (!HEAP32[$5 + 8 >> 2]) {
    $0 = $7 + 56 | 0;
    HEAP32[$0 + 20 >> 2] = 12;
    HEAP32[$0 + 12 >> 2] = 12;
    $1 = $7 + 88 | 0;
    HEAP32[$1 + 12 >> 2] = 4;
    HEAP32[$1 + 20 >> 2] = 3;
    HEAP32[$7 + 96 >> 2] = 691784;
    HEAP32[$7 + 88 >> 2] = 0;
    HEAP32[$7 + 60 >> 2] = 11;
    HEAP32[$7 + 104 >> 2] = $0;
    break folding_inner0;
   }
   $1 = $5 + 16 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = $7 + 32 | 0;
   $3 = $0 + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $1 = $5 + 8 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $3 = $0 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $1 = HEAP32[$5 + 4 >> 2];
   HEAP32[$7 + 32 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 36 >> 2] = $1;
   $1 = $7 + 88 | 0;
   HEAP32[$1 + 12 >> 2] = 4;
   HEAP32[$1 + 20 >> 2] = 4;
   HEAP32[$7 + 84 >> 2] = 13;
   $2 = $7 + 56 | 0;
   HEAP32[$2 + 20 >> 2] = 12;
   HEAP32[$2 + 12 >> 2] = 12;
   HEAP32[$7 + 96 >> 2] = 691748;
   HEAP32[$7 + 88 >> 2] = 0;
   HEAP32[$7 + 60 >> 2] = 11;
   HEAP32[$7 + 104 >> 2] = $2;
   HEAP32[$7 + 80 >> 2] = $0;
  }
  HEAP32[$7 + 72 >> 2] = $7 + 16;
  HEAP32[$7 + 64 >> 2] = $7 + 8;
  HEAP32[$7 + 56 >> 2] = $7 + 24;
  _ZN4core9panicking9panic_fmt17hf5c4cd929d4aaa9eE($1, $6);
  wasm2js_trap();
 }
 
 function _ZN42_$LT$$RF$T$u20$as$u20$core__fmt__Debug$GT$3fmt17h04b7544b9603c4b8E($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 12 >> 2]](HEAP32[$0 >> 2], $1) | 0;
 }
 
 function _ZN59_$LT$core__fmt__Arguments$u20$as$u20$core__fmt__Display$GT$3fmt17h6f234635568ce518E($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $2 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 40 | 0] = 3;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 32;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = $3;
  HEAP32[$1 + 8 >> 2] = $2;
  label$1 : {
   label$2 : {
    $9 = HEAP32[$0 >> 2];
    label$3 : {
     if (!$9) {
      $3 = HEAP32[$0 + 20 >> 2];
      if (!$3) {
       break label$3
      }
      $2 = HEAP32[$0 + 16 >> 2];
      $6 = $3 << 3;
      $7 = ($3 - 1 & 536870911) + 1 | 0;
      $3 = HEAP32[$0 + 8 >> 2];
      while (1) {
       $4 = HEAP32[$3 + 4 >> 2];
       if ($4) {
        if (FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]](HEAP32[$1 + 8 >> 2], HEAP32[$3 >> 2], $4) | 0) {
         break label$2
        }
       }
       if (FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]](HEAP32[$2 >> 2], $1 + 8 | 0) | 0) {
        break label$2
       }
       $2 = $2 + 8 | 0;
       $3 = $3 + 8 | 0;
       $6 = $6 - 8 | 0;
       if ($6) {
        continue
       }
       break;
      };
      break label$3;
     }
     $2 = HEAP32[$0 + 4 >> 2];
     if (!$2) {
      break label$3
     }
     $12 = $2 << 5;
     $7 = ($2 - 1 & 134217727) + 1 | 0;
     $3 = HEAP32[$0 + 8 >> 2];
     while (1) {
      $2 = HEAP32[$3 + 4 >> 2];
      if ($2) {
       if (FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]](HEAP32[$1 + 8 >> 2], HEAP32[$3 >> 2], $2) | 0) {
        break label$2
       }
      }
      $4 = $6 + $9 | 0;
      HEAP8[$1 + 40 | 0] = HEAPU8[$4 + 28 | 0];
      $2 = $4 + 20 | 0;
      $5 = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$1 + 36 >> 2] = $5;
      $5 = HEAP32[$4 + 16 >> 2];
      $8 = HEAP32[$0 + 16 >> 2];
      $10 = 0;
      $2 = 0;
      label$9 : {
       label$10 : {
        switch (HEAP32[$4 + 12 >> 2] - 1 | 0) {
        case 0:
         $11 = $8 + ($5 << 3) | 0;
         if (HEAP32[$11 + 4 >> 2] != 10) {
          break label$9
         }
         $5 = HEAP32[HEAP32[$11 >> 2] >> 2];
         break;
        case 1:
         break label$9;
        default:
         break label$10;
        };
       }
       $2 = 1;
      }
      HEAP32[$1 + 20 >> 2] = $5;
      HEAP32[$1 + 16 >> 2] = $2;
      $2 = HEAP32[$4 + 8 >> 2];
      label$12 : {
       label$13 : {
        switch (HEAP32[$4 + 4 >> 2] - 1 | 0) {
        case 0:
         $5 = $8 + ($2 << 3) | 0;
         if (HEAP32[$5 + 4 >> 2] != 10) {
          break label$12
         }
         $2 = HEAP32[HEAP32[$5 >> 2] >> 2];
         break;
        case 1:
         break label$12;
        default:
         break label$13;
        };
       }
       $10 = 1;
      }
      HEAP32[$1 + 28 >> 2] = $2;
      HEAP32[$1 + 24 >> 2] = $10;
      $2 = $8 + (HEAP32[$4 >> 2] << 3) | 0;
      if (FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]](HEAP32[$2 >> 2], $1 + 8 | 0) | 0) {
       break label$2
      }
      $3 = $3 + 8 | 0;
      $6 = $6 + 32 | 0;
      if (($12 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
    }
    if (HEAPU32[$0 + 12 >> 2] > $7 >>> 0) {
     $0 = HEAP32[$0 + 8 >> 2] + ($7 << 3) | 0;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]](HEAP32[$1 + 8 >> 2], HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) | 0) {
      break label$2
     }
    }
    $0 = 0;
    break label$1;
   }
   $0 = 1;
  }
  __stack_pointer = $1 + 48 | 0;
  return $0 | 0;
 }
 
 function _ZN4core3str5count14do_count_chars17hb4e3e41c06e6311bE($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  label$1 : {
   label$2 : {
    $2 = $0 + 3 & -4;
    $4 = $2 - $0 | 0;
    if ($4 >>> 0 > $1 >>> 0) {
     break label$2
    }
    if ($4 >>> 0 > 4) {
     break label$2
    }
    $6 = $1 - $4 | 0;
    if ($6 >>> 0 < 4) {
     break label$2
    }
    $7 = $6 & 3;
    $1 = 0;
    label$3 : {
     if (($0 | 0) == ($2 | 0)) {
      break label$3
     }
     $3 = $4 & 3;
     label$4 : {
      if ($2 + ($0 ^ -1) >>> 0 < 3) {
       $2 = $0;
       break label$4;
      }
      $9 = $4 & -4;
      $2 = $0;
      while (1) {
       $1 = ((($1 + (HEAP8[$2 | 0] > -65) | 0) + (HEAP8[$2 + 1 | 0] > -65) | 0) + (HEAP8[$2 + 2 | 0] > -65) | 0) + (HEAP8[$2 + 3 | 0] > -65) | 0;
       $2 = $2 + 4 | 0;
       $9 = $9 - 4 | 0;
       if ($9) {
        continue
       }
       break;
      };
     }
     if (!$3) {
      break label$3
     }
     while (1) {
      $1 = $1 + (HEAP8[$2 | 0] > -65) | 0;
      $2 = $2 + 1 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    $0 = $0 + $4 | 0;
    label$8 : {
     if (!$7) {
      break label$8
     }
     $2 = $0 + ($6 & -4) | 0;
     $5 = HEAP8[$2 | 0] > -65;
     if (($7 | 0) == 1) {
      break label$8
     }
     $5 = $5 + (HEAP8[$2 + 1 | 0] > -65) | 0;
     if (($7 | 0) == 2) {
      break label$8
     }
     $5 = $5 + (HEAP8[$2 + 2 | 0] > -65) | 0;
    }
    $4 = $6 >>> 2 | 0;
    $3 = $1 + $5 | 0;
    while (1) {
     $1 = $0;
     if (!$4) {
      break label$1
     }
     $5 = $4 >>> 0 >= 192 ? 192 : $4;
     $6 = $5 & 3;
     $9 = $5 << 2;
     $7 = $5 & 252;
     label$10 : {
      if (!$7) {
       $2 = 0;
       break label$10;
      }
      $10 = $1 + ($7 << 2) | 0;
      $2 = 0;
      while (1) {
       if (!$0) {
        break label$10
       }
       $8 = $2;
       $2 = HEAP32[$0 >> 2];
       $8 = $8 + ((($2 ^ -1) >>> 7 | $2 >>> 6) & 16843009) | 0;
       $2 = HEAP32[$0 + 4 >> 2];
       $8 = $8 + ((($2 ^ -1) >>> 7 | $2 >>> 6) & 16843009) | 0;
       $2 = HEAP32[$0 + 8 >> 2];
       $8 = $8 + ((($2 ^ -1) >>> 7 | $2 >>> 6) & 16843009) | 0;
       $2 = HEAP32[$0 + 12 >> 2];
       $2 = $8 + ((($2 ^ -1) >>> 7 | $2 >>> 6) & 16843009) | 0;
       $0 = $0 + 16 | 0;
       if (($10 | 0) != ($0 | 0)) {
        continue
       }
       break;
      };
     }
     $4 = $4 - $5 | 0;
     $0 = $1 + $9 | 0;
     $3 = (Math_imul(($2 >>> 8 & 16711935) + ($2 & 16711935) | 0, 65537) >>> 16 | 0) + $3 | 0;
     if (!$6) {
      continue
     }
     break;
    };
    $0 = 0;
    label$13 : {
     if (!$1) {
      break label$13
     }
     $1 = $1 + ($7 << 2) | 0;
     $0 = HEAP32[$1 >> 2];
     $0 = (($0 ^ -1) >>> 7 | $0 >>> 6) & 16843009;
     if (($6 | 0) == 1) {
      break label$13
     }
     $2 = $0;
     $0 = HEAP32[$1 + 4 >> 2];
     $0 = $2 + ((($0 ^ -1) >>> 7 | $0 >>> 6) & 16843009) | 0;
     if (($6 | 0) == 2) {
      break label$13
     }
     $2 = $0;
     $0 = HEAP32[$1 + 8 >> 2];
     $0 = $2 + ((($0 ^ -1) >>> 7 | $0 >>> 6) & 16843009) | 0;
    }
    return (Math_imul(($0 >>> 8 & 459007) + ($0 & 16711935) | 0, 65537) >>> 16 | 0) + $3 | 0;
   }
   if (!$1) {
    return 0
   }
   $2 = $1 & 3;
   label$16 : {
    if ($1 >>> 0 < 4) {
     break label$16
    }
    $1 = $1 & -4;
    while (1) {
     $3 = ((($3 + (HEAP8[$0 | 0] > -65) | 0) + (HEAP8[$0 + 1 | 0] > -65) | 0) + (HEAP8[$0 + 2 | 0] > -65) | 0) + (HEAP8[$0 + 3 | 0] > -65) | 0;
     $0 = $0 + 4 | 0;
     $1 = $1 - 4 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   if (!$2) {
    break label$1
   }
   while (1) {
    $3 = $3 + (HEAP8[$0 | 0] > -65) | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $3;
 }
 
 function _ZN4core3fmt9Formatter12pad_integral12write_prefix17hb62369c02f1a296aE($0, $1, $2, $3, $4) {
  var $5 = 0;
  label$1 : {
   label$2 : {
    if (($2 | 0) != 1114112) {
     $5 = 1;
     if (FUNCTION_TABLE[HEAP32[$1 + 16 >> 2]]($0, $2) | 0) {
      break label$2
     }
    }
    if ($3) {
     break label$1
    }
    $5 = 0;
   }
   return $5;
  }
  return FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0, $3, $4) | 0;
 }
 
 function _ZN4core3fmt3num3imp7fmt_u6417h4efdfe2e2910c8baE($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  $7 = 39;
  if ($1 | !$1 & $0 >>> 0 >= 1e4) {
   while (1) {
    $13 = ($10 + 9 | 0) + $7 | 0;
    $14 = $13 - 4 | 0;
    $5 = $0;
    $9 = 0;
    $11 = 0;
    __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$303 : {
     folding_inner0 : {
      if (!$1) {
       $0 = ($5 >>> 0) / 1e4 | 0;
       break folding_inner0;
      }
      $6 = 51 - Math_clz32($1) | 0;
      $4 = 0 - $6 | 0;
      $8 = $6 & 63;
      $0 = $8 & 31;
      if ($8 >>> 0 >= 32) {
       $8 = $1 >>> $0 | 0
      } else {
       $9 = $1 >>> $0 | 0;
       $8 = ((1 << $0) - 1 & $1) << 32 - $0 | $5 >>> $0;
      }
      $4 = $4 & 63;
      $0 = $4 & 31;
      if ($4 >>> 0 >= 32) {
       $4 = $5 << $0;
       $0 = 0;
      } else {
       $4 = (1 << $0) - 1 & $5 >>> 32 - $0 | $1 << $0;
       $0 = $5 << $0;
      }
      if ($6) {
       while (1) {
        $15 = $9 << 1 | $8 >>> 31;
        $12 = $8 << 1 | $4 >>> 31;
        $16 = 0 - ($15 + ($12 >>> 0 > 9999) | 0) >> 31;
        $9 = $16 & 1e4;
        $8 = $12 - $9 | 0;
        $9 = $15 - ($9 >>> 0 > $12 >>> 0) | 0;
        $4 = $4 << 1 | $0 >>> 31;
        $0 = $0 << 1 | $11;
        $11 = $16 & 1;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       }
      }
      i64toi32_i32$HIGH_BITS = $4 << 1 | $0 >>> 31;
      $0 = $0 << 1 | $11;
      break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$303;
     }
     i64toi32_i32$HIGH_BITS = 0;
    }
    $8 = i64toi32_i32$HIGH_BITS;
    $4 = $5 - __wasm_i64_mul($0, $8, 1e4, 0) | 0;
    $9 = (($4 & 65535) >>> 0) / 100 | 0;
    $6 = ($9 << 1) + 691862 | 0;
    $6 = HEAPU8[$6 | 0] | HEAPU8[$6 + 1 | 0] << 8;
    HEAP8[$14 | 0] = $6;
    HEAP8[$14 + 1 | 0] = $6 >>> 8;
    $6 = $13 - 2 | 0;
    $4 = (($4 - Math_imul($9, 100) & 65535) << 1) + 691862 | 0;
    $4 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8;
    HEAP8[$6 | 0] = $4;
    HEAP8[$6 + 1 | 0] = $4 >>> 8;
    $7 = $7 - 4 | 0;
    $5 = !$1 & $5 >>> 0 > 99999999 | ($1 | 0) != 0;
    $1 = $8;
    if ($5) {
     continue
    }
    break;
   }
  }
  if ($0 >>> 0 > 99) {
   $7 = $7 - 2 | 0;
   $1 = $7 + ($10 + 9 | 0) | 0;
   $8 = $0;
   $0 = (($0 & 65535) >>> 0) / 100 | 0;
   $5 = (($8 - Math_imul($0, 100) & 65535) << 1) + 691862 | 0;
   $5 = HEAPU8[$5 | 0] | HEAPU8[$5 + 1 | 0] << 8;
   HEAP8[$1 | 0] = $5;
   HEAP8[$1 + 1 | 0] = $5 >>> 8;
  }
  label$5 : {
   if ($0 >>> 0 >= 10) {
    $7 = $7 - 2 | 0;
    $1 = $7 + ($10 + 9 | 0) | 0;
    $0 = ($0 << 1) + 691862 | 0;
    $0 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
    HEAP8[$1 | 0] = $0;
    HEAP8[$1 + 1 | 0] = $0 >>> 8;
    break label$5;
   }
   $7 = $7 - 1 | 0;
   HEAP8[$7 + ($10 + 9 | 0) | 0] = $0 + 48;
  }
  $0 = _ZN4core3fmt9Formatter12pad_integral17h4e9d67aec8d112efE($3, $2, 691648, 0, ($10 + 9 | 0) + $7 | 0, 39 - $7 | 0);
  __stack_pointer = $10 + 48 | 0;
  return $0;
 }
 
 function _ZN4core3fmt3num53_$LT$impl$u20$core__fmt__UpperHex$u20$for$u20$i32$GT$3fmt17h70e0e82254dfc07cE($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 128 | 0;
  __stack_pointer = $3;
  $0 = HEAP32[$0 >> 2];
  while (1) {
   $4 = $0 & 15;
   HEAP8[($2 + $3 | 0) + 127 | 0] = $4 + ($4 >>> 0 < 10 ? 48 : 55);
   $2 = $2 - 1 | 0;
   $4 = $0 >>> 0 > 15;
   $0 = $0 >>> 4 | 0;
   if ($4) {
    continue
   }
   break;
  };
  $0 = $2 + 128 | 0;
  if ($0 >>> 0 >= 129) {
   _ZN4core5slice5index26slice_start_index_len_fail17h65f4c63cf9c3fca0E($0, 128, 691844);
   wasm2js_trap();
  }
  $0 = _ZN4core3fmt9Formatter12pad_integral17h4e9d67aec8d112efE($1, 1, 691860, 2, ($2 + $3 | 0) + 128 | 0, 0 - $2 | 0);
  __stack_pointer = $3 + 128 | 0;
  return $0;
 }
 
 function memset($0, $1) {
  var $2 = 0, $3 = 0;
  if ($1 >>> 0 > 15) {
   $2 = 0 - $0 & 3;
   $3 = $2 + $0 | 0;
   if ($2) {
    while (1) {
     HEAP8[$0 | 0] = 0;
     $0 = $0 + 1 | 0;
     if ($3 >>> 0 > $0 >>> 0) {
      continue
     }
     break;
    }
   }
   $1 = $1 - $2 | 0;
   $2 = $1 & -4;
   $0 = $2 + $3 | 0;
   if (($2 | 0) > 0) {
    while (1) {
     HEAP32[$3 >> 2] = 0;
     $3 = $3 + 4 | 0;
     if ($3 >>> 0 < $0 >>> 0) {
      continue
     }
     break;
    }
   }
   $1 = $1 & 3;
  }
  if ($1) {
   $1 = $0 + $1 | 0;
   while (1) {
    HEAP8[$0 | 0] = 0;
    $0 = $0 + 1 | 0;
    if ($1 >>> 0 > $0 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $10 = $0;
  $14 = $1;
  $0 = __wasm_i64_mul($5, 0, $1, 0);
  $11 = $0;
  $12 = i64toi32_i32$HIGH_BITS;
  $15 = $5;
  $0 = __wasm_i64_mul($5, 0, $2, 0);
  $16 = $0;
  $13 = i64toi32_i32$HIGH_BITS;
  $5 = $13;
  $9 = __wasm_i64_mul($6, 0, $1, 0);
  $0 = $9 + $0 | 0;
  $1 = $5 + i64toi32_i32$HIGH_BITS | 0;
  $1 = $0 >>> 0 < $9 >>> 0 ? $1 + 1 | 0 : $1;
  $9 = $0;
  $0 = $0 + $12 | 0;
  $5 = 0;
  $17 = $5;
  $5 = $11;
  $0 = $17 >>> 0 > $5 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$10 >> 2] = $5;
  $5 = $0;
  HEAP32[$10 + 4 >> 2] = $0;
  $0 = ($1 | 0) == ($13 | 0) & $9 >>> 0 < $16 >>> 0 | $1 >>> 0 < $13 >>> 0;
  $9 = $1 | 0;
  $1 = __wasm_i64_mul($6, 0, $2, 0) + $9 | 0;
  $0 = i64toi32_i32$HIGH_BITS + $0 | 0;
  $0 = $1 >>> 0 < $9 >>> 0 ? $0 + 1 | 0 : $0;
  $5 = ($5 | 0) == ($12 | 0) & $11 >>> 0 < $11 >>> 0 | $5 >>> 0 < $12 >>> 0;
  $1 = $1 + $5 | 0;
  $5 = $1 >>> 0 < $5 >>> 0 ? $0 + 1 | 0 : $0;
  $0 = __wasm_i64_mul($7, $8, $14, $2);
  $7 = i64toi32_i32$HIGH_BITS;
  $3 = __wasm_i64_mul($15, $6, $3, $4);
  $2 = $3 + $0 | 0;
  $0 = $7 + i64toi32_i32$HIGH_BITS | 0;
  $0 = ($2 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0) + $5 | 0;
  $1 = $1 + $2 | 0;
  $0 = $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$10 + 8 >> 2] = $1;
  HEAP32[$10 + 12 >> 2] = $0;
 }
 
 function memcpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = $0;
  if ($2 >>> 0 > 15) {
   $0 = 0 - $3 & 3;
   $4 = $0 + $3 | 0;
   if ($0) {
    $5 = $1;
    while (1) {
     HEAP8[$3 | 0] = HEAPU8[$5 | 0];
     $5 = $5 + 1 | 0;
     $3 = $3 + 1 | 0;
     if ($4 >>> 0 > $3 >>> 0) {
      continue
     }
     break;
    };
   }
   $7 = $2 - $0 | 0;
   $6 = $7 & -4;
   $3 = $6 + $4 | 0;
   $0 = $0 + $1 | 0;
   $5 = $0 & 3;
   label$5 : {
    if ($5) {
     if (($6 | 0) <= 0) {
      break label$5
     }
     $2 = $0 & -4;
     $1 = $2 + 4 | 0;
     $8 = $5 << 3;
     $9 = 0 - $8 & 24;
     $5 = HEAP32[$2 >> 2];
     while (1) {
      $2 = $5 >>> $8 | 0;
      $5 = HEAP32[$1 >> 2];
      HEAP32[$4 >> 2] = $2 | $5 << $9;
      $1 = $1 + 4 | 0;
      $4 = $4 + 4 | 0;
      if ($4 >>> 0 < $3 >>> 0) {
       continue
      }
      break;
     };
     break label$5;
    }
    if (($6 | 0) <= 0) {
     break label$5
    }
    $1 = $0;
    while (1) {
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
     $1 = $1 + 4 | 0;
     $4 = $4 + 4 | 0;
     if ($4 >>> 0 < $3 >>> 0) {
      continue
     }
     break;
    };
   }
   $2 = $7 & 3;
   $1 = $0 + $6 | 0;
  }
  if ($2) {
   $0 = $2 + $3 | 0;
   while (1) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $1 = $1 + 1 | 0;
    $3 = $3 + 1 | 0;
    if ($0 >>> 0 > $3 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $2 & 65535;
  $5 = $0 & 65535;
  $6 = Math_imul($4, $5);
  $7 = $2 >>> 16 | 0;
  $9 = Math_imul($5, $7);
  $8 = $0 >>> 16 | 0;
  $5 = Math_imul($4, $8) + ($6 >>> 16 | 0) | 0;
  $4 = $9 + ($5 & 65535) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1, $2) + Math_imul($7, $8) | 0) + Math_imul($0, $3) + ($5 >>> 16) + ($4 >>> 16) | 0;
  return $6 & 65535 | $4 << 16;
 }
 
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = [null, _ZN4core3ptr28drop_in_place$LT$$RF$i32$GT$17hf450025c00523291E, _ZN42_$LT$$RF$T$u20$as$u20$core__fmt__Debug$GT$3fmt17he25d25258bb04061E, _ZN4core3ptr28drop_in_place$LT$$RF$i32$GT$17hf450025c00523291E, _ZN42_$LT$$RF$T$u20$as$u20$core__fmt__Debug$GT$3fmt17hca523a2a619bfcbaE, _ZN44_$LT$$RF$T$u20$as$u20$core__fmt__Display$GT$3fmt17h3b17872c4203a65fE, nonce_function_rfc6979, nonce_function_bip340, rustsecp256k1_v0_8_1_default_illegal_callback_fn, rustsecp256k1_v0_8_1_default_error_callback_fn, _ZN4core3ops8function6FnOnce9call_once17h3dc861fe8243ca46E, _ZN44_$LT$$RF$T$u20$as$u20$core__fmt__Display$GT$3fmt17h83d64daa01a5a105E, _ZN42_$LT$$RF$T$u20$as$u20$core__fmt__Debug$GT$3fmt17h04b7544b9603c4b8E, _ZN59_$LT$core__fmt__Arguments$u20$as$u20$core__fmt__Display$GT$3fmt17h6f234635568ce518E, _ZN4core3fmt3num3imp52_$LT$impl$u20$core__fmt__Display$u20$for$u20$u32$GT$3fmt17h92423c436fb8eb6cE, _ZN4core3ptr102drop_in_place$LT$$RF$core__iter__adapters__copied__Copied$LT$core__slice__iter__Iter$LT$u8$GT$$GT$$GT$17h01995fcf37961fd5E, _ZN36_$LT$T$u20$as$u20$core__any__Any$GT$7type_id17h61129fb65c4d369eE];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "initializeContext": initializeContext, 
  "isPoint": isPoint, 
  "PUBLIC_KEY_INPUT": {
   get value() {
    return global$1;
   }, 
   set value(_global$1) {
    global$1 = _global$1;
   }
  }, 
  "pointAdd": pointAdd, 
  "PUBLIC_KEY_INPUT2": {
   get value() {
    return global$2;
   }, 
   set value(_global$2) {
    global$2 = _global$2;
   }
  }, 
  "pointAddScalar": pointAddScalar, 
  "TWEAK_INPUT": {
   get value() {
    return global$3;
   }, 
   set value(_global$3) {
    global$3 = _global$3;
   }
  }, 
  "xOnlyPointAddTweak": xOnlyPointAddTweak, 
  "X_ONLY_PUBLIC_KEY_INPUT": {
   get value() {
    return global$4;
   }, 
   set value(_global$4) {
    global$4 = _global$4;
   }
  }, 
  "xOnlyPointAddTweakCheck": xOnlyPointAddTweakCheck, 
  "X_ONLY_PUBLIC_KEY_INPUT2": {
   get value() {
    return global$5;
   }, 
   set value(_global$5) {
    global$5 = _global$5;
   }
  }, 
  "pointCompress": pointCompress, 
  "pointFromScalar": pointFromScalar, 
  "PRIVATE_INPUT": {
   get value() {
    return global$6;
   }, 
   set value(_global$6) {
    global$6 = _global$6;
   }
  }, 
  "xOnlyPointFromScalar": xOnlyPointFromScalar, 
  "xOnlyPointFromPoint": xOnlyPointFromPoint, 
  "pointMultiply": pointMultiply, 
  "privateAdd": privateAdd, 
  "privateSub": privateSub, 
  "privateNegate": privateNegate, 
  "sign": sign, 
  "EXTRA_DATA_INPUT": {
   get value() {
    return global$7;
   }, 
   set value(_global$7) {
    global$7 = _global$7;
   }
  }, 
  "HASH_INPUT": {
   get value() {
    return global$8;
   }, 
   set value(_global$8) {
    global$8 = _global$8;
   }
  }, 
  "SIGNATURE_INPUT": {
   get value() {
    return global$9;
   }, 
   set value(_global$9) {
    global$9 = _global$9;
   }
  }, 
  "signRecoverable": signRecoverable, 
  "signSchnorr": signSchnorr, 
  "verify": verify, 
  "recover": recover, 
  "verifySchnorr": verifySchnorr, 
  "rustsecp256k1_v0_8_1_default_illegal_callback_fn": rustsecp256k1_v0_8_1_default_illegal_callback_fn, 
  "rustsecp256k1_v0_8_1_default_error_callback_fn": rustsecp256k1_v0_8_1_default_error_callback_fn, 
  "__data_end": {
   get value() {
    return global$10;
   }, 
   set value(_global$10) {
    global$10 = _global$10;
   }
  }, 
  "__heap_base": {
   get value() {
    return global$11;
   }, 
   set value(_global$11) {
    global$11 = _global$11;
   }
  }
 };
}

var retasmFunc = asmFunc({
  "./rand.js": $_rand_js,
  "./validate_error.js": $_validate_error_js,
});
export var memory = retasmFunc.memory;
export var initializeContext = retasmFunc.initializeContext;
export var isPoint = retasmFunc.isPoint;
export var PUBLIC_KEY_INPUT = retasmFunc.PUBLIC_KEY_INPUT;
export var pointAdd = retasmFunc.pointAdd;
export var PUBLIC_KEY_INPUT2 = retasmFunc.PUBLIC_KEY_INPUT2;
export var pointAddScalar = retasmFunc.pointAddScalar;
export var TWEAK_INPUT = retasmFunc.TWEAK_INPUT;
export var xOnlyPointAddTweak = retasmFunc.xOnlyPointAddTweak;
export var X_ONLY_PUBLIC_KEY_INPUT = retasmFunc.X_ONLY_PUBLIC_KEY_INPUT;
export var xOnlyPointAddTweakCheck = retasmFunc.xOnlyPointAddTweakCheck;
export var X_ONLY_PUBLIC_KEY_INPUT2 = retasmFunc.X_ONLY_PUBLIC_KEY_INPUT2;
export var pointCompress = retasmFunc.pointCompress;
export var pointFromScalar = retasmFunc.pointFromScalar;
export var PRIVATE_INPUT = retasmFunc.PRIVATE_INPUT;
export var xOnlyPointFromScalar = retasmFunc.xOnlyPointFromScalar;
export var xOnlyPointFromPoint = retasmFunc.xOnlyPointFromPoint;
export var pointMultiply = retasmFunc.pointMultiply;
export var privateAdd = retasmFunc.privateAdd;
export var privateSub = retasmFunc.privateSub;
export var privateNegate = retasmFunc.privateNegate;
export var sign = retasmFunc.sign;
export var EXTRA_DATA_INPUT = retasmFunc.EXTRA_DATA_INPUT;
export var HASH_INPUT = retasmFunc.HASH_INPUT;
export var SIGNATURE_INPUT = retasmFunc.SIGNATURE_INPUT;
export var signRecoverable = retasmFunc.signRecoverable;
export var signSchnorr = retasmFunc.signSchnorr;
export var verify = retasmFunc.verify;
export var recover = retasmFunc.recover;
export var verifySchnorr = retasmFunc.verifySchnorr;
export var rustsecp256k1_v0_8_1_default_illegal_callback_fn = retasmFunc.rustsecp256k1_v0_8_1_default_illegal_callback_fn;
export var rustsecp256k1_v0_8_1_default_error_callback_fn = retasmFunc.rustsecp256k1_v0_8_1_default_error_callback_fn;
export var __data_end = retasmFunc.__data_end;
export var __heap_base = retasmFunc.__heap_base;
