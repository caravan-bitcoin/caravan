echo "üöÄ Pre-commit checks (from $(pwd))..."

# Find the git root directory (works from anywhere in monorepo)
GIT_ROOT=$(git rev-parse --show-toplevel)
echo "üìÅ Git root: $GIT_ROOT"

# 1. Check Node.js version (get it from package.json engines)
echo "1Ô∏è‚É£ Checking Node.js version..."
CURRENT_NODE=$(node --version)

# Find package.json with engines field
ENGINES_FILE="$GIT_ROOT/package.json"

if [ -n "$ENGINES_FILE" ]; then
    echo "   üìã Using engines from: $ENGINES_FILE"

    # Extract Node version requirement from engines field
    NODE_REQUIREMENT=$(node -e "
        try {
            const pkg = require('$ENGINES_FILE');
            if (pkg.engines && pkg.engines.node) {
                console.log(pkg.engines.node);
            }
        } catch(e) {
            console.log('‚ö†Ô∏è  package.json with no engines field found')
            process.exit(1);
        }
    ")

    if [ $? -eq 0 ] && [ -n "$NODE_REQUIREMENT" ]; then
        echo "   üìù Required Node.js: $NODE_REQUIREMENT"
        echo "   üíª Current Node.js: $CURRENT_NODE"

        # Extract major version for basic check
        # We are using shell-based version checking

        CURRENT_MAJOR=$(echo "$CURRENT_NODE" | sed 's/v\([0-9]*\)\..*/\1/')
        REQUIRED_MAJOR=$(echo "$NODE_REQUIREMENT" | sed 's/[^0-9]*\([0-9]*\).*/\1/')

        if [ "$CURRENT_MAJOR" != "$REQUIRED_MAJOR" ]; then
            echo ""
            echo "‚ùå Node.js major version mismatch!"
            echo "   Required: Node $REQUIRED_MAJOR.x (from: $NODE_REQUIREMENT)"
            echo "   Current:  $CURRENT_NODE"
            echo ""
            echo "   To fix this:"
            echo "   1. Run: nvm use $REQUIRED_MAJOR"
            echo "   2. Or run: nvm install $REQUIRED_MAJOR"
            echo "   3. Then try your commit again"
            echo ""
            exit 1
        fi


        echo "   ‚úÖ Node.js version OK"
    else
        echo "   ‚ö†Ô∏è  Could not read engines.node field"
        exit 1
    fi
else
    echo "   ‚ö†Ô∏è  package.json with no engines field found"
    exit 1
fi

# 2. package-lock.json sanity checks:
#    a) Ensure package-lock.json doesn‚Äôt have massive diffs ‚Äî usually a sign of incorrect Node.js/npm versions.
#    b) Make sure any package-lock.json change is paired with a meaningful change in any workspaces package.json.
echo "2Ô∏è‚É£ Checking package-lock.json changes..."

# Check if there are ANY staged files at all
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    echo "   ‚ö†Ô∏è  No files are currently staged for commit"
    echo "   If you meant to commit changes, you might need to:"
    echo "   - git add <files>       (stage specific files)"
    echo "   - git add .             (stage all changes)"
    echo "   - git commit -a         (stage and commit all tracked files)"
    echo ""
    printf "   Continue with empty commit? (y/N): "

    # Read from /dev/tty to work properly in Git hooks
    if [ -t 0 ]; then
        read -r response
    else
        read -r response < /dev/tty
    fi

    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "‚ùå Commit cancelled"
        exit 1
    fi
    echo "   Proceeding with empty commit..."
else
    echo "   Found staged files:"
    echo "$STAGED_FILES" | sed 's/^/     /'
fi

# Get package-lock.json
ROOT_LOCKFILE="package-lock.json"
STAGED_ROOT_LOCKFILE=$(echo "$STAGED_FILES" | grep "^$ROOT_LOCKFILE$" || true)

# Get all staged package.json files (any workspace)
STAGED_PACKAGE_JSONS=$(echo "$STAGED_FILES" | grep "package\.json$" || true)

# Get unstaged package-lock.json file (might indicate forgotten staging)
UNSTAGED_ROOT_LOCKFILE=$(git diff --name-only | grep "^$ROOT_LOCKFILE$" || true)

# Check staged lockfiles
if [ -n "$STAGED_ROOT_LOCKFILE" ]; then
    echo "   üìùRoot package-lock.json is staged"

   # Count lines changed in lockfile
    LOCK_CHANGES=$(git diff --cached --numstat "$ROOT_LOCKFILE" \
    | awk '{ added += $1; removed += $2 } END { print added + removed }')

    if [ -n "$LOCK_CHANGES" ] && [ "$LOCK_CHANGES" -gt 500 ] && [ -z "$STAGED_PACKAGE_JSONS" ]; then
        echo ""
        echo "   ‚ö†Ô∏è  WARNING: Large changes in package-lock.json ($LOCK_CHANGES lines)"
        echo "   But no package.json files are staged"
        echo ""
        echo "   This might indicate:"
        echo "   - Node.js version mismatch (current: $CURRENT_NODE)"
        echo "   - Lockfile corruption"
        echo "   - Missing package.json changes"
        echo "   - Forgot to stage package.json files"
        echo ""
        echo "   If you added/removed packages, make sure to stage the relevant package.json:"
        if [ -n "$STAGED_PACKAGE_JSONS" ]; then
            echo "$STAGED_PACKAGE_JSONS" | sed 's/^/   git add /'
        else
            echo "   git add package.json  # (or the specific workspace package.json)"
        fi
        echo ""
        printf "   Continue anyway? (y/N): "

        if [ -t 0 ]; then
            read -r response
        else
            read -r response < /dev/tty
        fi

        if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
            echo "‚ùå Commit cancelled"
            exit 1
        fi
    elif [ -n "$STAGED_PACKAGE_JSONS" ]; then
        echo "   ‚úÖ Package.json files are also staged:"
        echo "$STAGED_PACKAGE_JSONS" | sed 's/^/     /'
    fi
fi


# Check for staged root lockfile without staged package.json files
if [ -n "$STAGED_ROOT_LOCKFILE" ] && [ -z "$STAGED_PACKAGE_JSONS" ]; then
    LOCK_CHANGES=$(git diff --cached --numstat "$ROOT_LOCKFILE" | cut -f1)
    echo ""
    echo "   ‚ö†Ô∏è  WARNING: package-lock.json staged without any package.json files"
    echo "   Lockfile changes: $LOCK_CHANGES lines"
    echo ""
    echo "   This might indicate:"
    echo "   - Security updates or npm audit fixes"
    echo "   - Node.js version mismatch causing spurious changes"
    echo "   - Manual lockfile modification (not recommended)"
    echo "   - Forgotten to stage package.json changes"
    echo ""

    if [ -n "$LOCK_CHANGES" ] && [ "$LOCK_CHANGES" -gt 500 ]; then
        echo "   ‚ö†Ô∏è  LARGE changes detected ($LOCK_CHANGES lines) - this is suspicious!"
        echo "   Large lockfile changes usually indicate:"
        echo "   - Wrong Node.js version (current: $CURRENT_NODE)"
        echo "   - Corrupted lockfile"
        echo "   - Missing package.json changes"
        echo ""
        printf "   Continue with lockfile-only commit? (y/N): "

        if [ -t 0 ]; then
            read -r response
        else
            read -r response < /dev/tty
        fi

        if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
            echo ""
            echo "   To check what changed:"
            echo "   git diff --cached $ROOT_LOCKFILE"
            echo ""
            echo "   If this was accidental:"
            echo "   git reset $ROOT_LOCKFILE"
            echo ""
            echo "‚ùå Commit cancelled"
            exit 1
        fi
    else
        echo "   Small changes detected - likely legitimate (security updates, etc.)"
        printf "   Continue? (Y/n): "

        if [ -t 0 ]; then
            read -r response
        else
            read -r response < /dev/tty
        fi

        if [ "$response" = "n" ] || [ "$response" = "N" ]; then
            echo "‚ùå Commit cancelled"
            exit 1
        fi
    fi
fi


# Check for staged package.json files without staged root lockfile
if [ -n "$STAGED_PACKAGE_JSONS" ] && [ -z "$STAGED_ROOT_LOCKFILE" ]; then
    echo ""
    echo "   ‚ùå CRITICAL: package.json files staged without package-lock.json!"
    echo "   Staged package.json files:"
    echo "$STAGED_PACKAGE_JSONS" | sed 's/^/     /'
    echo ""
    echo "   In a monorepo, changing dependencies in any package.json should"
    echo "   update the root package-lock.json file."
    echo ""
    echo "   This indicates you might need to:"
    echo "   1. Run 'npm install' to update the lockfile"
    echo "   2. Stage the updated package-lock.json:"
    echo "      git add package-lock.json"
    echo ""
    echo "‚ùå Commit cancelled - package.json/package-lock.json mismatch"
    exit 1
fi

# Check for unstaged root lockfile when package.json files are staged
if [ -n "$UNSTAGED_ROOT_LOCKFILE" ] && [ -n "$STAGED_PACKAGE_JSONS" ]; then
    echo ""
    echo "   ‚ùå CRITICAL: package.json files staged but package-lock.json is unstaged!"
    echo "   Staged package.json files:"
    echo "$STAGED_PACKAGE_JSONS" | sed 's/^/     /'
    echo "   Unstaged: $ROOT_LOCKFILE"
    echo ""
    echo "   Dependencies must be committed together. To fix:"
    echo "   git add $ROOT_LOCKFILE"
    echo ""
    echo "‚ùå Commit cancelled - missing package-lock.json staging"
    exit 1
fi

# Check for unstaged root lockfile without staged package.json files
if [ -n "$UNSTAGED_ROOT_LOCKFILE" ] && [ -z "$STAGED_PACKAGE_JSONS" ]; then
    UNSTAGED_CHANGES=$(git diff --numstat "$ROOT_LOCKFILE" | cut -f1)
    echo ""
    echo "   ‚ö†Ô∏è  Found unstaged package-lock.json changes ($UNSTAGED_CHANGES lines)"
    echo "   But no package.json files are staged"
    echo ""
    echo "   This might indicate:"
    echo "   - Accidental changes from Node.js version mismatch"
    echo "   - Local development artifacts"
    echo "   - Forgotten to stage package.json changes"
    echo ""

    if [ -n "$UNSTAGED_CHANGES" ] && [ "$UNSTAGED_CHANGES" -gt 50 ]; then
        echo "   üìä Large unstaged changes detected"
        echo ""
        printf "   Continue without staging package-lock.json? (y/N): "

        if [ -t 0 ]; then
            read -r response
        else
            read -r response < /dev/tty
        fi

        if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
            echo ""
            echo "   To stage the lockfile:"
            echo "   git add $ROOT_LOCKFILE"
            echo ""
            echo "   Or to discard the changes:"
            echo "   git checkout $ROOT_LOCKFILE"
            echo ""
            echo "‚ùå Commit cancelled"
            exit 1
        fi
    fi
fi

# Summary for lockfiles
if [ -z "$STAGED_ROOT_LOCKFILE" ] && [ -z "$UNSTAGED_ROOT_LOCKFILE" ] && [ -z "$STAGED_PACKAGE_JSONS" ]; then
    echo "   No dependency-related changes detected"
elif [ -n "$STAGED_ROOT_LOCKFILE" ] && [ -n "$STAGED_PACKAGE_JSONS" ]; then
    echo "   ‚úÖ Dependencies and lockfile properly staged together"
elif [ -n "$STAGED_ROOT_LOCKFILE" ] && [ -z "$STAGED_PACKAGE_JSONS" ]; then
    echo "   ‚ÑπÔ∏è  Lockfile-only changes staged (security updates, etc.)"
elif [ -z "$STAGED_ROOT_LOCKFILE" ] && [ -z "$STAGED_PACKAGE_JSONS" ]; then
    echo "   No dependency changes in this commit"
fi

# 3. Run linting (only if we're in a directory with lint script)
echo "3Ô∏è‚É£ Checking for lint script..."

# Try to find nearest package.json with lint script
CURRENT_DIR=$(pwd)
LINT_DIR=""

# Check current directory and walk up to git root
while [ "$CURRENT_DIR" != "$GIT_ROOT" ] && [ "$CURRENT_DIR" != "/" ]; do
    if [ -f "$CURRENT_DIR/package.json" ] && grep -q '"lint"' "$CURRENT_DIR/package.json"; then
        LINT_DIR="$CURRENT_DIR"
        break
    fi
    CURRENT_DIR=$(dirname "$CURRENT_DIR")
done

# Check git root as well
if [ -z "$LINT_DIR" ] && [ -f "$GIT_ROOT/package.json" ] && grep -q '"lint"' "$GIT_ROOT/package.json"; then
    LINT_DIR="$GIT_ROOT"
fi

if [ -n "$LINT_DIR" ]; then
    echo "   Found lint script in: $LINT_DIR"
    echo "   Running linter..."
    cd "$LINT_DIR"
    npm run lint
    echo "   ‚úÖ Linting passed"
else
    echo "   No lint script found, skipping"
fi

echo ""
echo "‚úÖ All pre-commit checks passed!"
echo ""
